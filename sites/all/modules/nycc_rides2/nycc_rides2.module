<?php

// todo: plan better place for this and how things like this are handled
// called by http://markus.test.nycc.org/admin/structure/block/manage/block/21/configure
// function to replace block code
function nycc_rides2_renew_button_pages() {
  
  if (drupal_is_front_page()) 
    return TRUE;

  $editnids = array('2', '45511', '27725', '13902', '45415', '45416', '4', '45421', '6', '5', '45457', '45457', '45475', '45512', '45517', '45519', '45520', '45521', '');
  if(arg(0) == "node" && arg(2) != "edit" && in_array(arg(1), $editids))
    return true;

  if(arg(0) == "node" && arg(1) =="add" && arg(2) == "rides")
    return true;

  if(arg(0) == "upcoming-events")
    return true;

  $node = node_load(arg(1));
  if (!$node)
      return false;
  $node_type = $node->type;
  
  if($node_type == "rides"){
    if(arg(0)  != "current-riders"){
      return true;
    }
  }

  if($node_type == "region"){
    if(arg(2) != "edit"){
      return true;
    }
  }
  if($node_type == "cue_sheet"){
    if(arg(2) != "edit"){
      return true;
    }
  }

  if($node_type == "product"){
    if(arg(2) != "edit"){
      if(arg(1) != 27756){
        return true;
      }
    }
  }

  if($node_type == "message_board"){
    if(arg(2) != "edit"){
      return true;
    }
  }

} // nycc_rides2_renew_button_pages


// todo: do this properly in D7, using vars, preprocessors and templates
// called from theme override of theme_node_form
function nycc_rides2_output_ride_node_form($form, $op = 'add') {
  
  $output = "";
  
  // todo: output only here, move all customizations to nycc_rides_form_alter 
  
  // NOTE: called by node--rides--edit.tpl.php
  // TODO: consider moving all render code to tpl
  
  //dsm($form);
  
  
  $status = nycc_rides_get_ride_status($form['#node']);
  if ($op == 'edit' && ($status == 'Approved'))
    $output .= drupal_render($form['revision_information']);

  $output .= "<h3>Step 1. Schedule ride date:</h3>";

  //$output .= drupal_render($form['dp-normal-1']);

  //$output .= drupal_render($form['field_date_ride_first']);
  $output .= drupal_render($form['field_ride_timestamp']);
  //$output .= drupal_render($form['field_ride_additional_dates']);
  //$output .= drupal_render($form['choose_calendar_target']);
  //$output .= drupal_render($form['nycc_rides_datepicker']);
  //$output .= drupal_render($form['existing_rides_wrapper']);

  //$output .= "<input id='ride-add-recurring' type='button'value='Clone This Ride â–¼'/>";
  //$output .= "<div id='ride-add-recurring-fields'>";
  //$output .= drupal_render($form['additional_dates']);
  //$output .= "</div>";
  if(nycc_rides_can_approve())
    $output .= drupal_render($form['field_ride_open_signup_days']);
  
  
  $output .= "<h3>" .t("Step 2. Specify ride details:"). "</h3>";

  // D7: do not allow change/view by leaders
  $output .= drupal_render($form['title']);
  //$output .= drupal_render($form['field_ride_status']);
  // D7: not showing?
  $output .= drupal_render($form['field_ride_type']);
   // D7: not showing?
  $output .= drupal_render($form['field_ride_select_level']);
  
  
  
  // D7: not showing? all of these
  $output .= drupal_render($form['field_ride_speed']);
  $output .= drupal_render($form['field_ride_distance_in_miles']);
  $output .= drupal_render($form['field_ride_signups']);
  
  // move to form alter?
  $form['field_ride_spots']['#title'] = 'Max. Participants';
  $form['field_ride_spots'][0]['#title'] = 'Max. Participants';
  $form['field_ride_spots']['und'][0]['value']['#title'] = 'Max. Participants';
  
  $output .= drupal_render($form['field_ride_spots']);

  //$output .= drupal_render($form['field_ride_start_time_hour']);
  //
  //$form['field_ride_start_time_min']['#title'] = "";
  //$form['field_ride_start_time_min']['value']['#title'] = "";
  //
  //$output .= drupal_render($form['field_ride_start_time_min']);
  //
  //$form['field_ride_start_time_select']['#title'] = "";
  //$form['field_ride_start_time_select']['value']['#title'] = "";
  //
  //$output .= drupal_render($form['field_ride_start_time_select']);

  //TODO: Toggle From select & from
  $output .= drupal_render($form['field_ride_from_select']);
  $output .= drupal_render($form['field_ride_from']);
  
  $form['field_ride_description']['#cols'] = 50;
  
  $output .= drupal_render($form['field_ride_description']);

  $output .= "<h3>" .t("Step 3. Select ride leaders:"). "</h3>";
  
  //$output .= "<small>(Start typing last name & wait a second for the system to query our database)</small>";
  
  $form['field_ride_current_leaders']['field_ride_current_leaders_add_more']['#value'] = t("Add another ride leader");
 
  $output .= drupal_render($form['field_ride_current_leaders']);
  unset($form['field_ride_leaders']);
  
  if ($op == 'add') {
    unset($form['field_ride_current_riders']);
    unset($form['field_ride_waitlist']);
    //TODO: Set default value for signup days limit if not Approver
  } else {
    $form['field_ride_current_riders']['field_ride_current_riders_add_more']['#value'] = t('Add another rider');
    if(nycc_rides_can_approve()) {
      $output .= drupal_render($form['field_ride_current_riders']);
      $output .= drupal_render($form['field_ride_waitlist']);
    }
  }

  $output .= "<h3>" .t("Step 4. Upload some images or file attachments (optional):"). "</h3>";
  
  $form['field_ride_image']['field_ride_image_add_more']['#value'] = t('Add another image');
  
  $output .= drupal_render($form['field_ride_image']);

  $form['field_ride_attachments']['field_ride_attachments_add_more']['#value'] = t('Attach another file');
  
  $output .= drupal_render($form['field_ride_attachments']);

  $output .= "<h3>" .t("Step 5. Reference a ride library cue-sheet (optional):"). "</h3>";
  $output .= drupal_render($form['field_ride_cue_sheet']);

  $action = !nycc_rides_can_approve() && in_array($status, array('Approved','Pending','Cancelled', 'Flagged')) ? "Re-submit" : "Submit";

   //if (nycc_rides_can_approve() || ($op=='add'))
  //if ($op == 'add')
    //$output .= nycc_rides2_output_button("$action This Ride", "#", "nycc-ride-save nycc-ride-save-bottom", 'nycc_show_ride_submit_click(); return FALSE;', "");
  //else
 
  // TODO: let's improve cluncky submit handling?
  // use a checkbox?
  
    //$output .= nycc_rides2_output_button("$action This Ride", "#submit-top", "nycc-ride-save nycc-ride-save-bottom btn btn-success", 'nycc_rides_show_ride_submit_confirm();', "");

  //$output .= "<a name='submit-top'></a>";

  //if (!nycc_rides_can_approve() && in_array($status, array('Approved', 'Pending', 'Cancelled', 'Flagged'))) {
  //if ($op != 'add')
    $output .= drupal_render($form['submit_instructions']);
    $output .= drupal_render($form['buttons']['submit']);
    $output .= drupal_render($form['submit_cancel']);
  //}

  $buttons = drupal_render($form['buttons']);

  // old: hide the rest for now
  $output .= "<div class='xxxhide'>";
  // d7:
  //$output .= drupal_render($form);
  $output .= drupal_render_children($form);
  $output .= $buttons;
  $output .= "</div>";
 
  return $output;
} // nycc_rides_output_ride_node_form


function nycc_rides2_node_view($node, $view_mode = NULL, $langcode = NULL) {
  global $user;

  if ($node->type == 'rides') {
    if ($view_mode == 'full') {
      $buttons = nycc_rides2_output_ride_buttons($node);
      $node->content['nycc_buttons'] = array(
        '#markup' => theme_item_list(array(
              'title' => '',
              'items' => $buttons,
              'type' => 'ul',
              'attributes' => array(), 
               )),
        // '#weight' => 100,
        // '#theme' => 'function_name_without_theme',
      );
      $node->content['field_ride_spots']['#title'] = t("Remaining/Spots");
      $node->content['field_ride_spots'][0]['#markup'] = nycc_rides_get_ride_spots_text($node);
    } // full

  //  TODO: FIX THIS - how to set the default value? I'd think we just just use a view to update all records missing a value
  //  if (!nycc_rides_field_has_value($node->field_ride_signups))
  //    $node->field_ride_signups['und'][0]['value'] == "Signups with waiting list";

  //  check for more than two overlapping waitlists - part II
  //  TODO: IF FIX THIS
  //  if (nycc_rides_ride_overlaps_user($uid, $ridetime) > 0) {
  //    drupal_set_message("PLEASE NOTE: Add Me To The Waiting List is disabled because you are already on two waiting lists for rides within 4 hours of this ride.  You can view your waitlist signups in your <a href='/user/$uid/mywaitlists'>profile</a>");
  //  }

  }  // ride
} // nycc_rides2_node_view


// TODO: factor out links into theme - goal: no ui in this module
function nycc_rides2_output_ride_buttons($ride) {
  global $user;

  $buttons = array();

  // ride time as binary
  $ridetime = strtotime(nycc_rides_get_ride_time_as_text($ride));
  
  $is_leader = nycc_rides_is_leader($ride, $user);
  $can_approve = nycc_rides_can_approve($user);
  $can_modify = nycc_rides_can_modify_ride($ride, $user);
  $ride_is_upcoming = nycc_rides_ride_is_upcoming($ride, $user);
  $should_be_enabled = nycc_rides_ride_should_be_enabled($ride);

  $has_status = isset($ride->field_ride_status) && is_array($ride->field_ride_status) && array_key_exists('und', $ride->field_ride_status);
  
  $is_approved = $has_status && ($ride->field_ride_status['und'][0]['value'] == 'Approved' ) ? true : FALSE;
  $is_cancelled = $has_status && ($ride->field_ride_status['und'][0]['value'] == 'Cancelled' ) ? true : FALSE;
  $is_submitted = $has_status && ($ride->field_ride_status['und'][0]['value'] == 'Submitted' ) ? true : FALSE;
  $allows_waiters = nycc_rides_ride_allows_signups($ride) ;

  $is_rider = nycc_rides_is_rider($ride, $user);
  $is_waiter = nycc_rides_is_waiting($ride, $user) ;

  $no_of_riders = nycc_rides_count_riders($ride);
  $no_of_waiters = nycc_rides_count_waiters($ride);

  $has_spots = isset($ride->field_ride_spots) && is_array($ride->field_ride_spots) && array_key_exists('und', $ride->field_ride_spots);
  
  $no_of_spots = $has_spots && is_numeric($ride->field_ride_spots['und'][0]['value']) ? $ride->field_ride_spots['und'][0]['value'] : 0;

  if ($no_of_spots)
    $available_spots = $no_of_spots - $no_of_riders;

  $nid = $ride->nid;
  $title = $ride->title;
  $path = "node/$nid";
  
  if ($can_approve && $is_submitted) {
    $buttons[] = nycc_rides2_nycc_ride_link('Approve Ride', "node/$nid/approve");
  }

  if ($can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Revise Ride Details', "node/$nid/edit");
  }

  $buttons[] = nycc_rides2_nycc_ride_link('Email Ride Leaders', "mailto:". nycc_rides_get_all_leader_emails($ride) . "?subject=$title");

  if ($is_waiter && $ride_is_upcoming && $is_approved) {
    // TODO: check that signups are allowed?
    $buttons[] = nycc_rides2_nycc_ride_link('Withdraw From Waitlist', "node/$nid/withdraw");
  }
  
  if ($should_be_enabled['value'] == true){
    if (!$no_of_spots || ($available_spots > 0)) {
      $buttons[] = nycc_rides2_nycc_ride_link('Join Ride', "node/$nid/join");
    } else if ($no_of_spots && (!$available_spots) && (!$is_rider) && (!$is_waiter)){
      $buttons[] = nycc_rides2_nycc_ride_link('Add Me To The Waitlist', "node/$nid/join");
    }
  } else {
    if ($is_approved && !$is_rider && !$is_waiter){
      $buttons[] = nycc_rides2_nycc_ride_link('Join Ride (Disabled)', "javascript:alert('" . $should_be_enabled['reason'] . ".')");
    }
  }

  if ($can_modify && $is_approved) {
    $buttons[] = nycc_rides2_nycc_ride_link('Roster & Waiver Form', "/printpdf/nycc-riders-roster-pdf/$nid");
  }

  if (!$is_cancelled && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Cancel Ride', "node/$nid/cancel");
  }
  
  if (!$is_approved && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Resubmit Ride For Approval', "node/$nid/edit/resubmit");
  }
  
  if ($no_of_riders && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Email Participants', "mailto:". nycc_rides_get_all_rider_emails($ride) ."?subject=Ride: $title");
  }
  
  if ($no_of_riders && $can_modify && !$is_cancelled) {
    $buttons[] = nycc_rides2_nycc_ride_link('Ride Attendance', "node/$nid/attend");
  }
  
  if ($no_of_waiters && $can_modify ) {
    $buttons[] = nycc_rides2_nycc_ride_link('Email Waitlist', "mailto:". nycc_rides_get_all_waitlist_emails($ride) ."?subject=$title");
  }
  
  if ($no_of_riders && $no_of_waiters && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Email Riders & Waitlist ', "mailto:". nycc_rides_get_all_rider_emails($ride) . "," . nycc_rides_get_all_waitlist_emails($ride) ."?subject=$title");
  }

  if ((arg(0) == 'node') && arg(1) && !arg(2) && $is_approved) {
    $buttons[] = nycc_rides2_nycc_ride_link('Re-list This Ride', "node/add/rides/relist/$nid");
  }

  return $buttons;
}

function nycc_rides2_theme($existing, $type, $theme, $path) {
  return array(

    'nycc_submit_ride_form' => array(
      'template' => 'nycc-submit-ride',
      'variables' => array(),
    ),
    
    'nycc_resubmit_ride_form' => array(
      'template' => 'nycc-resubmit-ride',
      'variables' => array('node'),
    ),

    'nycc_review_ride_form' => array(
      'template' => 'nycc-review-ride',
      'variables' => array('node'),
    ),

    'nycc_ride_coordinators_block' => array(   // this is just plain html, why bother? use a real block?
      'template' => 'nycc-coordinators',
      'variables' => array(),
    ),
    
    'nycc_ride_links' => array(
      'template' => 'nycc-rides-links',
      'variables' => array('links' => array()),
    ),
    
    // why default value not creating variable
    'nycc_ride_link' => array(
      'variables' => array('text', 'path', 'classes' => 'nycc-link nycc-ride-link'),
    ),
    
    'nycc_existing_rides' => array(
      'template' => 'nycc-existing_rides',
      'variables' => array('date'),
    ),
    
    'nycc_riders_roster' => array(
      'template' => 'nycc-riders-roster',
      'variables' => array('node', 'type'),   // type is html or pdf
    ),
    
    'nycc_ride_users' => array(
      'variables' => array('node' => null, 'type' => null),       // type is leaders, riders or waiters 
    ),

    // MORE? add user links?  nycc_user_link or nycc_user_profile_link?
    
  );
}

// why do we need these? for overrides?

function nycc_rides2_nycc_ride_users() {
  return theme('nycc_ride_users');
}

function nycc_rides2_nycc_ride_link($text, $path, $classes='nycc-link nycc-ride-link') {
  return theme('nycc_ride_link', array('text' => $text, 'path' => $path, 'classes' => $classes));
}

function nycc_rides2_process_nycc_ride_link(&$variables) {
  //$variables['classes'] = 'nycc-link nycc-rides-link';
}

function nycc_rides2_process_nycc_ride_users(&$variables) {
  // case $variables['type'] to determine fieldname and path, or use array
  $type = $variables['type'];
  $ride = $variables['node'];
  
  
  $fields = array('leaders' => 'field_ride_current_leaders', 'riders' => 'field_ride_current_riders', 'waiters' => 'field_ride_waitlist', );
  $labels = array('leaders' => 'Leaders', 'riders' => 'Riders', 'waiters' => 'Waiters', );
  $paths = array('leaders' => 'my_rides', 'riders' => 'my_rides', 'waiters' => 'my_rides', );
  
  if (!array_key_exists($type, $fields))  // check for valid key
    $type = 'riders';
    
  $field_name = $fields['type'];
  $path = $paths['type'];
  $label = $labels['type'];
  
  $variables['ride_users'] = nycc_rides_output_list_of_users($ride, $field_name, $path);
  $variables['ride_users_title'] = $label;
}

// override in theme, adding bootstrap classes there?
function theme_nycc_ride_link($variables) {
  return l($variables['text'], $variables['path'], array('attributes' => array('class' => array($variables['classes'])))); 
}

function theme_nycc_ride_users($variables) {
  return theme_item_list(array('items' => $variables['ride_users'], 'title' => $variables['ride_users_title'], 'type' => 'ul'));  
} 
