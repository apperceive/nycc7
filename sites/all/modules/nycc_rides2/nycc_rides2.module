<?php


// todo: plan better place for this and how things like this are handled
// nycc_blocks.module or nycc_site.module or membership?
// called by http://markus.test.nycc.org/admin/structure/block/manage/block/21/configure
// function to replace block code
// moved back to block due to scoping issues
/*
function nycc_rides2_renew_button_pages() {
  $editnids = array('2', '45511', '27725', '13902', '45415', '45416', '4', '45421', '6', '5', '45457', '45457', '45475', '45512', '45517', '45519', '45520', '45521');
  
  if (drupal_is_front_page() || 
      (arg(0) == "node" && arg(2) != "edit" && in_array(arg(1), $editnids)) ||
      (arg(0) == "node" && arg(1) =="add" && arg(2) == "rides") ||
      (arg(0) == "upcoming-events") )
    return true;

  $node = node_load(arg(1));
  if (!$node)
      return false;
  
  $node_type = $node->type;
  
  if ((($node_type == "rides") && (arg(0)  != "current-riders")) ||
      (($node_type == "region") && (arg(2) != "edit")) ||
      (($node_type == "cue_sheet") && (arg(2) != "edit")) ||
      (($node_type == "product") && (arg(2) != "edit") && (arg(1) != 27756)) ||
      (($node_type == "message_board") && (arg(2) != "edit")))
    return true;

return false;

} // nycc_rides2_renew_button_pages
*/


// TODO: factor out links into theme - goal: no ui in this module
function nycc_rides2_output_ride_buttons($ride) {
  global $user;

  $buttons = array();

  // ride time as binary
  //$ridetime = strtotime(nycc_rides_get_ride_time_as_text($ride));
  
  $is_leader = nycc_rides_is_leader($ride, $user);
  $is_rider = nycc_rides_is_rider($ride, $user);
  $is_waiter = nycc_rides_is_waiting($ride, $user) ;
  $can_approve = nycc_rides_can_approve($user);
  $can_modify = nycc_rides_can_modify_ride($ride, $user);
  $ride_is_upcoming = nycc_rides_ride_is_upcoming($ride, $user);
  $should_be_enabled = nycc_rides_ride_should_be_enabled($ride);
  $allows_waiters = nycc_rides_ride_allows_signups($ride) ;
  $no_of_riders = nycc_rides_count_riders($ride);
  $no_of_waiters = nycc_rides_count_waiters($ride);

  $has_status = isset($ride->field_ride_status) && is_array($ride->field_ride_status) && array_key_exists('und', $ride->field_ride_status);
  
  $is_pending = $has_status && ($ride->field_ride_status['und'][0]['value'] == 'Pending' ) ? true : FALSE;
  $is_approved = $has_status && ($ride->field_ride_status['und'][0]['value'] == 'Approved' ) ? true : FALSE;
  $is_cancelled = $has_status && ($ride->field_ride_status['und'][0]['value'] == 'Cancelled' ) ? true : FALSE;
  $is_submitted = $has_status && ($ride->field_ride_status['und'][0]['value'] == 'Submitted' ) ? true : FALSE;
  $is_revised = $has_status && ($ride->field_ride_status['und'][0]['value'] == 'Revised' ) ? true : FALSE;

  $has_spots = isset($ride->field_ride_spots) && is_array($ride->field_ride_spots) && array_key_exists('und', $ride->field_ride_spots);
  
  $no_of_spots = $has_spots && is_numeric($ride->field_ride_spots['und'][0]['value']) ? $ride->field_ride_spots['und'][0]['value'] : 0;

  $available_spots = $no_of_spots ? $no_of_spots - $no_of_riders : 0;

  $nid = $ride->nid;
  $title = $ride->title;
  $path = "node/$nid";
  
  if ($can_approve && $is_submitted) {
    $buttons[] = nycc_rides2_nycc_ride_link('Approve Ride', "node/$nid/approve");
  }

  if ($can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Revise Ride Details', "node/$nid/edit");
  }

  $buttons[] = nycc_rides2_nycc_ride_link('Email Ride Leaders', "mailto:". nycc_rides_get_all_leader_emails($ride) . "?subject=$title");

  if ($is_waiter && $ride_is_upcoming && $is_approved) {
    // TODO: check that signups are allowed?
    $buttons[] = nycc_rides2_nycc_ride_link('Withdraw From Waitlist', "node/$nid/withdraw");
  }
  
  if ($should_be_enabled['value'] == true){
    if (!$no_of_spots || ($available_spots > 0)) {
      $buttons[] = nycc_rides2_nycc_ride_link('Join Ride', "node/$nid/join");
    } else if ($no_of_spots && (!$available_spots) && (!$is_rider) && (!$is_waiter)){
      $buttons[] = nycc_rides2_nycc_ride_link('Add Me To The Waitlist', "node/$nid/join");
    }
  } else {
    if ($is_approved && !$is_rider && !$is_waiter){
      //$buttons[] = nycc_rides2_nycc_ride_link('Join Ride (Disabled)', "javascript:alert('" . $should_be_enabled['reason'] . ".')");
      $buttons[] = nycc_rides2_nycc_ride_link('Join Ride (Disabled)', "#", check_plain($should_be_enabled['reason']));
    }
  }

  if ($is_approved && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Roster & Waiver Form', "/printpdf/nycc-riders-roster-pdf/$nid");
  }

  if (!$is_cancelled && ($is_submitted || $is_approved) && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Cancel Ride', "node/$nid/cancel");
  }
  
  if (!$is_approved && !$is_submitted && !$is_pending && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Resubmit Ride For Approval', "node/$nid/edit/resubmit");
  }
  
  if (!$is_pending && !$is_cancelled && !$is_approved && !$is_submitted && !$is_revised && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Submit Ride For Approval', "node/$nid/edit/resubmit");
  }
  
  if ($no_of_riders && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Email Participants', "mailto:". nycc_rides_get_all_rider_emails($ride) ."?subject=Ride: $title");
  }
  
  if ($no_of_riders && !$is_cancelled && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Ride Attendance', "node/$nid/attend");
  }
  
  if ($no_of_waiters && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Email Waitlist', "mailto:". nycc_rides_get_all_waitlist_emails($ride) ."?subject=$title");
  }
  
  if ($no_of_riders && $no_of_waiters && $can_modify) {
    $buttons[] = nycc_rides2_nycc_ride_link('Email Riders & Waitlist ', "mailto:". nycc_rides_get_all_rider_emails($ride) . "," . nycc_rides_get_all_waitlist_emails($ride) ."?subject=$title");
  }

  if ((arg(0) == 'node') && arg(1) && !arg(2) && $is_approved) {
    $buttons[] = nycc_rides2_nycc_ride_link('Re-list This Ride', "node/add/rides/relist/$nid");
  }

  return $buttons;
}

function nycc_rides2_theme($existing, $type, $theme, $path) {
  return array(

    'nycc_submit_ride_form' => array(
      'template' => 'nycc-submit-ride',
      'variables' => array(),
    ),
    
    'nycc_resubmit_ride_form' => array(
      'template' => 'nycc-resubmit-ride',
      'variables' => array('node'),
    ),

    'nycc_review_ride_form' => array(
      'template' => 'nycc-review-ride',
      'variables' => array('node'),
    ),

    'nycc_ride_coordinators_block' => array(   // this is just plain html, why bother? use a real block?
      'template' => 'nycc-coordinators',
      'variables' => array(),
    ),
    
    'nycc_ride_links' => array(
      'template' => 'nycc-rides-links',
      'variables' => array('links' => array()),
    ),
    
    // why default value not creating variable
    'nycc_ride_link' => array(
      'variables' => array('text', 'path', 'classes' => 'nycc-link nycc-ride-link'),
    ),
    
    'nycc_existing_rides' => array(
      'template' => 'nycc-existing_rides',
      'variables' => array('date'),
    ),
    
    'nycc_riders_roster' => array(
      'template' => 'nycc-riders-roster',
      'variables' => array('node', 'type'),   // type is html or pdf
    ),
    
    'nycc_ride_users' => array(
      'variables' => array('node' => null, 'type' => null),       // type is leaders, riders or waiters 
    ),

    // MORE? add user links?  nycc_user_link or nycc_user_profile_link?
    
  );
}

// why do we need these? for overrides?

function nycc_rides2_nycc_ride_users() {
  return theme('nycc_ride_users');
}

function nycc_rides2_nycc_ride_link($text, $path, $title = '', $classes='nycc-link nycc-ride-link') {
  return theme('nycc_ride_link', array('text' => $text, 'path' => $path, 'title' => $title, 'classes' => $classes));
}

function nycc_rides2_process_nycc_ride_link(&$variables) {
  //$variables['classes'] = 'nycc-link nycc-rides-link';
}

function nycc_rides2_process_nycc_ride_users(&$variables) {
  // case $variables['type'] to determine fieldname and path, or use array
  $type = $variables['type'];
  $ride = $variables['node'];
  
  
  $fields = array('leaders' => 'field_ride_current_leaders', 'riders' => 'field_ride_current_riders', 'waiters' => 'field_ride_waitlist', );
  $labels = array('leaders' => 'Leaders', 'riders' => 'Riders', 'waiters' => 'Waiters', );
  $paths = array('leaders' => 'my_rides', 'riders' => 'my_rides', 'waiters' => 'my_rides', );
  
  if (!array_key_exists($type, $fields))  // check for valid key
    $type = 'riders';
    
  $field_name = $fields['type'];
  $path = $paths['type'];
  $label = $labels['type'];
  
  $variables['ride_users'] = nycc_rides_output_list_of_users($ride, $field_name, $path);
  $variables['ride_users_title'] = $label;
}

// override in theme, adding bootstrap classes there?
function theme_nycc_ride_link($variables) {
  return l($variables['text'], $variables['path'], array('attributes' => array('title' => $variables['title'], 'class' => array($variables['classes'])))); 
}

function theme_nycc_ride_users($variables) {
  return theme_item_list(array('items' => $variables['ride_users'], 'title' => $variables['ride_users_title'], 'type' => 'ul'));  
} 

// todo: create a define for our various date formats (for datepicker here, for php elsewhere)
// todo: set additional date date format from ride timestamp field format
// TODO: move js to nycc_rides.js, add to module.info
// reference: https://api.jqueryui.com/datepicker/#option-onSelect
function _nycc_rides2_custom_form_uidatepicker($form, $form_state) {
  $jsdatefmt = 'M d yy';
  drupal_add_library('system', 'ui.datepicker');
  $js =<<< EOS
    (function ($) { 
      $('#edit-nycc-additional-dates.datepicker').datepicker({
        dateFormat: '$jsdatefmt',
        onSelect: function(selectDate, obj) {   var w = obj.lastVal; /*alert(w); var v = $(this).val(); alert(v);*/ w = w.length ? w + ", " + selectDate : selectDate;  $('#edit-nycc-additional-dates').val(w); },
        //showOn: 'both',
        //buttonImage: 'sites/all/modules/custom/custom_form/images/calendar.png',
        //buttonImageOnly: true,
      });
      $('.datepicker').datepicker( 'option', 'minDate', 'd' );
    })(jQuery);
EOS;
  $args = array('type' => 'inline', 'scope' => 'footer', 'weight' => 5);
  drupal_add_js($js, $args);

    return $form;
}