<?php

/*
TODO List:
1) Add My Events tab to Profile
*/

/*TODO LIST WHEN DEPLOYING TO PROD
 *1) add field to control 10-day waitlist (field_ride_open_signup_days)
 *2) INSTALL WYSIWYG Module
 *3) create new leaders field (field_ride_current_leaders) & run migrate script
 *3a) change rides content type ->old leader's field is not required
 *4) script to set 10-days signup limit
 *5) Add date time format (Day Mon d, hh:mm A)
 *
 */

function nycc_init() {
  variable_set("nycc_debug", TRUE);
}


function nycc_menu() {
  $items = array();

  $items['nycc'] = array(
    'title' => 'NYCC Home Page',
    'description' => 'NYCC Home Page',
    'page callback' => '_nycc_home',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['admin/config/nycc'] = array(
      'title' => 'NYCC  module settings',
      'description' => 'Settings for NYCC  Module',
      'page callback' => 'drupal_get_form',
      'file' => 'nycc.admin.inc', 
      'access arguments' => array('administer nycc'),
      'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
      'page arguments' => array('nycc_admin'),  
  );

  $items['user/%user_uid_optional/myevents'] = array(
    'page callback' => 'nycc_report_events',
    'type' => MENU_LOCAL_TASK,
    //'access callback' => TRUE,
    'access callback' => 'nycc_report_access',
    'file' => 'nycc.reports.inc',
    'title' => 'Events',
    'page arguments' => array(1),
  );

  return $items;
}

// simple home page callback
function _nycc_home() {
  return "";
}

//HOOK Functions
//function nycc_cron() {
//  //watchdog('cron', 'starting nycc_cron');
//
//
//  //watchdog('cron', 'finished nycc_cron');
//}
//
function nycc_node_view($node, $view_mode = NULL, $langcode = NULL) {
  if(nycc_should_redirect_to_membership_review() && (!user_access('administer nycc'))) {
    global $user;
    drupal_set_message(filter_xss("You must review and update your profile prior to continuing. <br/>Please review your information below, check the <strong>I Agree box</strong>, and click <strong>Save</strong>", array('br', 'b', 'strong', 'i')) );
    drupal_goto("user/" . $user->uid . "/edit/profile", array('query'=>drupal_get_destination()));
  }
} //nycc_node_view


function nycc_form_profile2_form_alter(&$form, &$form_state) {
  if (!isset($form_state['redirect'])) {
   $form_state['redirect'] = drupal_get_destination();
  }
  if(!nycc_has_valid_review_date()) {
    $form['profile_profile']['field_terms_of_use']['und']['#default_value'] = 0;
    $form['profile_profile']['field_review_last_date']['und'][0]['value']['#default_value'] = date('Y-m-d');
    $form['profile_profile']['field_waiver_last_date']['und'][0]['value']['#default_value'] = date('Y-m-d');
  }
}


//END HOOK Functions




//Access Related Functions
function nycc_report_node_access() {
  global $user;
  $acctid = arg(1);
  //dpm(get_defined_vars());
  if (($user->uid == $acctid)
        || in_array("administer", $user->roles)
        || in_array("board members", $user->roles)
        || user_access('administer users')
        || in_array("paid member", $user->roles) )
    return TRUE;
  return FALSE;
}


function nycc_permission() {
  return array(
    'administer nycc' => array(
          'title' => t('administer nycc'),
          'description' => t('administer nycc'),
        ));
}

//only works for node types
function nycc_access($op, $node, $account = NULL) {
    global $user;
    if (!$account)
      $account = $user;
      
    $ride = node_load($node);
    if (!is_object($ride))
      return FALSE;
}

//PROFILE RELATED FUNCTIONS
function nycc_has_required_profile_info($account = null) {
  if(!$account) {
    global $user;
  } else if(is_object($account)) {
    $user = $account;
  } else if( is_numeric($account)) {
    $user = user_load($account);
  }
  $cp = profile2_load_by_user($user->uid, "profile");
  if(is_object($cp))
    return nycc_field_has_value($cp->field_emergency_contact_no) && nycc_field_has_value($cp->field_contact_name);
  else
    return false;
}

function nycc_has_valid_review_date($account = null) {
  if(!$account) {
    global $user;
  } else if(is_object($account)) {
    $user = account;
  } else if( is_numeric($account)) {
    $user = user_load($account);
  }
  
  if (is_object($user) && $user->uid) {
    $cp = profile2_load_by_user($user->uid, "profile");
    if ($cp) {
      $wdate = nycc_field_get_text_value($cp->field_waiver_last_date);
      $rdate = nycc_field_get_text_value($cp->field_review_last_date);
      if (drupal_strlen($wdate))
        $wdiff = REQUEST_TIME - strtotime($wdate);
      if (drupal_strlen($rdate))
        $rdiff = REQUEST_TIME - strtotime($rdate);
      $oneyear = 365 * 24 * 60 * 60;
      if (drupal_strlen($wdate) && ($wdiff < $oneyear) && drupal_strlen($rdate) && ($rdiff < $oneyear))
        return true;
    }
  }
  return false;
}

function nycc_get_user_object($user_id = null) {
  if (!isset($user_id )) {
    global $user;
    return $user;
  } elseif (is_object($user_id)) {
    return $user_id;
  } elseif (is_numeric($user_id)) {
    return user_load($user_id);
  }
  return null;
}


function nycc_is_paid_member($user_id = null) {
  $user = nycc_get_user_object($user_id);

  if (isset($user) && (is_object($user))) {
    return in_array("paid member", $user->roles) == 1;
  }
  return false;
}

function nycc_should_redirect_to_membership_review($account=null) {
  if(!$account) {
    global $user;
  } else if(is_object($account)) {
    $user = account;
  } else if( is_numeric($account)) {
    $user = user_load($account);
  }
  if (!is_object($user) || !$user->uid || !in_array("paid member", $user->roles) || arg(0) == 'user')
    return false;
  if ( (arg(0) == 'node') && ( (arg(1) == '2') || (arg(1) == '27725') || (arg(1) == '45438') ) )
    return false;  // about, contact pages and waiver
  if ( (arg(0) == 'admin') || (arg(0) == 'nycc-review-membership') || (arg(1) == "logout") )
    return false;  // avoid infinite loop redirect and allow admin pages and sign out
  if ( nycc_has_required_profile_info() && nycc_has_valid_review_date() )
    return false;
  return true;
}

//END PROFILE FUNCTIONS




//GENERAL UTILITY FUNCTIONS

function nycc_refs2ids($refs) {
  //takes in array of arrays and returns just the value(generally used for UIDs returned as an array arrays)
  $ids = array();
  if (!is_array($refs))
    return $ids;

  foreach ($refs as $ref) {
    $id = array_values($ref);
    $ids[] = $id[0];
  }
  return $ids;
}

function nycc_noderefs2userrefs($nrefs) {
  //Returns UID from array of NIDs referring to the user's profile.
  $urefs = array();

  if (!is_array($nrefs))
    return $urefs;

  //remove the 'und' element
  if(isset($nrefs['und']))
    $nrefs = $nrefs['und'];

  foreach ($nrefs as $nref) {
    $cp = node_load($nref['nid']);
    if ($cp)
      $urefs[] = array('uid' => $cp->uid);
    else
      //TODO: Change to Watchdog
      drupal_set_message (check_plain("unable to load profile for NID: " . $nref['nid']));
  }
  //if (count($urefs) != count($nrefs))
  //  drupal_set_message ("Not all profiles were loaded");
  //else
  //  drupal_set_message ("All profiles were loaded");
  return $urefs;
}


function nycc_field_property_has_value($node, $field) {
  if(is_object($node) && property_exists($node, $field)) {
    return nycc_field_has_value($node->{$field});
  }
  elseif(is_array($node) && array_key_exists($field, $node )) {
    return nycc_field_has_value($node[$field]);
  }  
  return FALSE;
}

function nycc_field_get_property_value($node, $field) {
  if(is_object($node) && property_exists($node, $field)) {
    return nycc_field_get_value($node->{$field});
  }
  elseif(is_array($node) && array_key_exists($field, $node)) {
    return nycc_field_get_value($node[$field]);
  }
  return array(0=>array('value'=>''));
}


function nycc_field_get_property_text_value($node, $field) {
  if(is_object($node) && property_exists($node, $field)) {
    return nycc_field_get_text_value($node->{$field});
  }
  elseif(is_array($node) && array_key_exists($field, $node)) {
    return nycc_field_get_text_value($node[$field]);
  }
  return "";
}

function nycc_field_get_value($field) {
  /*
   *possible values are:
   *  null or  empty array (checked for by nycc_field_has_value) -> return  array with empty string in 'value'
   *  array inside of ['und'] -> return values under ['und']
   *  non-array value stored in either #value or #default_value -> return as array with value element
   */
  //dpm($field);
  if(nycc_field_has_value($field)) {
    if(is_object($field))
      return array(0=>array('value'=>$field));

    if(is_numeric($field) || is_string($field))
      return array(0=>array('value'=>$field));

    if(isset($field['und']))
      return $field['und'];

    if(isset($field['#value']))
      return array( 0=>array('value'=>$field['#value']));

    if(isset($field['#default_value']))
      return array( 0=>array('value'=>$field['#default_value']));

    return array(0=>array('value'=>''));

  } else {
    return array(0=>array('value'=>''));
  }
}

function nycc_is_admin() {
  global $user;
  return user_access('administer', $user);
}
function nycc_field_get_text_value($field) {
  /*
   *possible values are:
   *  null or  empty array (checked for by nycc_field_has_value) -> return empty string
   *  array inside of ['und'] -> return first value string  under ['und']
   *  non-array value stored in either #value or #default_value -> return string value
   */
  if(nycc_field_has_value($field) && (!is_object($field))) {
    if(is_string($field) || is_numeric($field))
      return $field;
      
    if(isset($field['und']) && (count($field['und']) ==1) && isset($field['und'][0]['value']))
      return $field['und'][0]['value'];

    if(isset($field['#value']))
      return $field['#value'];

    if(isset($field['#default_value']))
      return $field['#default_value'];

    return "";

  } else {
    return "";
  }
}

function nycc_field_has_value($field, $lang_code='und') {
  if (!$field)
    return FALSE;
  
  if (is_string($field) || is_numeric($field) || is_object($field))
    return TRUE;  

  if  ( isset($field['#value']) || isset($field['#default_value'])) //if value isn't localized then no 'und'
    return TRUE;  

  if (!isset($field[$lang_code]))
    return FALSE;

  if (!is_array($field[$lang_code]))
    return FALSE;

  if (empty($field[$lang_code]))
    return FALSE;
  
  if (empty($field[$lang_code][0]))
    return FALSE;  
  
  if (      empty($field[$lang_code][0]['value']) &&
            empty($field[$lang_code][0]['uid']) &&
            empty($field[$lang_code][0]['tid']) &&
            empty($field[$lang_code][0]['eid']) &&
            empty($field[$lang_code][0]['nid']) &&
            empty($field[$lang_code][0]['title']) &&
            empty($field[$lang_code][0]['url'])
            )
    return FALSE;  
    
  return true;
}


/*
 *compares a field value across 2 nodes (generally 2 revisions of the same node)
 *
 */

function nycc_compare_values($node1, $node2, $field_name) {
  if(!$node1  ||
     !is_object($node1) ||
     !$node2 ||
     !is_object($node2) ||
     !$field_name){
    return FALSE;
  }
  
  $value1 = nycc_field_get_property_value($node1, $field_name);
  
  if(is_array($value1) && (!array_values($value1) === $value1)) {
    foreach($value1 as $idx=>$val) {
      if(array_key_exists('safe_value', $val)) {
        unset($value1[$idx]['safe_value'] );
      }
    }    
  }

  $value2 = nycc_field_get_property_value($node2, $field_name);
  
  if(is_array($value2) && (!array_values($value2) === $value2)) {
    
    foreach($value2 as $idx=>$val) {
      if(array_key_exists('safe_value', $val)) {
        unset($value2[$idx]['safe_value'] );
      }
    }    
  }
  return $value1 === $value2;
}


//END GENERAL UTILITY FUNCTIONS

//RIDE USER RELATED FUNCTIONS

function nycc_user_is_in_list($node, $account = NULL, $field_name){
  if (is_numeric($node))
    $node = node_load($node);  
  
  global $user;
  if (!$account){
    $account = $user;
  }
    
  if(is_numeric($account)){
    $uid = $account;
  }
  else {
    $uid = $account->uid;
  }
    
  if ($node && nycc_field_has_value($node->{$field_name}) && is_numeric($uid)) {
//    dpm("field: $field_name. uid: $uid");
//    dpm(nycc_field_get_value($node->{$field_name}));
    foreach(nycc_field_get_value($node->{$field_name}) as $user_ref)
    {
      if ($user_ref['uid'] == $uid){
//        dpm("returning true");
        return true;
      }
    }
  }
//  dpm("returning false");
  return FALSE;    
}


function nycc_get_user_address($account = null, $respect_privacy = true) {
  global $user;
  if (!$account)
    $account = $user;

  $cp = nycc_get_user_profile($account);
  
  if(!$cp || !$account)
    return '';
    
  if(!$respect_privacy  || ($respect_privacy  && nycc_field_get_property_text_value($cp, 'field_publish_address_flag') == '1')) {
    return nycc_field_get_property_text_value($cp, 'field_address')
            . ', ' . nycc_field_get_property_text_value($cp, 'field_city')
            . ', ' . nycc_field_get_property_text_value($cp, 'field_state')
            . ', ' . nycc_field_get_property_text_value($cp, 'field_zip');
  }
  else
    return '';  
}

function nycc_get_user_phone($account = null, $respect_privacy = true) {
  global $user;
  if (!$account)
    $account = $user;

  $cp = nycc_get_user_profile($account);
  
  if(!$cp || !$account)
    return '';
    
  if(!$respect_privacy  || ($respect_privacy  && nycc_field_get_property_text_value($cp, 'field_publish_phone_flag') == '1')) {
    return nycc_field_get_property_text_value($cp, 'field_phone');
  }
  else
    return '';  
}

function nycc_get_user_email($account = null, $respect_privacy = true) {
  global $user;
  if (!$account)
    $account = $user;
  else if(is_numeric($account))
    $account = user_load($account);

  $cp = nycc_get_user_profile($account);
  if(!$cp || !$account)
    return '';
    
  if(!$respect_privacy  || ($respect_privacy  && nycc_field_get_property_text_value($cp, 'field_publish_email_flag') == '1')) {
    return $account->mail;
  }
  else
    return '';  
}


function nycc_format_phone_no($phoneNumber) {
    $phoneNumber = preg_replace('/[^0-9]/','',$phoneNumber);

    if(strlen($phoneNumber) > 10) {
        $countryCode = substr($phoneNumber, 0, strlen($phoneNumber)-10);
        $areaCode = substr($phoneNumber, -10, 3);
        $nextThree = substr($phoneNumber, -7, 3);
        $lastFour = substr($phoneNumber, -4, 4);

        $phoneNumber = '+'.$countryCode.' ('.$areaCode.') '.$nextThree.'-'.$lastFour;
    }
    else if(strlen($phoneNumber) == 10) {
        $areaCode = substr($phoneNumber, 0, 3);
        $nextThree = substr($phoneNumber, 3, 3);
        $lastFour = substr($phoneNumber, 6, 4);

        $phoneNumber = '('.$areaCode.') '.$nextThree.'-'.$lastFour;
    }
    else if(strlen($phoneNumber) == 7) {
        $nextThree = substr($phoneNumber, 0, 3);
        $lastFour = substr($phoneNumber, 3, 4);

        $phoneNumber = $nextThree.'-'.$lastFour;
    }

    return $phoneNumber;
}

function nycc_get_user_profile($account = NULL) {
  global $user;
  if (!$account){
    $account = $user;
    $uid = $account->uid;
  } else if (is_object($account)) {
    $uid = $account->uid;
  } else if (is_numeric($account)) {
    $account = user_load($account);
    $uid = $account->uid;
  }
  
  if(!$uid)
    return null;

  return profile2_load_by_user($uid, "profile");  
}

function nycc_get_user_full_name_multiple($accounts = array()) {
  $names = array();
  if(empty($accounts))
    return $names;
    
  foreach($accounts as $account) {
    if (is_object($account)) {
      $uid = $account->uid;
    } else if (is_numeric($account)) {
      $account = user_load($account);
      $uid = $account->uid;
    }
    
    if(!$uid)
      continue;
    
    if(function_exists('realname_load'))
      $names[$uid] = realname_load($account);
      
  
    $cp = profile2_load_by_user($uid, "profile");
    if($cp) {
       $names[$uid] = $cp->field_first_name['und'][0]['value'] . " " . $cp->field_last_name['und'][0]['value'];
    } else {
      //TODO: Add Watchdog.
      drupal_set_message(check_plain("nycc_get_user_full_name: Could not load profile for user: $uid"), "error");
    }
    continue;
  }
  return $names;
}

function nycc_get_user_full_name($account = NULL) {
  $names = nycc_get_user_full_name_multiple(array($account));
  return reset($names);
  //global $user;
  //if (!$account){
  //  $account = $user;
  //  $uid = $account->uid;
  //} else if (is_object($account)) {
  //  $uid = $account->uid;
  //} else if (is_numeric($account)) {
  //  $account = user_load($account);
  //  $uid = $account->uid;
  //}
  //
  //if(!$uid)
  //  return "";
  //
  //if(function_exists('realname_load'))
  //  return realname_load($account);
  //  
  //
  //$cp = profile2_load_by_user($uid, "profile");
  //if($cp) {
  //  return $cp->field_first_name['und'][0]['value'] . " " . $cp->field_last_name['und'][0]['value'];
  //} else {
  //  //TODO: Add Watchdog.
  //  drupal_set_message(check_plain("nycc_get_user_full_name: Could not load profile for user: $uid"), "error");
  //}
  //return "";
}

function nycc_get_nid_from_uid($account = NULL) {
  global $user;
  if (!$account){
    $account = $user;
      
    $uid = $account->uid;
  } else if (is_object($account)) {
    $uid = $account->uid;
  } else {
    $uid = $account;
  }

  $cp = profile2_load_by_user($uid, "profile");
  if($cp) {
    return $cp->pid;
  } else {
    //TODO: Add Watchdog.
    drupal_set_message(check_plain("nycc_get_nid_from_uid: Could not load profile for user: $uid"), "error");
  }
  return "";
}

class NyccException extends Exception
{
  private $goto_path;
  private $goto_querystring;

  public function __construct($message, $code = 0, Exception $previous = null, $goto_path = '', $goto_qs = array()) {
    parent::__construct($message, $code, $previous);
    $this->goto_path = $goto_path;
    $this->goto_querystring = $goto_qs;
  }
  
  public static function with_goto($message, $goto_path = '', $goto_qs = array(), Exception $previous = null ) {
    $instance = new self($message, 0, $previous);
    $instance->goto_path = $goto_path;
    $instance->goto_querystring = $goto_qs;
    return $instance;
  }  
  
  public function getGotoPath() {
    return $this->goto_path ;
  }
  public function getGotoQeuryString() {
    return $this->goto_querystring ;
  }  
    //
    //// custom string representation of object
    //public function __toString() {
    //    return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    //}
}


