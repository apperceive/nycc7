<?php
function nycc_mandrill_menu() {
  $items = array();

    $items['admin/config/nycc/nycc_mandrill'] = array(
      'title' => 'NYCC Mandrill Integration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('nycc_mandrill_admin'),
      'access arguments' => array('administer nycc_mandrill'),
      'description' => 'configure nycc Mandrill Integration',
      'file' => 'nycc_mandrill.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    );
  return $items;
}

function nycc_mandrill_permission() {
  return array(
    'administer nycc mandrill' => array(
      'title' => t('administer nycc mandrill'),
      'description' => t('administer nycc mandrill'),
        ), 
    );
}

function nycc_mandrill_email_alter(&$args) {
  // Cleanup message bellow. 

  // Delete signature.
  $text = explode('--', $args['text']['value']);
  $text = $text[0];

  // Delete quotes.
  $args['text']['value'] = preg_replace("/(?<=^|\n)>.*\r?\n|\r?\n>.*/", '', $text);
}


function nycc_mandrill_get_recipients($msg = NULL) {
  //takes to & CC list and combines them into a single array of email recipient email addresses. 
  //This is used to ensure recipients already getting the message because they're on the to or CC list are not added to the email again
  $recipients = array();
  if (isset($msg)) {
    if (!empty($msg->to)) {
      foreach ($msg->to as $to) {
        $recipients[] = strtolower($to[0]);
      }
    }
    if (!empty($msg->cc)) {
      foreach ($msg->cc as $cc) {
        $recipients[] = strtolower($cc[0]);
      }
    }
  } 
  return $recipients;
}




function nycc_mandrill_get_msg_details($event) {
  //Parses the event for relevant fields
  if (isset($event)) {
    return array(
      'from_email' => $event->msg->from_email ?: '',
      'from_name' => $event->msg->from_name ?: '',
      'to_mail' => $event->msg->email ?: '',
      'to_cc_list' => nycc_mandrill_get_recipients($event->msg) ?: '',      
      'subject' => $event->msg->subject ?: '',
      'html' => $event->msg->html ?: '',
      'text' => array('value' => $event->msg->text ?: '', ),      
      'raw_msg' => array('value' => $event->msg->raw_msg ?: '', ),
      'attachments' => $event->msg->attachments ?: '',
    );
  } else {
    watchdog('nycc_mandrill', "nycc_mandrill_get_msg_details received a null event", array(),  WATCHDOG_WARNING) ;  
  }
}

//WAS _nycc_rides_parse_email
function nycc_mandrill_parse_email($email = '') {
  $mail = explode('@', $email);
  return $mail[0] ?: '' ;
}

//nycc_mandrill_isValid_signature
//WAS _nycc_rides_isValid_signature
function nycc_mandrill_signature_is_valid($url_suffix='') {
  global $_POST ;
  if (!empty($url_suffix) && !empty($_POST)) {
    $url = url($url_suffix, array('absolute' => TRUE));  
    try {
      foreach (mandrill_get_api_object()->webhooks->getList() as $list) {
        if (($url == $list['url']) 
          && (nycc_mandrill_generate_signature($url, $list['auth_key'], $_POST) == $_SERVER['HTTP_X_MANDRILL_SIGNATURE'])) {
          return TRUE;
        }
      }
    } catch (Mandrill_Exception $e) {
      watchdog('nycc_mandrill', "nycc_mandrill_signature_is_valid generated exception: " . $e->getMessage(),
               array('url' => $url, '_POST' => $_POST),  WATCHDOG_WARNING) ;  
      return FALSE;
    }
  }
  else {
    watchdog('nycc_mandrill', "nycc_mandrill_signature_is_valid. recieved invalid parameters " ,
             array('url' => $url_suffix, '_POST' => $_POST),  WATCHDOG_WARNING) ;  
    return FALSE;
  }
}

// WAS _nycc_rides_generate_signature
function nycc_mandrill_generate_signature($url, $webhook_key, $params) {
/**
 * Generates a base64-encoded signature for a Mandrill webhook request.
 * Verbatim from http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests
 *
 * @param string $url the webhook url
 * @param string $webhook_key the webhook's authentication key
 * @param array $params the request's POST parameters
 *
 * @return string
 */
  $signed_data = $url;
    ksort($params);
    foreach ($params as $key => $value) {
      $signed_data .= $key;
      $signed_data .= $value;
    }
    return base64_encode(hash_hmac('sha1', $signed_data, $webhook_key, TRUE));
}


function nycc_mandrill_send_msg($to, $from, $subject, $body) {
  nycc_mandrill_send_email(array($to), $from, $from, $from, $subject, $body);
}
function nycc_mandrill_send_email($to, $from_addr, $from_name='', $reply_to='', $subject, $body, $attachments=array(), $tracking_domain='', $signing_domain='') {
  //used to send an email directly using Mandrill API
  if (count($to)) {
    try {
      $mandrill = mandrill_get_api_object();
      $message = array(
        'html' => '<p>' . $body . '</p>', 
        'subject' => $subject,
        'from_email' => $from_addr,
        'from_name' => $from_name,
        'to' => $to,
        'headers' => array('Reply-To' => $reply_to),
        'track_opens' => TRUE,
        'track_clicks' => TRUE,
        'auto_text' => TRUE,
        'auto_html' => TRUE,
        'url_strip_qs' => TRUE,
        'preserve_recipients' => TRUE,
        'view_content_link' => TRUE,
        'tracking_domain' => $tracking_domain,
        'signing_domain' =>  $signing_domain,
        'attachments' => $attachments     
      );
      //watchdog('nycc_mandrill', 'nycc_mandrill_send_mandrill_email Message:<pre>' . print_r( $message, TRUE) . '</pre>');
  
      $result = $mandrill->messages_send($message);
      watchdog('nycc_og_email', 'nycc_og_email_send_mandrill_email Result:<pre>' . print_r( $result, TRUE) . '</pre>');
  
    } catch (Mandrill_Error $e) {
        watchdog('nycc_og_email', "nycc_og_email_send_mandrill_email: Error: @class - @msg", 
            array('@class' => get_class($e), '@msg' => $e->getMessage()), WATCHDOG_WARNING) ;
      throw $e;
    }     
  }
  else {
    //if no values are in $to
        watchdog('nycc_og_email', "nycc_og_email_send_mandrill_email: Error: no to addresses specified", 
            array(), WATCHDOG_WARNING) ;    
  }

}




