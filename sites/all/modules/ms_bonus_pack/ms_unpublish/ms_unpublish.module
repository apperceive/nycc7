<?php

/**
 * @file
 * MoneyScripts Pay to Unpublish
 * Sell access to individual nodes
 * Future - Add per content type plans
 */

/**
 * Implementation of hook_perm().
 */
function ms_unpublish_perm() {
  return array(
    'pay to unpublish',
    );
}

/**
 * Implementation of hook_menu
 */
function ms_unpublish_menu() {
  $items = array();
  $items['ms_unpublish/purchase/%'] = array(
    'title' => 'Purchase Content',
    'page callback' => 'ms_unpublish_add_to_cart',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneyscripts/ms_unpublish'] = array(
    'title' => 'Pay to Unpublish Settings',
    'description' => 'Set the various Pay to Unpublish Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_unpublish_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

// ======================================
// Administration Page:
// ======================================

/**
 * Admin Settings Form
 */
function ms_unpublish_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t('You can set the price to unpublish nodes on a !content or Individual Node basis.
      You can also edit the email template and other things in the !rules area.',
      array('!content' => l(t('Content-Type'), 'admin/content/types'), '!rules' => l(t('Triggered Rules'), 'admin/rules/trigger'))),
  );
  $form['main']['ms_unpublish_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Unpublish Link Text'),
    '#default_value' => variable_get('ms_unpublish_link_text', t('Pay [paymentAmount] to Unpublish')),
    '#description' => t('Enter the text that will be used for the Unpublish link. You may use the [paymentAmount] token.'),
    '#required' => TRUE,
  );
  $form['main']['ms_unpublish_thankyou_page'] = array(
    '#type' => 'textfield',
    '#title' => t('Thank You Page'),
    '#default_value' => variable_get('ms_unpublish_thankyou_page', ''),
    '#description' => t('Enter the path to a custom thank you page. Leave blank to use the default page.'),
    '#required' => TRUE,
  );



  return system_settings_form($form);
}//function admin settings

// ======================================
// FUNCTIONS
// ======================================

/**
 * Helper Function to load a price for a node
 */
function ms_unpublish_load_node_info($vid) {
  return db_fetch_object(db_query("SELECT * FROM {ms_unpublish_price} WHERE vid = %d", $vid));
}

/**
 * Helper Function to insert a price for a node
 */
function ms_unpublish_insert_node_price($vid, $nid, $price) {
  db_query("DELETE FROM {ms_unpublish_price} WHERE vid = %d", $vid);

  if ($price != '') {
    db_query("INSERT INTO {ms_unpublish_price} (vid, nid, price) VALUES (%d, %d, '%s')",
      $vid, $nid, $price);
  }
}

/**
 * Helper Function to get an add to cart button
 */
function ms_unpublish_get_add_to_cart_link($nid) {
  return l(t('Add to Cart'), ms_unpublish_get_add_to_cart_url($nid));
}

/**
 * Helper Function to get an add to cart button
 */
function ms_unpublish_get_add_to_cart_url($nid, $redirect = TRUE) {
  return url('ms_unpublish/purchase/'. $nid, array('absolute' => TRUE, 'query' => ($redirect) ? drupal_get_destination() : ''));
}

/**
 * Implementation of hook_nodeapi
 */
function ms_unpublish_nodeapi(&$node, $op, $a3, $a4) {
  switch ($op) {
    case 'load':
      $node_info = ms_unpublish_load_node_info($node->vid);
      if (isset($node_info->price)) {
        $node->ms_unpublish_price = $node_info->price;
      }
      elseif ($price = variable_get('ms_unpublish_price_'. $node->type, '')) {
        $node->ms_unpublish_price = $price;
      }
    break;

    case 'delete':
      db_query("DELETE FROM {ms_unpublish_price} WHERE vid = %d", $node->vid);
    break;

    case 'insert':
    case 'update':
      ms_unpublish_insert_node_price($node->vid, $node->nid, $node->ms_unpublish_price);
    break;
  }
}

function ms_unpublish_link($type, $object, $teaser = FALSE) {
  $links = array();
  if (user_access('pay to unpublish')) {
    if ($type == 'node' AND $object->ms_unpublish_price != '') {
      if ($object->ms_unpublish_price > 0) {
        $vars = (object) array('amount' => $object->ms_unpublish_price);
        $title = token_replace(variable_get('ms_unpublish_link_text', t('Pay [paymentAmount] to Unpublish')), 'ms_core_payment', $vars);

        $links['ms_unpublish_link'] = array(
          'title' => $title,
          'href' => 'ms_unpublish/purchase/'. $object->nid,
          'query' => drupal_get_destination(),
          'html' => TRUE,
        );
      }
    }
  }

  return $links;
}

/**
 * Implementation of hook_form_alter
 */
function ms_unpublish_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    $form['ms_unpublish'] = array(
      '#type' => 'fieldset',
      '#title' => t('Pay to Unpublish'),
      '#collapsible' => TRUE,
      '#collapsed' => ($form['#node']->ms_unpublish_price) ? FALSE : TRUE,
    );
    if ($price = variable_get('ms_unpublish_price_'. $form['#node']->type, '')) {
      $form['ms_unpublish']['#description'] = t('Currently using the content-type setting of %price. To override this for this node, fill in the amount here.',
        array('%price' => $price));
    }
    $form['ms_unpublish']['ms_unpublish_price'] = array(
      '#type' => 'textfield',
      '#title' => t('Unpublish Price'),
      '#description' => t('Enter a price which users can pay to unpublish this node. Enter 0 to disable the ability to pay to unpublish this node.'),
      '#default_value' => $form['#node']->ms_unpublish_price,
    );
  }

  if ($form_id == 'node_type_form') {//Add the stuff to the content type settings
    $form['ms_unpublish'] = array(
      '#type' => 'fieldset',
      '#title' => t('Pay to Unpublish Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => (variable_get('ms_unpublish_price_'. $form['#node_type']->type, '')) ? FALSE : TRUE,
    );

    $form['ms_unpublish']['ms_unpublish_price'] = array(
      '#type' => 'textfield',
      '#title' => t('Unpublish Price'),
      '#description' => t('Enter a price which users can pay to unpublish this node. Leave blank to disable the ability to pay to unpublish this node.'),
      '#default_value' => variable_get('ms_unpublish_price_'. $form['#node_type']->type, ''),
    );
  }
}

// ======================================
// PAGES
// ======================================

function ms_unpublish_add_to_cart($nid, $uid = NULL) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }

  // Load the account
  $account = user_load(array('uid' => $uid));

  // Load the node
  $node = node_load($nid);

  $price = 0;

  if ($node->ms_unpublish_price != '') {
    if ($node->ms_unpublish_price > 0) {
      $price = $node->ms_unpublish_price;
    }
  }

  if (user_access('pay to unpublish', $account) AND $node->nid AND $price) {
    // Create a new product and add it to the order
    $product = ms_core_new_product(t('Unpublish !title', array('!title' => $node->title)), 'ms_unpublish', $node->nid, $price, 'cart');

    // Store the custom data
    $product->data = array(
      'nid' => $node->nid,
    );

    // Add the thankyou page
    if (variable_get('ms_unpublish_thankyou_page', '')) {
      $product->data['override_settings']['ms_core']['override'] = TRUE;
      $product->data['override_settings']['ms_core']['settings']['main']['ms_core_thankyou_path'] = variable_get('ms_unpublish_thankyou_page', '');
    }

    ms_core_add_cart_product($product, TRUE);

    drupal_goto('ms/cart');
  }
  else {
    return t('There was an error');
  }
}

// ======================================
// hook_ms_order_payment
// ======================================

/**
 * Implementation of hook_ms_order_payment
 */
function ms_unpublish_ms_order_payment($type, $product, $order, $payment) {
  if ($product->module == 'ms_unpublish') {
    // Load the user account
    $account = user_load(array('uid' => $order->uid));

    $node = node_load($product->data['nid']);

    if (module_exists('rules')) {
      rules_invoke_event('ms_unpublish_event_pay_unpublish', $account, $node, $order, $payment);
    }

    drupal_set_message(t('The content %title has been unpublished. Thank you.', array('%title' => $node->title)));
  }
}
