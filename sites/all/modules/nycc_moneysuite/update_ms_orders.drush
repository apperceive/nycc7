<?php
 $debug = true;
    // Populate the order_key of existing orders
    // Populate the first_name and last_name and email_address of existing orders

    $result = db_query("SELECT oid FROM {ms_orders}");
    if ($debug) drush_print("ms_core update 7102: " . $result->rowCount() . " orders retrieved");
    $update_count = 0;
    foreach ($result as $row) {
      
      $last_name = '';
      $email = '';

      $name = explode(' ', $row->full_name);
      $first_name = $name[0];
      unset($name[0]);

      if (is_array($name)) {
        $last_name = implode(' ', $name);
      }

      if ($row->uid) {
        $account = user_load($row->uid);
        $email = $account->mail;
      }
      
      $key = ms_core_generate_order_key();
      db_update('ms_orders')
        ->fields(array('order_key' => $key,'first_name' => $first_name, 'last_name' => $last_name,'email_address' => $email,))
        ->condition('oid', $row->oid)
        ->execute();
      
      $update_count++;
    }
    if ($debug) drush_print("Updated order key & name for $update_count orders" );
 
  drush_print("running ms_core update 7309");
  
  if (function_exists('token_update_token_text')) {
    $replacements = array(
      'userName' => 'user:name',
    );
    $variables = array();
    $messages = array();

    $settings_functions = module_invoke_all('ms_core_overrides');

    if (is_array($settings_functions) && !empty($settings_functions)) {
      foreach ($settings_functions as $module => $info) {
        if (function_exists($module . '_token_info')) {
          $tokens_info = call_user_func($module . '_token_info');

          foreach ($tokens_info['tokens'] as $type => $tokens) {
            foreach ($tokens as $token_key => $token_info) {
              $replacements[$token_key] = $type . ':' . $token_key;
            }
          }
        }

        $t_form_state = form_state_defaults();
        if (!empty($info['params'])) {
          $t_form_state['build_info']['args'] = $info['params'];
        }
        $module_form = drupal_retrieve_form($info['form'], $t_form_state);

        $settings = array();
        _ms_core_extract_token_variables($module_form, $settings);

        if (!empty($settings)) {
          foreach ($settings as $key => $element) {
            $variables[] = $key;
          }
        }
      }
    }

    $variables_count = 0;

    foreach ($variables as $variable) {
      if ($string = variable_get($variable, '')) {
        $new_string = token_update_token_text($string, $replacements);
        if ($new_string != $string) {
          variable_set($variable, $new_string);
          $variables_count += 1;
        }
      }
    }

    $messages[] = t('Updated tokens in @count variables.', array('@count' => $variables_count));

    // Now we need to update all of the overridden settings in the orders.
    $result = db_select('ms_orders', 'o')->fields('o')->execute();

    $orders_count = 0;
    foreach ($result as $order) {
      $order->data = unserialize($order->data);
      $changed = FALSE;
      if (!empty($order->data['override_settings'])) {
        foreach ($order->data['override_settings'] as $key => &$string) {
          if (in_array($key, $variables)) {
            $new_string = token_update_token_text($string, $replacements);
            if ($new_string != $string) {
              $string = $new_string;
              $changed = TRUE;
            }
          }
        }
      }

      if ($changed) {
        db_update('ms_orders')->fields(array('data' => $order->data,))->condition('oid', $order->oid)->execute();
        $orders_count += 1;
      }
    }

    drush_print(t('Updated tokens in override settings of @count orders.', array('@count' => $orders_count)));
  } else {
    
  }
  
  
/**
 * Recursively extracts the textarea form elements.
 */
function _ms_core_extract_token_variables($parent, &$settings) {
  foreach (element_children($parent) as $child_name) {
    if (!empty($parent[$child_name]['#type']) && $parent[$child_name]['#type'] == 'textarea') {
      $settings[$child_name] = $parent[$child_name];
    }
    _ms_core_extract_token_variables($parent[$child_name], $settings);
  }
}




function _token_upgrade_token_list() {
  $tokens = array(
    // Global tokens
    'user-name' => 'current-user:name',
    'user-id' => 'current-user:id',
    'user-mail' => 'current-user:mail',
    'site-url' => 'site:url',
    'site-name' => 'site:name',
    'site-slogan' => 'site:slogan',
    'site-mission' => 'site:mission',
    'site-mail' => 'site:mail',
    'site-date' => 'date:short',
    //'site-date-' => '', // Date tokens expanded below
    'current-page-path' => 'current-page:path',
    'current-page-url' => 'current-page:url',
    'page-number' => 'current-page:page-number',

    // Comment tokens
    'comment-cid' => 'comment:cid',
    'comment-nid' => 'comment:node:nid',
    'comment-title' => 'comment:title',
    'comment-body' => 'comment:body',
    'comment-author-name' => 'comment:author:name',
    'comment-author-mail' => 'comment:author:mail',
    //'comment-body-format' => '',
    //'comment-' => '', // Date tokens expanded below
    'comment-node-title' => 'comment:node',

    // Node tokens
    'nid' => 'node:nid',
    'type' => 'node:type',
    'type-name' => 'node:type-name',
    'language' => 'node:language',
    'title' => 'node:title',
    'author-uid' => 'node:author:uid',
    'author-name' => 'node:author:name',
    'author-mail' => 'node:author:mail',
    'node_comment_count' => 'node:comment-count',
    'unread_comment_count' => 'node:comment-count-new',
    'log' => 'node:log',
    //'' => '', // Date tokens expanded below
    //'mod-' => '', // Date tokens expanded below
    'menupath' => 'node:menu-link:parent:path][node:menu-link',
    'menu' => 'node:menu-link:menu-name',
    'menu-link-title' => 'node:menu-link',
    'menu-link-mlid' => 'node:menu-link:mlid',
    'menu-link-plid' => 'node:menu-link:parent:mlid',
    //'term' => 'node:term',
    //'term-id' => 'node:term:tid',
    //'vocab' => 'node:term:vocabulary',
    //'vocab-id' => 'node:term:vocabulary:vid',

    // Book tokens
    //'book' => 'node:book',
    //'book_id' => 'node:book:bid',
    //'bookpath' => 'node:book:path',

    // Taxonomy tokens
    'tid' => 'term:tid',
    'cat' => 'term:name',
    'cat-description' => 'term:description',
    'vid' => 'term:vocabulary:vid',
    'vocab' => 'term:vocabulary',
    'vocab-description' => 'term:vocabulary:description',

    // User tokens
    'user' => 'user:name',
    'uid' => 'user:uid',
    'mail' => 'user:mail',
    'reg-date' => 'user:created',
    'reg-since' => 'user:created:since',
    //'user-created' => '', // Date tokens expanded below
    'log-date' => 'user:last-login',
    'log-since' => 'user:last-login:since',
    //'user-last-login' => '', // Date tokens expanded below
    //'date-in-tz' => '',
    'account-url' => 'user:url',
    'account-edit' => 'user:edit-url',
  );

  // Account for date tokens which need to be expanded.
  $tokens += _token_upgrade_token_date_list('site-', 'site:date');
  $tokens += _token_upgrade_token_date_list('', 'node:created');
  $tokens += _token_upgrade_token_date_list('mod-', 'node:changed');
  //$tokens += _token_upgrade_token_date_list('node-revision-', 'node:changed');
  $tokens += _token_upgrade_token_date_list('comment-', 'comment:created');
  $tokens += _token_upgrade_token_date_list('user-register-', 'user:created');
  $tokens += _token_upgrade_token_date_list('user-last-login-', 'user:last-login');

  return $tokens;
}


function _token_upgrade_token_date_list($old_token, $new_token) {
  $tokens = array();
  $formats = array(
    'yyyy' => 'Y',
    'yy' => 'y',
    'month' => 'F',
    'mon' => 'M',
    'mm' => 'm',
    'm' => 'n',
    'ww' => 'W',
    'date' => 'N',
    'day' => 'l',
    'ddd' => 'D',
    'dd' => 'd',
    'd' => 'j',
  );
  foreach ($formats as $token_format => $date_format) {
    $tokens[$old_token . $token_format] = "$new_token:custom:$date_format";
  }
  $tokens[$old_token . 'raw'] = "$new_token:raw";
  $tokens[$old_token . 'since'] = "$new_token:since";
  return $tokens;
}


function token_update_token_text($text, $updates = array(), $leading = '[', $trailing = ']') {
  $updates += _token_upgrade_token_list();
  $regex = '/' . preg_quote($leading, '/') . '([^\s]*)' . preg_quote($trailing, '/') . '/';
  preg_match_all($regex, $text, $matches);

  foreach ($matches[1] as $index => $old_token) {
    if (isset($updates[$old_token])) {
      $new_token = $updates[$old_token];
      $text = str_replace("{$leading}{$old_token}{$trailing}", "[$new_token]", $text);
      // Also replace any tokens that have a -raw suffix.
      $text = str_replace("{$leading}{$old_token}-raw{$trailing}", "[$new_token]", $text);
    }
  }

  return $text;
}
?>

  