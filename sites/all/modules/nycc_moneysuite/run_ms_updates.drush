<?php

/* TODO:
 * ms_membership_update_dependencies
 *
 */
 
 
$errors = array(); 
// ======================================
// Updates FROM MS_CORE
// ======================================

/**
 * Add the order_key field to the ms_orders database
 */
  drush_print("running ms_core update 7102");

    // Populate the order_key of existing orders
    $result = db_query("SELECT oid FROM {ms_orders}");
    foreach ($result as $row) {
      $key = ms_core_generate_order_key();
      db_update('ms_orders')
        ->fields(array(
          'order_key' => $key,
        ))
        ->condition('oid', $row->oid)
        ->execute();
    }
  
  drush_print( t('Successfully added the order_key column to the ms_orders database table.'));



/**
 * Add the first_name, last_name, and email_address fields to the database
 */
drush_print("running ms_core update 7103");
    // Populate the first_name and last_name and email_address of existing orders
    $result = db_query("SELECT * FROM {ms_orders}");
    foreach ($result as $row) {
      $last_name = '';
      $email = '';

      $name = explode(' ', $row->full_name);
      $first_name = $name[0];
      unset($name[0]);

      if (is_array($name)) {
        $last_name = implode(' ', $name);
      }

      if ($row->uid) {
        $account = user_load($row->uid);
        $email = $account->mail;
      }

      db_update('ms_orders')
        ->fields(array(
          'first_name' => $first_name,
          'last_name' => $last_name,
          'email_address' => $email,
        ))
        ->condition('oid', $row->oid)
        ->execute();
    }
  }

  drush_print( t('Successfully added the first_name, last_name, and email_address columns to the ms_orders database table.'));




/**
 * Add the notified field to the ms_recurring_schedules table
 */
  drush_print("running ms_core update 7105"); 

    db_update('ms_recurring_schedules')
      ->fields(array(
        'notified' => 1,
      ))
      ->execute();
  }

  drush_print( t('Successfully added the notified field to the ms_recurring_schedules database table.'));




/**
 * Create the new tables for countries and regions.
 */
drush_print("running ms_core update 7302");
  $schema['ms_core_countries'] = array(
    'description' => 'Used to hold countries',
    'fields' => array(
      'iso' => array(
        'type' => 'char',
        'description' => 'The ISO code for the country',
        'not null' => TRUE,
        'length' => '2',
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The name of the country',
        'length' => '80',
      ),
      'numcode' => array(
        'type' => 'int',
        'description' => 'The Number Code for the Country',
        'disp_width' => '11',
      ),
      'currency' => array(
        'type' => 'varchar',
        'description' => 'The currency of the country',
        'length' => '3',
      ),
    ),
    'primary key' => array('iso'),
  );
  $schema['ms_core_regions'] = array(
    'description' => 'Used to hold regions',
    'fields' => array(
      'code' => array(
        'type' => 'char',
        'description' => 'The code for the region',
        'length' => '2',
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The name of the region',
        'length' => '80',
      ),
      'numcode' => array(
        'type' => 'int',
        'description' => 'The Number Code for the Country',
        'disp_width' => '11',
      ),
    ),
  );

  // First, drop the old table.
  db_drop_table('ms_core_countries');

  // Then create the new tables.
  if (!db_table_exists('ms_core_countries')) {
    db_create_table('ms_core_countries', $schema['ms_core_countries']);
  }
  if (!db_table_exists('ms_core_regions')) {
    db_create_table('ms_core_regions', $schema['ms_core_regions']);
  }


/**
 * Import the countries and regions.
 */
drush_print("running ms_core update 7303");
  db_truncate('ms_core_countries')->execute();
  db_truncate('ms_core_regions')->execute();

  // Now import the data.
  module_load_include('inc', 'ms_core', 'ms_core.countries');
  $countries = _ms_core_get_countries_data();

  foreach ($countries as $raw_values) {
    $map = array('name', 'iso', 'numcode', 'currency');
    $country = array_combine($map, $raw_values);
    db_insert('ms_core_countries')
      ->fields($country)
      ->execute();
  }

  module_load_include('inc', 'ms_core', 'ms_core.regions');
  $regions = _ms_core_get_regions_data();

  foreach ($regions as $raw_values) {
    $map = array('name', 'code', 'numcode');
    $region = array_combine($map, $raw_values);
    db_insert('ms_core_regions')
      ->fields($region)
      ->execute();
  }


/**
 * Update payment types.
 */
	drush_print("running ms_core update 7304");


  db_update('ms_payments')
    ->fields(array(
      'type' => 'refund',
    ))
    ->condition('type', 'rec_refund')
    ->execute();
  db_update('ms_payments')
    ->fields(array(
      'type' => 'failed',
    ))
    ->condition('type', 'rec_failed')
    ->execute();
  db_update('ms_payments')
    ->fields(array(
      'type' => 'reversal',
    ))
    ->condition('type', 'rec_reversal')
    ->execute();




/**
 * Remove duplicate recurring_schedule records.
 *
 * Due to a bug in the new multi_recurring feature, there is a chance there could be duplicate recurring_schedule
 * records for recurring orders. We remove any duplicates here.
 */
drush_print("running ms_core update 7307");
  $result = db_query("SELECT * FROM {ms_recurring_schedules} a
INNER JOIN (SELECT oid FROM {ms_recurring_schedules}
GROUP BY oid HAVING count(id) > 1) dup ON a.oid = dup.oid WHERE a.status = :status", array(':status' => 'active'));

  $all = array();
  foreach ($result as $row) {
    $all[$row->oid][$row->id] = $row;
  }
  foreach ($all as $records) {
    array_pop($records);
    foreach ($records as $row) {
      db_update('ms_recurring_schedules')
        ->fields(array(
          'status' => 'inactive',
        ))
        ->condition('id', $row->id)
        ->execute();
    }
  }







// ======================================
// Updates FROM MS_PRODUCTS:
// ======================================


  // Set the default for all of the product plans for allow_roles and deny_roles and machine_name
  $result = db_query("SELECT * FROM {ms_products_plans}");
  foreach ($result as $plan) {
    $plan->allow_roles = array();
    $plan->deny_roles = array();
    db_update('ms_products_plans')
      ->fields(array(
        'allow_roles' => serialize($plan->allow_roles),
        'deny_roles' => serialize($plan->deny_roles),
      ))
      ->condition('pid', $plan->pid)
      ->execute();
  }
  drush_print( t('Successfully added the new fields to the ms_products_plans database table.'));


/**
 * Make sure the arrays are serialized correctly.
 */
	drush_print("running ms_products update 7302");
  $result = db_query("SELECT * FROM {ms_products_plans}");
  foreach ($result as $plan) {
    $plan->allow_roles = _ms_products_unserialize($plan->allow_roles);
    $plan->deny_roles = _ms_products_unserialize($plan->deny_roles);
    $plan->modify_options = _ms_products_unserialize($plan->modify_options);
    $plan->recurring_schedule = _ms_products_unserialize($plan->recurring_schedule);
    $plan->data = _ms_products_unserialize($plan->data);
    db_update('ms_products_plans')
      ->fields(array(
        'allow_roles' => serialize($plan->allow_roles),
        'deny_roles' => serialize($plan->deny_roles),
        'modify_options' => serialize($plan->modify_options),
        'recurring_schedule' => serialize($plan->recurring_schedule),
        'data' => serialize($plan->data),
      ))
      ->condition('pid', $plan->pid)
      ->execute();
  }


/**
 * Make sure sku is set and used for the purchases and add fixed date support.
 */
drush_print("running ms_products update 7304");
  // Set the sku of the purchases table to the sku of the product plans table.
  $result = db_query("SELECT * FROM {ms_products_plans}");
  foreach ($result as $plan) {
    db_update('ms_products_purchases')
      ->fields(array(
        'sku' => $plan->sku,
        'bundle' => $plan->bundle,
      ))
      ->condition('sku', $plan->pid)
      ->execute();
  }

  $skus = array();
  module_load_include('inc', 'ms_products', 'ms_products.plans');
  foreach (ms_products_get_plans() as $plan) {
    $skus[$plan->pid] = $plan->sku;
    ms_core_product_id_change($plan->bundle . '-' . $plan->pid, $plan->bundle . '-' . $plan->sku);
    if (module_exists('i18n_string')) {
      module_load_install('i18n_string');
      i18n_string_install_update_context('ms_products_plan:plan:' . $plan->pid . ':*', 'ms_products_plan:plan:' . $plan->sku . ':*');
    }
  }
  // Clear the schema cache.
  cache_clear_all('schema', 'cache');

  drush_print( t('Successfully changed the sku of purchases to point to sku.'));


/**
 * Migrate the modify options field.
 */
drush_print("running ms_products update 7305");
  $result = db_query("SELECT * FROM {ms_products_plans}");
  foreach ($result as $plan) {
    $modify_options = _ms_products_unserialize($plan->modify_options);
    $plan->modify_options = array(
      'upgrade' => $modify_options,
      'downgrade' => array(),
    );
    db_update('ms_products_plans')
      ->fields(array(
        'modify_options' => serialize($plan->modify_options),
      ))
      ->condition('pid', $plan->pid)
      ->execute();
  }

  drush_print( t('Successfully updated the modify options field.'));


/**
 * Add new pid field for Purchases.
 */
drush_print("running ms_products update 7307");

  // Populate the existing purchases.
  $result = db_query("SELECT * FROM {ms_products_purchases}");
  foreach ($result as $purchase) {
    $plan = ms_products_plan_load($purchase->sku);
    if ($plan) {
      db_update('ms_products_purchases')
        ->fields(array(
          'pid' => $plan->pid,
        ))
        ->condition('id', $purchase->id)
        ->execute();
    }
  }

  drush_print( t('Successfully added pid field for purchases.'));




// ======================================
// Updates: from ms_memberships
// ======================================

/**
 * Migrate Override Settings
 */
drush_print("running ms_membership update 7701");

  $result = db_query("SELECT mpid, name FROM {ms_membership_plans} ORDER BY weight ASC");

  foreach ($result as $product) {
    $product->data = unserialize($product->data);

    if (isset($product->data['override_settings']) AND is_array($product->data['override_settings'])) {
      $old_override_settings = $product->data['override_settings'];
      $new_override_settings = array();

      foreach ($old_override_settings as $info) {
        if ($info['override']) {
          foreach ($info['settings'] as $key => $value) {
            if (is_array($value)) {
              foreach ($value as $child_key => $child_value) {
                if (!is_array($child_value)) {
                  if ($child_value != variable_get($child_key, '')) {
                    $new_override_settings[$child_key] = $child_value;
                  }
                }
              }
            }
            else {
              if ($value != variable_get($key, '')) {
                $new_override_settings[$key] = $value;
              }
            }
          }
        }
      }

      $product->data['override_settings'] = $new_override_settings;

      db_update('ms_membership_plans')
        ->fields(array(
          'data' => serialize($product->data),
        ))
        ->condition('mpid', $product->mpid)
        ->execute();
    }
  }


/**
 * Add the deny_roles field to the ms_membership_plans table
 */
drush_print("running ms_membership update 7703");

    // Set the default to an empty array
    db_update('ms_membership_plans')
      ->fields(array(
        'deny_roles' => serialize(array()),
      ))
      ->execute();
  }
  drush_print( t('Successfully added the deny_roles field to the ms_membership_plans database table.'));


/**
 * Rebuild the memberships to fix the current payments counter
 */
drush_print("running ms_membership update 7705");
  module_load_include('module', 'ms_core');
  module_load_include('inc', 'ms_core', 'ms_core.recurring');
  module_load_include('php', 'ms_core', 'ms_core.classes');
  // Update the current payments for all of the memberships to match the recurring schedules for the order
  $result = db_query("SELECT * FROM {ms_memberships}");
  foreach ($result as $membership) {
    if ($membership->oid AND $order = ms_core_order_load($membership->oid)
      AND $recurring_schedule = ms_core_load_recurring_schedule($order->oid)
      AND !empty($recurring_schedule->current_payments)
    ) {
      db_update('ms_memberships')
        ->fields(array(
          'current_payments' => $recurring_schedule->current_payments,
        ))
        ->condition('oid', $order->oid)
        ->execute();
    }
  }

  drush_print( t('Rebuilt the memberships to fix the current payments counter.'));

  /**
 * Enable the new dependencies if they aren't yet.
 */
drush_print("running ms_membership_update_7801");

  if (!module_exists('ms_products')) {
    module_enable(array('ms_products'));
  }
  drush_print( t('Made sure ms_products is enabled.'));




/**
 * Move plans and memberships to the ms_products module database tables.
 */
  drush_print( " running ms_membership_update_780") ;
  module_load_include('inc', 'ms_membership', 'ms_membership.migrate');

  $skus = array();
  $result = db_query("SELECT * FROM {ms_membership_plans}");
  foreach ($result as $plan) {
    // Move the fields that aren't natively supported into the data array.
    $plan->data = unserialize($plan->data);
    $plan->data['show_registration'] = $plan->show_registration;
    $plan->data['show_account'] = $plan->show_account;
    $plan->data['start_grant_roles'] = unserialize($plan->start_grant_roles);
    $plan->data['start_remove_roles'] = unserialize($plan->start_remove_roles);
    $plan->data['expire_grant_roles'] = unserialize($plan->expire_grant_roles);
    $plan->data['expire_remove_roles'] = unserialize($plan->expire_remove_roles);
    $plan->data['register_urls'] = unserialize($plan->register_urls);
    $plan->data['grant_credit'] = variable_get('ms_membership_grant_credit', TRUE);

    $plan->cart_type = ($plan->recurring) ? 'recurring' : 'cart';
    $plan->bundle = 'ms_membership';
    $plan->sku = 'ms_membership_' . $plan->mpid;
    $skus[$plan->mpid] = $plan->sku;
    ms_core_product_id_change($plan->bundle . '-' . $plan->mpid, $plan->bundle . '-' . $plan->sku);
    $plan->recurring_schedule = array(
      'total_occurrences' => $plan->total_occurrences,
      'main_amount' => $plan->main_amount,
      'main_length' => $plan->main_length,
      'main_unit' => $plan->main_unit,
      'has_trial' => ($plan->trial_length) ? TRUE : FALSE,
      'trial_amount' => $plan->trial_amount,
      'trial_length' => $plan->trial_length,
      'trial_unit' => $plan->trial_unit,
      'fixed_date' => $plan->fixed_date,
      'fixed_date_discount' => $plan->fixed_date_discount,
      'fixed_date_type' => $plan->fixed_date_type,
      'fixed_date_string' => $plan->fixed_date_string,
    );

    // Fix the modify options.
    $modify_options = array();
    $plan->modify_options = _ms_membership_unserialize($plan->modify_options);
    foreach ($plan->modify_options as $key => $value) {
      $modify_options['ms_membership_' . $key] = $value;
    }

    $plan->modify_options = serialize($modify_options);

    // Insert into the ms_products_plans database.
    db_insert('ms_products_plans')
      ->fields(array(
        'sku' => $plan->sku,
        'bundle' => $plan->bundle,
        'uid' => $plan->uid,
        'name' => $plan->name,
        'cart_type' => $plan->cart_type,
        'description' => $plan->description,
        'signup_mail_subject' => _ms_membership_migrate_tokens($plan->signup_mail_subject),
        'signup_mail_body' => _ms_membership_migrate_tokens($plan->signup_mail_body),
        'eot_mail_subject' => _ms_membership_migrate_tokens($plan->eot_mail_subject),
        'eot_mail_body' => _ms_membership_migrate_tokens($plan->eot_mail_body),
        'cancel_mail_subject' => _ms_membership_migrate_tokens($plan->cancel_mail_subject),
        'cancel_mail_body' => _ms_membership_migrate_tokens($plan->cancel_mail_body),
        'modify_mail_subject' => _ms_membership_migrate_tokens($plan->modify_mail_subject),
        'modify_mail_body' => _ms_membership_migrate_tokens($plan->modify_mail_body),
        'expiring_mail_subject' => _ms_membership_migrate_tokens($plan->expiring_mail_subject),
        'expiring_mail_body' => _ms_membership_migrate_tokens($plan->expiring_mail_body),
        'expiring_mail_days' => $plan->expiring_mail_days,
        'weight' => $plan->weight,
        'recurring_schedule' => serialize($plan->recurring_schedule),
        'modify_options' => $plan->modify_options,
        'allow_roles' => $plan->allow_roles,
        'deny_roles' => $plan->deny_roles,
        'expire_when' => $plan->expire_when,
        'data' => serialize($plan->data),
      ))
      ->execute();

    // Migrate translation strings.
    if (module_exists('i18n_string')) {
      $local_result = db_select('locales_source', 'ls')
        ->fields('ls')
        ->condition('textgroup', 'ms_membership_plan')
        ->execute();
      foreach ($local_result as $source) {
        // Update the tokens for these strings.
        $local_target_result = db_select('locales_target', 'lt')
          ->fields('lt')
          ->condition('lid', $source->lid)
          ->execute();
        foreach ($local_target_result as $target) {
          db_update('locales_target')
            ->fields(array(
              'translation' => _ms_membership_migrate_tokens($target->translation),
            ))
            ->condition('lid', $target->lid)
            ->condition('language', $target->language)
            ->execute();
        }
      }
      module_load_install('i18n_string');

      i18n_string_install_update_context('ms_membership_plan:m_plan:' . $plan->mpid . ':*', 'ms_products_plan:plan:' . $plan->sku . ':*');
    }
  }

  // Now we move over the memberships.
  $result = db_query("SELECT * FROM {ms_memberships}");
  foreach ($result as $membership) {
    db_insert('ms_products_purchases')
      ->fields(array(
        'oid' => $membership->oid,
        'uid' => $membership->uid,
        'sku' => !empty($skus[$membership->mpid]) ? $skus[$membership->mpid] : 'unkown-' . $membership->mpid,
        'bundle' => 'ms_membership',
        'status' => _ms_membership_migrate_status($membership->status),
        'expiration' => $membership->expiration,
        'start_date' => $membership->start_date,
        'current_payments' => $membership->current_payments,
        'max_payments' => $membership->max_payments,
        'data' => serialize(array()),
      ))
      ->execute();
  }


  // Migrate settings to permissions.
  if (variable_get('ms_membership_show_current_memberships', FALSE)) {
    _ms_membership_migrate_insert_permission(2, array('view own ms_membership purchases'));
  }
  if (variable_get('ms_membership_enforce_single', FALSE)) {
    _ms_membership_migrate_insert_permission(2, array('have multiple ms_membership purchases'));
  }
  _ms_membership_migrate_insert_permission(2, array('cancel own ms_membership purchases'));

  // Migrate tokens for admin emails.
  variable_set('ms_membership_cancelled_membership_mail_body',
    _ms_membership_migrate_tokens(variable_get('ms_membership_cancelled_membership_mail_body', '')));
  variable_set('ms_membership_cancelled_membership_mail_subject',
    _ms_membership_migrate_tokens(variable_get('ms_membership_cancelled_membership_mail_subject', '')));
  variable_set('ms_membership_new_membership_mail_body',
    _ms_membership_migrate_tokens(variable_get('ms_membership_new_membership_mail_body', '')));
  variable_set('ms_membership_new_membership_mail_subject',
    _ms_membership_migrate_tokens(variable_get('ms_membership_new_membership_mail_subject', '')));

  // Migrate permissions.
  _ms_membership_migrate_permission('administer membership plans', 'administer ms_membership plans');
  _ms_membership_migrate_permission('administer ms memberships', 'administer ms_membership purchases');
  _ms_membership_migrate_permission('purchase membership', 'purchase ms_membership products');
  _ms_membership_migrate_permission('modify own membership', 'renew own ms_membership purchases');
  _ms_membership_migrate_permission('renew own membership', 'modify own ms_membership purchases');




  drush_print( t('Successfully migrated membership plans and memberships to use the MS Products API.'));


/**
 * Clean up obsolete files.
 */
drush_print(" running  ms_membership_update_7803") ;
  $files = array(
    'ms_membership.rules.inc',
    'ms_membership.classes.php',
    'ms_membership.product_type.inc',
    'ms_membership.rules.inc',
  );

  foreach ($files as $file) {
    if (file_exists(dirname(__FILE__) . '/' . $file)) {
      unlink(dirname(__FILE__) . '/' . $file);
    }
  }

  $folders = array(
    'views',
    'js',
  );

  foreach ($folders as $folder) {
    _ms_membership_rrmdir(dirname(__FILE__) . '/' . $folder);
  }

  drush_print( t('Cleaned up obsolete files.'));



//TODO: NEED TO FIGURE OUT HOW TO EXECUTE THIS
/**
 * Implements hook_update_dependencies().
 */
//function ms_membership_update_dependencies() {
//  $dependencies = array();
//  $dependencies['ms_membership'][7802] = array(
//    'ms_products' => 7304,
//  );
//  $dependencies['ms_products'][7305] = array(
//    'ms_membership' => 7802,
//  );
//  return $dependencies;
//}
  


// ======================================
// Updates: from Authorize.net Gateway
// ======================================

/**
 * Add the notified field to the payment profiles table.
 */
drush_print("running ms_authorizenet update 7101");
    $notified = variable_get('ms_authorizenet_last_expiration_reminder', 0);
    db_query("UPDATE {ms_authorizenet_payment_profiles} SET notified = :notified", array(':notified' => $notified));
    variable_del('ms_authorizenet_last_expiration_reminder');
  }

  drush_print( t('Successfully added the notified field to the ms_authorizenet_payment_profiles database table.'));


// ======================================
// Updates: MS Product Kit
// ======================================

/**
 * Change the field type to varchar instead of integer.
 */
drush_print("running ms_product_kit_update_7101");
  field_cache_clear();
  $fields = field_info_fields();
  foreach ($fields as $field_name => $field) {
    if ($field['type'] == 'ms_product_kit_product_plan' && $field['storage']['type'] == 'field_sql_storage') {
      foreach ($field['storage']['details']['sql'] as $table_info) {
        foreach ($table_info as $table_name => $columns) {
          $column_name = _field_sql_storage_columnname($field_name, 'pid');
          db_change_field($table_name, $column_name, $column_name, array(
            'type' => 'varchar',
            'default' => '',
            'length' => 255,
            'not null' => TRUE,
          ));
        }
      }
    }
  }
  field_cache_clear();
  drush_print( t('Successfully changed the field type to varchar.'));





drush_print ("");
if(count($errors) > 0 ) {
  drush_print(count($errors) . " errors reported. script complete");
  foreach($errors as $e)
    drush_print($e);

  
} else {
  drush_print("no errors reported. script complete");
}


exit ;




//HELPER FUNCTIONS



/**
 * Attempts to fully unserialize a string that may have been serialized multiple times.
 */
function _ms_products_unserialize($object) {
  for ($i = 0; $i < 6; $i++) {
    if (is_array($object)) {
      return $object;
    }
    $object = unserialize($object);
  }

  return array();
}


/**
 * Recursively extracts the textarea form elements.
 */
function _ms_core_extract_token_variables($parent, &$settings) {
  foreach (element_children($parent) as $child_name) {
    if (!empty($parent[$child_name]['#type']) && $parent[$child_name]['#type'] == 'textarea') {
      $settings[$child_name] = $parent[$child_name];
    }
    _ms_core_extract_token_variables($parent[$child_name], $settings);
  }
}



function _token_upgrade_token_list() {
  $tokens = array(
    // Global tokens
    'user-name' => 'current-user:name',
    'user-id' => 'current-user:id',
    'user-mail' => 'current-user:mail',
    'site-url' => 'site:url',
    'site-name' => 'site:name',
    'site-slogan' => 'site:slogan',
    'site-mission' => 'site:mission',
    'site-mail' => 'site:mail',
    'site-date' => 'date:short',
    //'site-date-' => '', // Date tokens expanded below
    'current-page-path' => 'current-page:path',
    'current-page-url' => 'current-page:url',
    'page-number' => 'current-page:page-number',

    // Comment tokens
    'comment-cid' => 'comment:cid',
    'comment-nid' => 'comment:node:nid',
    'comment-title' => 'comment:title',
    'comment-body' => 'comment:body',
    'comment-author-name' => 'comment:author:name',
    'comment-author-mail' => 'comment:author:mail',
    //'comment-body-format' => '',
    //'comment-' => '', // Date tokens expanded below
    'comment-node-title' => 'comment:node',

    // Node tokens
    'nid' => 'node:nid',
    'type' => 'node:type',
    'type-name' => 'node:type-name',
    'language' => 'node:language',
    'title' => 'node:title',
    'author-uid' => 'node:author:uid',
    'author-name' => 'node:author:name',
    'author-mail' => 'node:author:mail',
    'node_comment_count' => 'node:comment-count',
    'unread_comment_count' => 'node:comment-count-new',
    'log' => 'node:log',
    //'' => '', // Date tokens expanded below
    //'mod-' => '', // Date tokens expanded below
    'menupath' => 'node:menu-link:parent:path][node:menu-link',
    'menu' => 'node:menu-link:menu-name',
    'menu-link-title' => 'node:menu-link',
    'menu-link-mlid' => 'node:menu-link:mlid',
    'menu-link-plid' => 'node:menu-link:parent:mlid',
    //'term' => 'node:term',
    //'term-id' => 'node:term:tid',
    //'vocab' => 'node:term:vocabulary',
    //'vocab-id' => 'node:term:vocabulary:vid',

    // Book tokens
    //'book' => 'node:book',
    //'book_id' => 'node:book:bid',
    //'bookpath' => 'node:book:path',

    // Taxonomy tokens
    'tid' => 'term:tid',
    'cat' => 'term:name',
    'cat-description' => 'term:description',
    'vid' => 'term:vocabulary:vid',
    'vocab' => 'term:vocabulary',
    'vocab-description' => 'term:vocabulary:description',

    // User tokens
    'user' => 'user:name',
    'uid' => 'user:uid',
    'mail' => 'user:mail',
    'reg-date' => 'user:created',
    'reg-since' => 'user:created:since',
    //'user-created' => '', // Date tokens expanded below
    'log-date' => 'user:last-login',
    'log-since' => 'user:last-login:since',
    //'user-last-login' => '', // Date tokens expanded below
    //'date-in-tz' => '',
    'account-url' => 'user:url',
    'account-edit' => 'user:edit-url',
  );

  // Account for date tokens which need to be expanded.
  $tokens += _token_upgrade_token_date_list('site-', 'site:date');
  $tokens += _token_upgrade_token_date_list('', 'node:created');
  $tokens += _token_upgrade_token_date_list('mod-', 'node:changed');
  //$tokens += _token_upgrade_token_date_list('node-revision-', 'node:changed');
  $tokens += _token_upgrade_token_date_list('comment-', 'comment:created');
  $tokens += _token_upgrade_token_date_list('user-register-', 'user:created');
  $tokens += _token_upgrade_token_date_list('user-last-login-', 'user:last-login');

  return $tokens;
}



/**
 * Removes a directory recursively
 */
function _ms_membership_rrmdir($dir) {
  if (is_dir($dir)) {
    foreach (glob($dir . '/*') as $file) {
      if (is_dir($file))
        _ms_membership_rrmdir($file);
      else
        unlink($file);
    }
    rmdir($dir);
  }
}




/**
 * Attempts to fully unserialize a string that may have been serialized multiple times.
 */
function _ms_membership_unserialize($object) {
  for ($i = 0; $i < 6; $i++) {
    if (is_array($object)) {
      return $object;
    }
    $object = unserialize($object);
  }

  return array();
}

?>

