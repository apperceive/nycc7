<?php

/**
 * @file
 * This module provides Stripe (http://stripe.com/) payment gateway integration
 * to MS Core. MS Stripe offers a PCI-compliant way to process payments
 * straight from your shop.
 */

/**
 * Implements hook_cron().
 */
function ms_stripe_cron() {
  // Process payments that need to be processed
  $result = db_query("SELECT * FROM {ms_recurring_schedules} WHERE gateway = '%s'
    AND status = '%s' AND next_payment <> %d AND next_payment < %d",
    array('ms_stripe', 'active', 0, time()));

  // Require needed Stripe library.
  require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

  Stripe::setApiKey(variable_get('ms_stripe_secret_key', ''));

  // Add a counter so that only a certain number of payments are processed each cron run
  $count = 0;

  while ($recurring_schedule = db_fetch_object($result)) {
    $count += 1;
    // Implement the setting for cron number
    if ($count > variable_get('ms_stripe_cron_number', 3)) {
      break;
    }

    // Load some variables
    $order = ms_core_order_load($recurring_schedule->oid);

    if ($payment_profile = ms_core_payment_profile_load($order->data['payment_profile_id'])) {
      try {
        // Load the customer
        $customer = Stripe_Customer::retrieve($payment_profile->remote_id);
        // Process the payment
        $response = Stripe_Charge::create(
          array(
            'amount' => round($recurring_schedule->main_amount * 100), // amount in cents
            'currency' => strtolower($order->currency),
            'customer' => $customer->id,
            'description' => t('Order Number: @order_number', array('@order_number' => $order->order_number)),
          )
        );

        // Insert the rec_payment Payment to the database
        $payment = ms_core_new_payment($order->oid, 'ms_stripe', 'rec_payment');

        $payment->transaction = $response->id;
        $payment->amount = $recurring_schedule->main_amount;
        $payment->currency = $order->currency;
        $payment->data = array('response' => $response);
        $payment->recurring_schedule = $order->recurring_schedule;

        // Add the Payment to the Order
        ms_core_enter_payment($payment, FALSE);

        // Check if the recurring_schedule is done, send rec_eot
        if ($recurring_schedule->total_occurrences != 0 AND $recurring_schedule->total_occurrences <= ($recurring_schedule->current_payments + 1)) {
          $payment->type = 'rec_eot';
          $payment->amount = 0;
          ms_core_enter_payment($payment, FALSE);
        }
      }
      catch (Exception $e) {
        // If the failed payments counter is greater than or equal to the allowed amount, cancel the order, send rec_cancel
        if ($recurring_schedule->failed_payments >= variable_get('ms_stripe_retry_attempts', 3)) {
          // Insert the rec_cancel Payment to the database
          $payment = ms_core_new_payment($order->oid, 'ms_stripe', 'rec_cancel');

          $payment->transaction = ms_core_generate_transaction_id(10);
          $payment->currency = $order->currency;
          $payment->recurring_schedule = $order->recurring_schedule;

          // Add the Payment to the Order
          ms_core_enter_payment($payment, FALSE);
        }
        else {
          // Insert the rec_cancel Payment to the database
          $payment = ms_core_new_payment($order->oid, 'ms_stripe', 'failed');

          $payment->transaction = ms_core_generate_transaction_id(10);
          $payment->currency = $order->currency;
          $payment->recurring_schedule = $order->recurring_schedule;

          // Add the Payment to the Order
          ms_core_enter_payment($payment, FALSE);

          // Send an email to the user informing them they need to update their card info
          if (variable_get('ms_stripe_billing_error_body', '')) {
            $vars = array(
              'payment_profile' => $payment_profile,
              'order' => $order,
            );
            drupal_mail('ms_stripe', 'billing_error', $email, user_preferred_language($account), $vars);
          }
        }
      }
    }
    else {
      // There is no payment profile for this recurring order, log an error
      ms_core_log_error('ms_stripe', 'There was an error loading a payment profile
        to charge a recurring payment. Order: !order', array('!order' => ms_core_print_r($order)));
    }
  }
}

/**
 * Access callback to see if the user can change their billing info
 */
function ms_stripe_billing_test($account, $id) {
  global $user;
  if ($payment_profile = ms_core_payment_profile_load($id)) {
    if ($user->uid == $payment_profile->uid OR user_access('administer moneyscripts orders')) {
      return TRUE;
    }
  }
  else {
    if ($user->uid == $account->uid OR user_access('administer moneyscripts orders')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function ms_stripe_menu() {
  $items = array();
  $items['ms/checkout/stripe'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_stripe_checkout_page',
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms/checkout/stripe_saved/%'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_stripe_checkout_saved_page',
    'page arguments' => array(3),
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneyscripts/gateways/ms_stripe'] = array(
    'title' => 'Stripe',
    'description' => 'Set the various Stripe Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_stripe_admin'),
    'access arguments' => array('administer moneyscripts settings'),
    'type' => MENU_NORMAL_ITEM,
   );
  $items['user/%user/ms_stripe/billing/%'] = array(
    'title' => 'Change Billing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_stripe_payment_profile_edit_form', 1, 4),
    'access callback' => 'ms_stripe_billing_test',
    'access arguments' => array(1, 4),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

// ======================================
// Administration Page:
// ======================================

/**
 * Implements hook_ms_core_overrides().
 */
function ms_stripe_ms_core_overrides() {
  return array(
    'ms_stripe' => array(
      'title' => t('MS Stripe'),
      'form' => 'ms_stripe_admin',
    ),
  );
}

/**
 * Admin Settings Form
 */
function ms_stripe_admin(&$form_state) {
  // -----------------------------
  // Main Settings
  // -----------------------------
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['ms_stripe_show_gateway'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Stripe Gateway Option on Checkout Page?'),
    '#ms_override' => TRUE,
    '#default_value' => variable_get('ms_stripe_show_gateway', TRUE),
  );
  $form['main']['ms_stripe_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#description' => t('Secret API Key. Get your key from https://stripe.com/'),
    '#default_value' => variable_get('ms_stripe_secret_key', ''),
  );
  $form['main']['ms_stripe_public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Publishable Key'),
    '#description' => t('Publishable API Key. Get your key from https://stripe.com/'),
    '#default_value' => variable_get('ms_stripe_public_key', ''),
  );
  $form['main']['ms_stripe_retry_attempts'] = array(
    '#type' => 'textfield',
    '#title' => t('Retry Attempts'),
    '#description' => t('How many times should the system retry charging a card?
      If a scheduled charge fails, the user is notified that they need to update
      their billing information, and the order is scheduled to be charged again
      in 3 days.'),
    '#default_value' => variable_get('ms_stripe_retry_attempts', 3),
  );
  $form['main']['ms_stripe_cron_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of Payments Processed During Cron'),
    '#description' => t('How many payments to process during cron run? Be careful
      of setting too many, as this could lead to a timeout.'),
    '#default_value' => variable_get('ms_stripe_cron_number', 3),
  );

  // -----------------------------
  // Email Settings
  // -----------------------------
  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['email']['ms_stripe_billing_error_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Billing Error Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_stripe_billing_error_subject',
      t("There was a problem when processing your credit card.")),
  );
  $form['email']['ms_stripe_billing_error_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Card Billing Error Email Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_stripe_billing_error_body',
      t("Your credit card [cardNumber] could not
      be processed. To avoid interruption of service, please update your billing
      information here: [updateUrl]

Sincerely,
Site Admin")),
  );

  $form['email']['ms_stripe_billing_error_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['ms_stripe_billing_error_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_core_payment_profile', 'user', 'ms_core_order'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_ms_payment_gateway().
 */
function ms_stripe_ms_payment_gateway($cart) {
  $title = t('Pay by Credit Card') . '<br /><span style="padding-left: 5.5em;">'
    . '<b>' . t('Includes') . ':</b>'
    . ms_core_get_cc_images(array('visa', 'mc', 'discover', 'amex'));
  $gateways[] = array(
    'name' => 'Stripe',
    'description' => $title,
    'module' => 'ms_stripe',
    'path' => 'ms/checkout/stripe',
    'active' => ms_core_variable_get('ms_stripe_show_gateway', TRUE, $cart),
    'cancel_url' => 'ms_core_get_cancel_helper_url',
    'modify_url' => 'ms_core_get_modify_helper_url',
    'billing_url' => 'ms_core_get_billing_helper_url',
    'recurring_schedule_support' => TRUE,
    'recurring' => TRUE,
    'cart' => TRUE,
  );

  // If the user has a saved card, show that as an option
  global $user;
  if ($user->uid) {
    $payment_profiles = ms_core_payment_profiles_load_by_user($user->uid);
    foreach ($payment_profiles as $payment_profile) {
      $gateways[] = array(
        'name' => 'Stripe Saved Card',
        'description' => t("Pay with your saved card: @card", array('@card' => $payment_profile->cc_num)),
        'module' => 'ms_stripe_saved_profile_' . $payment_profile->id,
        'path' => 'ms/checkout/stripe_saved/' . $payment_profile->id,
        'active' => ms_core_variable_get('ms_stripe_show_gateway', TRUE, $cart),
        'cancel_url' => 'ms_core_get_cancel_helper_url',
        'modify_url' => 'ms_core_get_modify_helper_url',
        'billing_url' => 'ms_core_get_billing_helper_url',
        'recurring_schedule_support' => TRUE,
        'recurring' => TRUE,
        'cart' => TRUE,
      );
    }
  }

  return $gateways;
}

/**
 * Implements hook_ms_core_billing_info_alter().
 */
function ms_stripe_ms_core_billing_info_alter(&$html, $account) {
  $html['ms_stripe_profile']['add'] = array(
    '#type' => 'markup',
    '#value' => l(t('Add Card'), 'user/' . $account->uid . '/ms_stripe/billing/new'),
  );
  $payment_profiles = ms_core_payment_profiles_load_by_user($account->uid);
  foreach ($payment_profiles as $payment_profile) {
    $saved_card = (!empty($payment_profile->cc_num)) ? $payment_profile->cc_num : t('N/A');

    $billing_address = t('N/A');
    if ($payment_profile && isset($payment_profile->address)) {
      $billing_address = t("@address - @city , @state", array(
        '@address' => $payment_profile->address,
        '@city' => $payment_profile->city,
        '@state' => $payment_profile->state,
      ));
    }

    $html['ms_stripe_profile'][$payment_profile->id] = array(
      '#type' => 'fieldset',
      '#title' => t('Saved Profile - !edit', array('!edit' => l(t('Edit'), 'user/' . $payment_profile->uid . '/ms_stripe/billing/' . $payment_profile->id))),
    );
    $html['ms_stripe_profile'][$payment_profile->id]['card'] = array(
      '#type' => 'item',
      '#title' => t('Saved Card'),
      '#value' => $saved_card
    );
    $html['ms_stripe_profile'][$payment_profile->id]['billing_address'] = array(
      '#type' => 'item',
      '#title' => t('Billing Address'),
      '#value' => $billing_address,
    );
  }
}

/**
 * Show a form to edit the payment profile
 */
function ms_stripe_payment_profile_edit_form(&$form_state, $account, $id = NULL) {
  if ($payment_profile = ms_core_payment_profile_load($id)) {
    $form['profile_id'] = array(
      '#type' => 'value',
      '#value' => $id,
    );
  }

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $account->uid,
  );

  $form['card_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit Card Information'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t('Please enter the new billing information you would like to use.'),
  );

  // Credit Card Info
  $form['card_info']['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#size' => 80,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#desription' => t('The First Name as it appears on the card.'),
    '#default_value' => ($payment_profile) ? $payment_profile->first_name : '',
  );
  $form['card_info']['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#size' => 80,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#desription' => t('The Last Name as it appears on the card.'),
    '#default_value' => ($payment_profile) ? $payment_profile->last_name : '',
  );
  $form['card_info']['cc_num'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card Number'),
    '#size' => 40,
    '#maxlength' => 20,
    '#description' => t("The Credit Card Number. You must enter the full number
      when changing any of the other information. Card on record: @card", array(
        '@card' => ($payment_profile) ? $payment_profile->cc_num : t('N/A'))),
    '#required' => TRUE,
    '#default_value' => '',
  );
  $form['card_info']['cc_cvc'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card Verification Code'),
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t("Enter the Credit Card Verification Code."),
    '#required' => TRUE,
  );
  $form['card_info']['exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Month'),
    '#options' => ms_core_get_months(),
    '#description' => t("The month this credit card expires."),
    '#default_value' => ($payment_profile) ? str_pad($payment_profile->exp_month, 2, 0, STR_PAD_LEFT) : '',
    '#required' => TRUE,
  );
  $form['card_info']['exp_year'] = array(
    '#type' => 'select',
    '#title' => t('Year'),
    '#options' => ms_core_get_years(),
    '#description' => t("The year this credit card expires."),
    '#default_value' => ($payment_profile) ? $payment_profile->exp_year : '',
    '#required' => TRUE,
  );

  $form['billing_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Billing Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  // Billing Info
  $form['billing_info']['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Street Address'),
    '#size' => 80,
    '#required' => TRUE,
    '#default_value' => ($payment_profile) ? $payment_profile->address : '',
  );
  $form['billing_info']['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 40,
    '#required' => TRUE,
    '#default_value' => ($payment_profile) ? $payment_profile->city : '',
  );
  $form['billing_info']['state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#size' => 40,
    '#description' => t('Enter the 2 Letter Code for the State'),
    '#required' => TRUE,
    '#default_value' => ($payment_profile) ? $payment_profile->state : '',
  );
  $form['billing_info']['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code'),
    '#size' => 20,
    '#required' => TRUE,
    '#default_value' => ($payment_profile) ? $payment_profile->zip : '',
  );
  $form['billing_info']['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => ms_core_get_countries('iso'),
    '#default_value' => ($payment_profile) ? $payment_profile->country : '',
    '#required' => TRUE,
  );
  $form['billing_info']['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone Number'),
    '#size' => 40,
    '#required' => FALSE,
    '#default_value' => ($payment_profile) ? $payment_profile->phone : '',
  );
  $form['billing_info']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#size' => 80,
    '#required' => TRUE,
    '#default_value' => ($payment_profile) ? $payment_profile->email : '',
  );

  $form['#validate'][] = 'ms_core_cc_form_validate';
  $form['#validate'][] = 'ms_stripe_payment_profile_edit_form_validate';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Validate Function for editing a payment profile
 */
function ms_stripe_payment_profile_edit_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  try {
    // Require needed Stripe library.
    require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

    // Set stripe secret key.
    Stripe::setApiKey(variable_get('ms_stripe_secret_key', ''));

    if (isset($v['profile_id'])) {
      $payment_profile = ms_core_payment_profile_load($v['profile_id']);
      // Merge in the form values with the object
      $payment_profile = (object) array_merge((array) $payment_profile, $v);

      $customer = Stripe_Customer::retrieve($payment_profile->remote_id);
      $customer->card = array(
        'number' => $payment_profile->cc_num,
        'exp_month' => $payment_profile->exp_month,
        'exp_year' => $payment_profile->exp_year,
        'cvc' => $payment_profile->cc_cvc,
        'name' => $payment_profile->first_name . ' ' . $payment_profile->last_name,
        'address_line1' => $payment_profile->address,
        'address_zip' => $payment_profile->zip,
        'address_state' => $payment_profile->state,
        'address_country' => $payment_profile->country,
      );
      $customer->email = $payment_profile->email;
      $customer->save();
    }
    else {
      $payment_profile = (object) $v;

      $customer = Stripe_Customer::create(array(
        "description" => t("Customer record for @first_name @last_name - @email",
          array(
            '@first_name' => $payment_profile->first_name,
            '@last_name' => $payment_profile->last_name,
            '@email' => $payment_profile->email,
          )
        ),
        "card" => array(
          'number' => $payment_profile->cc_num,
          'exp_month' => $payment_profile->exp_month,
          'exp_year' => $payment_profile->exp_year,
          'cvc' => $payment_profile->cc_cvc,
          'name' => $payment_profile->first_name . ' ' . $payment_profile->last_name,
          'address_line1' => $payment_profile->address,
          'address_zip' => $payment_profile->zip,
          'address_state' => $payment_profile->state,
          'address_country' => $payment_profile->country,
        ),
        'email' => $payment_profile->email,
      ));
    }

    $payment_profile->remote_id = $customer->id;

    // Update the payment profile
    ms_core_payment_profile_save($payment_profile);

    // Set a message
    drupal_set_message(t('Your Billing Information has been successfully updated.'));
    // Redirect to the correct page
    $form['#redirect'] = 'user/' . $v['uid'] . '/billing-info';
  }
  catch (Exception $e) {
    form_set_error('cc_number', t('Error: @details',
      array('@details' => $e->getMessage())));
  }
}

/**
 * Checkout page for a saved card
 */
function ms_stripe_checkout_saved_page($id) {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  global $user;

  if (!$order = ms_core_load_session_order()) {
    // The order wasn't loaded: Error
    return t('There was an error with the checkout');
  }

  if ($order->status != 'checkout') {
    // The order is not in checkout and shouldn't be here
    return t('This order has already been through Checkout.');
  }

  if (!$payment_profile = ms_core_payment_profile_load($id) OR $user->uid != $payment_profile->uid) {
    // This profile is invalid
    return t('Error, invalid profile.');
  }

  // Get the Payment Form
  $build = array();
  $build['content'] = array(
    'ms_stripe_payment_saved_submit_form' => drupal_get_form('ms_stripe_payment_saved_submit_form', $order, $payment_profile),
  );  
  return drupal_render($build);
}

/**
 * Build the Checkout Form
 */
function ms_stripe_payment_saved_submit_form($form_state, $order, $payment_profile) {
  $form = array();

  $form['ms_order_contents'] = array(
    '#type' => 'item',
    '#value' => ms_core_get_order_details_table($order),
  );

  $form['ms_payment_method'] = array(
    '#type' => 'item',
    '#title' => t("Payment Method"),
    '#value' => t("Payment will be charged to your card: @card",
      array('@card' => $payment_profile->cc_num)),
  );

  $form['ms_oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );
  $form['ms_payment_profile_id'] = array(
    '#type' => 'value',
    '#value' => $payment_profile->id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay Now'),
  );

  return $form;
}

/**
 * Payment method callback: checkout form submission.
 */
function ms_stripe_payment_saved_submit_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  $order = ms_core_order_load($v['ms_oid']);
  if (!$payment_profile = ms_core_payment_profile_load($v['ms_payment_profile_id'])) {
    form_set_error('submit', t("Error: Invalid profile."));
    return;
  }

  // Require needed Stripe library.
  require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

  // Set stripe secret key.
  Stripe::setApiKey(variable_get('ms_stripe_secret_key', ''));

  try {
    // Load the customer
    $customer = Stripe_Customer::retrieve($payment_profile->remote_id);

    // If there is a trial period, then we charge the trial amount
    if ($order->order_type == 'recurring') {
      if ($order->recurring_schedule['has_trial']) {
        $amount = round($order->recurring_schedule['trial_amount'], 2);
      }
      else {
        $amount = round($order->recurring_schedule['main_amount'], 2);
      }
    }
    else {
      $amount = round($order->amount, 2);
    }

    // Insert the rec_signup Payment to the database
    $payment = ms_core_new_payment($order->oid, 'ms_stripe', 'cart');
    $payment->currency = $order->currency;
    $payment->recurring_schedule = $order->recurring_schedule;
    $payment->recurring_id = $order->oid;

    if ($amount > 0) {
      // charge the Customer instead of the card
      $response = Stripe_Charge::create(
        array(
          'amount' => round($amount * 100), // amount in cents
          'currency' => strtolower($order->currency),
          'customer' => $customer->id,
          'description' => t('Order Number: @order_number', array('@order_number' => $order->order_number)),
        )
      );

      $payment->transaction = $response->id;
      $payment->data = array('response' => $response);
    }
    else {
      $payment->transaction = ms_core_generate_transaction_id(10);
    }

    // Enter the address and things as saved in the payment profile
    $payment->billing_address = array(
      'street' => check_plain($payment_profile->address),
      'city' => check_plain($payment_profile->city),
      'state' => check_plain($payment_profile->state),
      'zip' => check_plain($payment_profile->zip),
      'country' => check_plain($payment_profile->country),
      'phone' => check_plain($payment_profile->phone),
    );
    $payment->shipping_address = $payment->billing_address;
    $payment->first_name = check_plain($payment_profile->first_name);
    $payment->last_name = check_plain($payment_profile->last_name);

    switch ($order->order_type) {
      case 'recurring':
        // First enter the rec_signup
        $payment->type = 'rec_signup';
        ms_core_enter_payment($payment, FALSE);

        // Then enter the rec_payment
        if ($amount > 0) {
          $payment->type = 'rec_payment';
          $payment->amount = $amount;
          ms_core_enter_payment($payment, FALSE);
        }
        break;

      case 'cart':
        $payment->amount = $amount;
        ms_core_enter_payment($payment, FALSE);
        break;
    }

    // Reload the order to save the payment_profile_id
    $order = ms_core_order_load($order->oid);
    $data = array(
      'payment_profile_id' => $payment_profile->id,
    );
    ms_core_add_data($order, $data);

    $form_state['redirect'] = 'ms/thankyou';
  }
  catch (Exception $e) {
    ms_core_log('ms_stripe', 'Following error received when processing card @stripe_error.', array('@stripe_error' => $e->getMessage()));
    form_set_error('cc_number', t('We received the following error processing your card.
      Please enter your information again or try a different card. @stripe_error',
      array('@stripe_error' => $e->getMessage())));
  }
}

/**
 * Checkout page for a new card
 */
function ms_stripe_checkout_page() {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  global $user;

  if (!$order = ms_core_load_session_order()) {
    // The order wasn't loaded: Error
    return t('There was an error with the checkout');
  }

  if ($order->status != 'checkout') {
    // The order is not in checkout and shouldn't be here
    return t('This order has already been through Checkout.');
  }

  // Get the Payment Form
  return drupal_get_form('ms_stripe_payment_submit_form', $order);
}

/**
 * Build the Checkout Form
 */
function ms_stripe_payment_submit_form($form_state, $order) {
  $form = array();

  $form['ms_order_contents'] = array(
    '#type' => 'item',
    '#value' => ms_core_get_order_details_table($order),
  );

  $allowed_cards = array(
    'visa' => 'Visa',
    'mc' => 'MasterCard',
    'amex' => 'American Express',
    'discover' => 'Discover',
  );

  ms_core_get_cc_form($form, $order, $allowed_cards);

  ms_core_get_billing_form($form, $order);

  $form['billing']['billing_state']['#required'] = FALSE;

  $form['ms_oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );

  // Set our key to settings array.
  drupal_add_js(array('stripe' => array('publicKey' => variable_get('ms_stripe_public_key', ''))), 'setting');

  // Include the stripe.js from stripe.com.
  drupal_set_html_head('<script type="text/javascript" src="https://js.stripe.com/v1/"></script>');

  // Load ms_stripe.js.
  drupal_add_js(drupal_get_path('module', 'ms_stripe') . '/ms_stripe.js');

  // To display validation errors.
  $form['errors'] = array(
    '#type' => 'item',
    '#value' => '<div class="payment-errors"></div>',
  );

  // To display ajax loader
  $form['ajax_loader'] = array(
    '#type' => 'item',
    '#value' => "<div id='ms_ajax_loader' style='display:none;'><div><img src='/" . drupal_get_path('module', 'ms_core') .'/images/ajax-loader.gif' . "' /></div></div>",
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay Now'),
  );

  $form['#validate'][] = 'ms_core_cc_form_validate';
  $form['#validate'][] = 'ms_stripe_payment_submit_form_validate';

  $form['#redirect'] = 'ms/thankyou';

  return $form;
}

/**
 * Payment method callback: checkout form submission.
 */
function ms_stripe_payment_submit_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  $order = ms_core_order_load($v['ms_oid']);

  // Require needed Stripe library.
  require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

  // Set stripe secret key.
  Stripe::setApiKey(variable_get('ms_stripe_secret_key', ''));

  $token = $_POST['stripeToken'];

  try {
    // Create a Customer
    $customer = Stripe_Customer::create(array(
      "card" => $token,
      "description" => t("Customer record for @first_name @last_name - @email",
        array(
          '@first_name' => $v['cc_first_name'],
          '@last_name' => $v['cc_last_name'],
          '@email' => $v['billing_email'],
        )
      ),
      "email" => $v['billing_email'],
    ));

    // If there is a trial period, then we charge the trial amount
    if ($order->order_type == 'recurring') {
      if ($order->recurring_schedule['has_trial']) {
        $amount = round($order->recurring_schedule['trial_amount'], 2);
      }
      else {
        $amount = round($order->recurring_schedule['main_amount'], 2);
      }
    }
    else {
      $amount = round($order->amount, 2);
    }

    // Insert the rec_signup Payment to the database
    $payment = ms_core_new_payment($order->oid, 'ms_stripe', 'cart');
    $payment->currency = $order->currency;
    $payment->recurring_schedule = $order->recurring_schedule;
    $payment->recurring_id = $order->oid;

    // Update the address
    $payment->billing_address = array(
      'street' => check_plain($v['billing_address1']),
      'city' => check_plain($v['billing_city']),
      'state' => check_plain($v['billing_state']),
      'zip' => check_plain($v['billing_zip']),
      'country' => check_plain($v['billing_country']),
      'phone' => check_plain($v['billing_phone']),
    );
    $payment->shipping_address = $payment->billing_address;

    // Update the contact details
    $payment->first_name = check_plain($v['cc_first_name']);
    $payment->last_name = check_plain($v['cc_last_name']);

    if ($amount > 0) {
      // charge the Customer instead of the card
      $response = Stripe_Charge::create(
        array(
          'amount' => round($amount * 100), // amount in cents
          'currency' => strtolower($order->currency),
          'customer' => $customer->id,
          'description' => t('Order Number: @order_number', array('@order_number' => $order->order_number)),
        )
      );

      $payment->transaction = $response->id;
      $payment->data = array('response' => $response);
    }
    else {
      $payment->transaction = ms_core_generate_transaction_id(10);
    }

    switch ($order->order_type) {
      case 'recurring':
        // First enter the rec_signup
        $payment->type = 'rec_signup';
        ms_core_enter_payment($payment, FALSE);

        // Then enter the rec_payment
        if ($amount > 0) {
          $payment->type = 'rec_payment';
          $payment->amount = $amount;
          ms_core_enter_payment($payment, FALSE);
        }
        break;

      case 'cart':
        $payment->amount = $amount;
        ms_core_enter_payment($payment, FALSE);
        break;
    }

    // Reload the order to get the uid
    $order = ms_core_order_load($order->oid);

    // Save a new payent profile for this user
    $payment_profile = array(
      'oid' => $order->oid,
      'uid' => $order->uid,
      'remote_id' => $customer->id,
      'module' => 'ms_stripe',
      'status' => 1,
      'first_name' => $v['cc_first_name'],
      'last_name' => $v['cc_last_name'],
      'address' => $v['billing_address1'],
      'city' => $v['billing_city'],
      'state' => $v['billing_state'],
      'zip' => $v['billing_zip'],
      'country' => $v['billing_country'],
      'phone' => $v['billing_phone'],
      'email' => $v['billing_email'],
      'fax' => '',
      'cc_type' => $v['cc_type'],
      'cc_num' => $v['cc_number'],
      'exp_month' => $v['cc_exp_month'],
      'exp_year' => $v['cc_exp_year'],
    );
    $payment_profile = ms_core_payment_profile_save($payment_profile);

    // Reload the order to save the payment_profile_id
    $order = ms_core_order_load($order->oid);
    $data = array(
      'payment_profile_id' => $payment_profile->id,
    );
    ms_core_add_data($order, $data);
  }
  catch (Exception $e) {
    ms_core_log('ms_stripe', 'Following error received when processing card @stripe_error.', array('@stripe_error' => $e->getMessage()));
    form_set_error('cc_number', t('We received the following error processing your card.
      Please enter you information again or try a different card. @stripe_error',
      array('@stripe_error' => $e->getMessage())));
  }
}

/**
 * The card has been charged, mark the order as completed
 */
function ms_stripe_payment_submit_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'ms/thankyou';
  drupal_goto('ms/thankyou');
}

// ======================================
// MAIL
// ======================================

/**
 * Implements hook_mail()
 */
function ms_stripe_mail($key, &$message, $seed_vars) {
  $order = $seed_vars['order'];
  switch ($key) {
    case 'billing_error':
      $payment_profile = $seed_vars['payment_profile'];
      $account = user_load($payment_profile->uid);

      $subject = variable_get('ms_stripe_billing_error_subject', '');
      $body = variable_get('ms_stripe_billing_error_body', '');
      break;
  }

  // Replace the Tokens
  $subject = token_replace($subject, 'ms_core_order', $order);
  $subject = token_replace($subject, 'ms_core_payment_profile', $payment_profile);
  $subject = token_replace($subject, 'user', $account);

  $body = token_replace($body, 'ms_core_order', $order);
  $body = token_replace($body, 'ms_core_payment_profile', $payment_profile);
  $body = token_replace($body, 'user', $account);

  $message['subject'] = $subject;
  $message['body'] = $body;
}

/**
 * Implements hook_ms_core_modification_charge().
 *
 * Charges the amount and approves or denies the modification
 *
 * @param $amount
 *   The amount that should be charged before approval
 * @param $order
 *   The $order object
 *
 * @return
 *   TRUE if the amount was charged successfully, FALSE otherwise
 */
function ms_stripe_ms_core_modification_charge($amount, $order) {
  // Load the payment profile
  if (!empty($order->data['payment_profile_id']) AND $payment_profile = ms_core_payment_profile_load($order->data['payment_profile_id'])) {
    try {
      // Require needed Stripe library.
      require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

      // Set stripe secret key.
      Stripe::setApiKey(variable_get('ms_stripe_secret_key', ''));

      // Try to charge the payment
      $customer = Stripe_Customer::retrieve($payment_profile->remote_id);
      $response = Stripe_Charge::create(
        array(
          'amount' => round($amount * 100), // amount in cents
          'currency' => strtolower($order->currency),
          'customer' => $customer->id,
          'description' => t('Modification - Order Number: @order_number', array('@order_number' => $order->order_number)),
        )
      );
      return TRUE;
    }
    catch (Exception $e) {
      drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
      drupal_set_message(check_plain($e->getMessage()), 'error');
      ms_core_log('ms_stripe', 'Following error received when processing card @stripe_error.', array('@stripe_error' => $e->getMessage()));
      return FALSE;
    }
  }
  else {
    drupal_set_message(t('The payment profile for this order was not able to be loaded.'), 'error');
    return FALSE;
  }
}
