<?php

function nycc_elect_menu() {
  $items = array();

  $items['nycc-elect-ballot'] = array(
    'description' => 'NYCC election.',
    'title' => 'NYCC Election',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_elect_ballot_form'),
    //'access arguments' => array('vote in nycc elections'),
    'access callback' => true,
  );
  $items['nycc-elect-ballot-draft'] = array(
    'description' => 'NYCC election.',
    'title' => 'NYCC Election',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_elect_ballot_form_draft'),
    //'access arguments' => array('vote in nycc elections'),
    'access callback' => true,
  );  

  $items['nycc-elect-vote-saved'] = array(
    'page callback' => 'nycc_elect_vote_saved',
    'type' => MENU_CALLBACK,
    'access arguments' => array('vote in nycc elections'),
  );

  $items['admin/settings/nycc-elect'] = array(
    'description' => 'NYCC election option settings.',
    'title' => 'NYCC Election Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_elect_admin_settings_form'),
    'access arguments' => array('administer nycc_elect'),
    //'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['nycc-elect-results'] = array(
    'description' => 'NYCC election results.',
    'page callback' => 'nycc_elect_results',
    'title' => 'NYCC Election Results',
    'type' => MENU_CALLBACK,
    'access arguments' => array('view nycc election results'),
  );

  $items['nycc-elect-voters'] = array(
    'description' => 'NYCC election voters.',
    'page callback' => 'nycc_elect_voters',
    'title' => 'NYCC Election Voters',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer nycc_elect'),
  );

  $items['nycc-elect-voters-roster'] = array(
    'description' => 'NYCC election voters roster.',
    'page callback' => 'nycc_elect_voters_roster',
    'title' => 'NYCC Election Voters Roster',
    'type' => MENU_CALLBACK,
    'access arguments' => array('view nycc election results'),
  );
  
  
  return $items;
}

function _nycc_voting_status() {
  if (!variable_get('nycc_elect_active', false))
    return -2;  // not active
  $s = strtotime(variable_get('nycc_elect_start_date', ''));
  $e = strtotime(variable_get('nycc_elect_end_date', ''));
  $n = time();

  if ($n < $s)
    return -1;  // too early
  if ($n > $e)
    return 1;   // too late
  return 0;     // voting allowed
}

function nycc_elect_get_reminder_msg() {
    return variable_get('nycc_elect_reminder_msg', '');
  }



  // check for already voted
  $q = db_query("select uid from nycc_elect_voters where uid = %d", $user->uid);
  $r = db_fetch_object($q);
  if ($r->uid) {
    $form['nycc_elect_instructions'] = array(
      '#value' => "You have already voted in this election. Thank you.",
    );
    return $form;
  }

//function nycc_elect_ballot_form(){
//  return nycc_elect_ballot_form(FALSE);
//}

function nycc_elect_ballot_form_draft(){
  return nycc_elect_ballot_form(TRUE);
}

function nycc_elect_ballot_form() {
  global $user;
  // check for logged in
  //var_dump($user);
  if ($user->uid == 0) {
    // $form['nycc_elect_instructions'] = array(
    //   '#value' => "You must be logged in to vote.",
    // );
    drupal_set_message("You must be logged in to vote.");
    drupal_goto("user", "destination=/nycc-elect-ballot");
    //return $form;
  }

  // check for permission
  //var_dump($user->roles);
  if (!in_array("paid member", $user->roles)) {
    $form['nycc_elect_instructions'] = array(
      '#value' => "You must be a paid member in order to vote.",
    );
    return $form;
  }


  // check for already voted
  if(!$draft) {
    $q = db_query("select uid from nycc_elect_voters where uid = %d", $user->uid);
    $r = db_fetch_object($q);
    if ($r->uid) {
      $form['nycc_elect_instructions'] = array(
        '#value' => "You have already voted in this election. Thank you.",
      );
      return $form;
    }
  
    if ($status = _nycc_voting_status()) {
      if ($status == -2) {
        $form['nycc_elect_instructions'] = array(
          '#value' => "Voting is not active at this time. Thank you.",
        );
      } else {
        $s = variable_get('nycc_elect_start_date', '');
        $e = variable_get('nycc_elect_end_date', '');
        $form['nycc_elect_instructions'] = array(
          '#value' => "Voting open from $s to $e. Thank you.",
        );
      }
      return $form;
    }    
  }


  $form['#redirect'] = 'nycc-elect-vote-saved';

  $form['nycc_elect_instructions'] = array(
	  '#type' => 'markup',
      '#value' =>  "<div>" . str_replace("MARKUP:", "", variable_get('nycc_elect_ballot_instructions', '')) . "</div>",
  );


  $lines = explode("\n", variable_get('nycc_elect_ballot', ''));
  $options = array();
  $cnt = -1;
  foreach ($lines as $line) {
    $l = trim($line);
    if (drupal_strlen($l)) {
      if (substr($l, 0, 1) == "*") {
        if (substr($l, 0, 7) == "*SELECT") {
          $gender = "";
          if (stripos($l, " MALE"))
            $gender = "AND ctp.field_gender_value = 'M'";
          if (stripos($l, " FEMALE"))
            $gender = "AND ctp.field_gender_value = 'F'";
          $sql = "SELECT ctp.field_first_name_value AS fname, ctp.field_last_name_value AS lname, u.name, u.uid, u.mail FROM {users} u, {users_roles} ur, {content_type_profile} ctp, {node} n WHERE ur.rid=3 AND ur.uid=u.uid AND u.status <> 0 AND n.nid=ctp.nid AND n.vid=ctp.vid AND n.uid=u.uid AND n.type='profile' $gender ORDER by 1, 2";
          $q = db_query($sql);
          while ($r = db_fetch_object($q)) {
            $options[$cnt][t($r->fname . " " . $r->lname)] = t($r->fname . " " . $r->lname);
          }
        } else {
          // add candidate - option
          if (substr($l, 0, 2) == "**") {
	          $candidate = t(trim(substr($l, 2)));
    	      $options[$cnt][$candidate] = $candidate;
			  $form["nycc_elect_position_". $name]['#default_value'] = $candidate;
          } else {
	          $candidate = t(trim(substr($l, 1)));
    	      $options[$cnt][$candidate] = $candidate;          
          }
        }  // not a query
      } else {
        // add position input or markup
        $cnt++;
        $name = substr(str_replace(array(' ',':','TEXT:','&','?','.',',','='), array('_','_','_','_','_','_','_','_',), $l), 0, 25);
        if (substr($l, 0, 7) == "MARKUP:") {
          //drupal_set_message(substr($l, 0, 7));
          $form["nycc_elect_position_markup_" . $cnt] = array(
            '#type' => 'markup',
            '#value' => "<div>" . str_replace("MARKUP:", "", $l) . "</div>",
          );
        } else if (substr($l, 0, 5) == "TEXT:") {
          $form["nycc_elect_position_". $name] = array(
            '#type' => 'textfield',
            '#title' => t(trim(str_replace("TEXT:", "", $l))),
          );
        } else {
          $options[$cnt] = array(t('Please select an option'));
          $form["nycc_elect_position_". $name] = array(
            '#type' => 'select',
            '#title' => t($l),
            '#options' => &$options[$cnt],
          );
        } // TEXT vs SELECT
      } // does not begin with a asterisk
    }  // non-blank lines
  }  // for
  if(!$draft) {
    $form['nycc_elect_vote'] = array(
      '#type' => 'submit',
      '#value' => t('Vote'),
      '#attributes' => array('class'=>'nycc-elect-vote')
    );
  }
  //dsm($form);
  return $form;
}

function nycc_elect_reset_submit($form, &$form_state) {
  // reset voting - submit button on settings to delete all voter and ballot records
  // handler and are you sure
  watchdog('nycc_elect', "inside nycc_elect_reset_submit");
  db_query("truncate table nycc_elect_votes");
  db_query("truncate table nycc_elect_voters");
  drupal_set_message("Election tables truncated.");
}

function nycc_elect_has_voted($uid = null) {
  global $user;
  if (!$uid)
    $uid = $user->uid;
  $q = db_query("select uid from nycc_elect_voters where uid = %d", $uid);
  if (db_fetch_object($q))
    return true;
  return false;
}

function nycc_elect_ballot_form_submit($form, &$form_state) {
  global $user;
  // check for already voted, avoid double submits
  if (nycc_elect_has_voted()) {
    drupal_set_message("You have already voted in this election. Thank you.");
    return;
  }
  foreach ($form_state['values'] as $name => $candidate) {
    if (!(strpos($name, "nycc_elect_position_") === false)) {
      if ($candidate !== "1") {
        $position = str_replace(array('nycc_elect_position_', ' ','&','?','.',',','='), array('','_','_','_','_','_','_',), $name);
        db_query("insert into nycc_elect_votes (position, candidate) values ('%s','%s')", $position, $candidate);
      }
    }
  }
  db_query("insert into nycc_elect_voters (uid) values (%d)", $user->uid);
}

function nycc_elect_ballot_form_validate($elements, &$form_state, $form_id = NULL) {
  watchdog('nycc_elect', var_export($form_state['values'],1));
  foreach ($form_state['values'] as $name => $candidate) {
    if (strpos($name, "nycc_elect_position_") !== false) {
      if ($candidate == '0') {
        $position = str_replace(array('nycc_elect_position_', ' ','&','?','.',',','='), array('','_','_','_','_','_','_',), $name);
        form_set_error($name, "Please select an option for ". str_replace('_', ' ', $position));
      }
    }
  }
}

function nycc_elect_vote_saved() {
  $output = "Thank you for voting.";
  return $output;
}

function nycc_elect_results() {
  $output = "<div>". (_nycc_voting_status() ? "Voting is closed or inactive." : "Voting is currently open.") . "</div>";
  $q = db_query("select position, candidate, count(*) as votes from nycc_elect_votes group by position, candidate order by position, votes DESC, candidate");
  $output .= "<ul class='elect-results'>";
  $last = "";
  $terminate = false;
  while ($r = db_fetch_object($q)) {
    if ($r->position != $last) {
      $last = $r->position;
      $position = $r->position;
      if ($terminate)
        $output .= "</ul>";
      $output .= "<li class='elect-results-position'><span>". str_replace('_',' ',$position) ."</span><ul>";
      $terminate = true;
    }
    $position = "&nbsp;";
    $output .= "<li class='elect-results-candidate'><span style='display:inline-block;width:200px;'>". $r->candidate ."</span><span class='elect-results-votes'>". $r->votes ."</span></li>";
  }
  $output .= "</ul></ul>";
  $output .= "<div class='elect-results-summary'>";
  $q = db_query("select count(*) as votes from nycc_elect_votes");
  $r = db_fetch_object($q);
  $output .= "<div class='elect-results-votes'>". $r->votes ." vote". ($cnt == 1 ? "" : "s") ."</div>";
  $q = db_query("select count(*) as voters from nycc_elect_voters");
  $r = db_fetch_object($q);
  $output .= "<div class='elect-results-voters'>". $r->voters ." voter". ($r->voters == 1 ? "" : "s") ."</div>";
  $output .= "</div>";
  return $output;
}

function nycc_elect_voters() {
  $output = "<div>". (_nycc_voting_status() ? "Voting is closed or inactive." : "Voting is currently open.") . "</div>";
  //$q = db_query("select n.title from nycc_elect_voters v, node n where n.type='profile' and n.uid = v.uid order by 1");
  $q = db_query("SELECT DISTINCT n.title, cp.field_first_name_value, cp.field_last_name_value, u.name, u.mail, v.uid FROM nycc_elect_voters v, node n, content_type_profile cp, users u WHERE n.type='profile' AND n.uid = v.uid AND u.uid=v.uid AND cp.nid = n.nid AND cp.vid = n.vid AND n.status<>0 AND u.status<>0 ORDER BY 3,2");
  $output .= "<ul class='elect-voters'>";
  while ($r = db_fetch_object($q)) {
       $output .= "<li class='elect-voter'><span>". $r->field_first_name_value .' '. $r->field_last_name_value ."</span></li>";
  }
  $output .= "</ul>";
  $output .= "<div class='elect-results-summary'>";
  $q = db_query("select count(*) as votes from nycc_elect_votes");
  $r = db_fetch_object($q);
  $output .= "<div class='elect-results-votes'>". $r->votes ." vote". ($cnt == 1 ? "" : "s") ."</div>";
  $q = db_query("select count(*) as voters from nycc_elect_voters");
  $r = db_fetch_object($q);
  $output .= "<div class='elect-results-voters'>". $r->voters ." voter". ($r->voters == 1 ? "" : "s") ."</div>";
  $output .= "</div>";
  return $output;
}


function nycc_elect_voters_roster() {
	header('Content-Type: text/csv; charset=utf-8');
	header('Content-Disposition: attachment; filename=data.csv');
	$output = fopen('php://output', 'w');

	fputcsv($output, array('First Name', 'Last Name', 'Has Voted'));
	$q = db_query("SELECT DISTINCT cp.field_first_name_value, cp.field_last_name_value, CASE WHEN v.uid IS NOT NULL THEN 'YES' ELSE '' END AS has_voted FROM users u inner join users_roles ur on ur.uid = u.uid AND rid=3 left outer join nycc_elect_voters v on u.uid=v.uid inner join node n on n.uid = u.uid AND n.type='profile' AND n.status<>0 inner join content_type_profile cp on cp.vid = n.vid WHERE u.status<>0  ORDER BY 2, 3");
	while ($row = mysql_fetch_assoc($q)) fputcsv($output, $row);
};

// form handler for admin settings
function nycc_elect_admin_settings_form() {
  $form['nycc_elect_instructions'] = array(
    '#value' => "<p>Set up an election by specifying the ballot, dates and reminders.  <a target='_blank'  href='/admin/user/permissions' title='Go to user permissions page'>User permissions</a> can be used to control which user roles can <a target='_blank' href='/nycc-elect-ballot' title='Go to ballot page'>cast ballots</a>, administrate elections, <a target='_blank' href='/nycc-elect-voters' title='Go to results page'>see who voted</a>, <a target='_blank' href='/nycc-elect-results' title='Go to results page'>view results</a> and <a target='_blank' href='/nycc-elect-voters-roster' title='membership roster'>download a membership roster</a>.</p>",
  );

  $form['nycc_elect_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Voting and messages active.'),
    '#default_value' => variable_get('nycc_elect_active', false),
    '#description' => t('Allow or disallow voting and reminders based on start and end dates.'),
  );

  $form['nycc_elect_ballot'] = array(
    '#type' => 'textarea',
    '#required' => true,
    '#title' => t('Positions and Candidates'),
    '#default_value' => variable_get('nycc_elect_ballot', "President\n*Bert\n*Ernie\nVice President\n*Jack\n*Jill\n"),
    '#description' => t('Wiki-style markup for a list of positions and candidates. One item per line, asterisks in front of candidates.'),
  );

  $form['nycc_elect_ballot_instructions'] = array(
    '#type' => 'textarea',
    '#title' => t('Ballot instructions'),
    '#default_value' => variable_get('nycc_elect_ballot_instructions', 'Please select a option for each item.'),
    '#description' => t('Enter any instructions you wish to display at the top of the election ballot.'),
  );

  $form['nycc_elect_start_date'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#title' => t('Start date'),
    '#default_value' => variable_get('nycc_elect_start_date', date("m/d/Y")),
    '#description' => t('Starting date for election. No votes accepted before this date/time. Format is mm/dd/yyyy.'),
  );

  $tomorrow  = mktime(0, 0, 0, date("m")  , date("d")+1, date("Y"));
  $form['nycc_elect_end_date'] = array(
    '#type' => 'textfield',
    '#required' => true,
    '#title' => t('End date'),
    '#default_value' => variable_get('nycc_elect_end_date', date("m/d/Y", $tomorrow)),
    '#description' => t('Closing date for election. No votes accepted after this date/time. Format is mm/dd/yyyy.'),
  );

  $form['nycc_elect_reminder_msg'] = array(
   '#type' => 'textarea',
   '#title' => t('Reminder message'),
   '#default_value' => variable_get('nycc_elect_reminder_msg', "Don't forget to <a href='/nycc-elect-ballot'>cast your ballot</a> for NYCC elections!"),
   '#description' => t('Enter reminder message that is displayed when eligable voters sign in.  Leave blank for no reminder'),
  );

  $form['nycc_elect_reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset election data'),
    '#weight' => 10,
    '#submit' => array('nycc_elect_reset_submit'),
  );

  return system_settings_form($form);
}

// form validate and submit handlers for admin settings form
function nycc_elect_admin_settings_form_validate($form, &$form_state) {
  // check for valid dates
  $s = strtotime($form_state['values']['nycc_elect_start_date']);
  $e = strtotime($form_state['values']['nycc_elect_end_date']);
  if (!$s)
    form_set_error('nycc_elect_start_date', t('Invalid start date.'));
  if (!$e)
    form_set_error('nycc_elect_end_date', t('Invalid end date.'));
  if ($s && $e) {
    if ($s >= $e) {
      form_set_error('nycc_elect_start_date', t('Start date must be before ending date.'));
    }
  }
}

function nycc_elect_perm() {
  return array('administer nycc_elect', 'vote in nycc elections', 'view nycc election results');
}

function nycc_elect_user($op, &$edit, &$account, $category = NULL) {
  //dsm($category);
  global $user;
  /*
  if ((($op == "login") || ($op == "view")) && !_nycc_voting_status() && !nycc_elect_has_voted() && ($user->uid == $account->uid)) {
    $msg = variable_get('nycc_elect_reminder_msg', '');
    if (strlen($msg))
      drupal_set_message($msg);
  }
  */
}

function nycc_elect_init() {
  if (!_nycc_voting_status() && !nycc_elect_has_voted() && ($user->uid == $account->uid)) {
    $msg = variable_get('nycc_elect_reminder_msg', '');
    if (strlen($msg))
      drupal_set_message($msg, 'status', FALSE);
  }
}



?>