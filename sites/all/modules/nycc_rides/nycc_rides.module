<?php

/*
TODO List:

1) use leading underscore or other naming convention for all non-hook functions so as to not avoid unintentional overrides 

2) move all non-hook functions to an include file (e.g., nycc_rides.utils.inc)

3) run this through drupal coder module check

6) add back Event Logging
7) add back ride rosters
8) add back ride reports
11) Fix how to handle multiple dates
18) fix SQL in nycc_rides_ride_roster_email
22) fix nycc_rides_ride_overlaps_user
23) fix viewRideSignups
27) fix nycc_rides_approve_rides and add javascript inline editing & ensure event is fired upon status change
28) toggle ride location so that selecting from other... shows text box
29) Add Rides & Waitlists buttons to user Profile
*/

/*TODO LIST WHEN DEPLOYING TO PROD
 *1) add field to control 10-day waitlist (field_ride_open_signup_days)
 *2) INSTALL WYSIWYG Module
 *3) create new leaders field (field_ride_current_leaders) & run migrate script
 *3a) change rides content type ->old leader's field is not required
 *4) script to set 10-days signup limit
 *
 */

//HOOK Functions
function nycc_rides_init() {
  variable_set("nycc_rides_debug", TRUE);
}

function nycc_rides_permission() {
  return array(
    'administer nycc rides' => array(
      'title' => t('administer nycc rides'),
      'description' => t('administer nycc rides'),
        ),
    'approve nycc rides' => array(
      'title' => t('approve nycc rides'),
      'description' => t('approve nycc rides'),
        )   
    );
}

function nycc_rides_menu() {
  $items = array();

  $items['admin/config/nycc/rides'] = array(
      'title' => 'NYCC Rides module settings',
      'description' => 'Settings for NYCC Rides Module',
      'page callback' => 'drupal_get_form',
      'file' => 'nycc_rides_admin.inc', 
      'access arguments' => array('administer nycc rides'),
      'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
      'page arguments' => array('nycc_rides_admin'),  
  );

  $items['nycc-update-ride-status-js/%'] = array(
    //'page arguments' => array(1),
    'page callback' => 'nycc_rides_update_ride_status_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-update-ride-type-js/%'] = array(
    //'page arguments' => array(1),
    'page callback' => 'nycc_rides_update_ride_type_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-existing-rides-js'] = array(
    'page callback' => 'nycc_rides_existing_rides_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used by ajax buttons
  $items['nycc-ride-participants-js'] = array(
    'page callback' => 'nycc_rides_ride_participants_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used by ajax buttons
  $items['nycc-ride-waiters-js'] = array(
    'page callback' => 'nycc_rides_ride_waiters_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used for printpdf
  $items['nycc-riders-roster-pdf'] = array(
    'page callback' => 'nycc_rides_output_riders_roster_pdf',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-rides-report'] = array(
    'page callback' => 'nycc_rides_report_leaders',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Ride Reports'
  );

  $items['nycc-rides-report/leaders'] = array(
    'page callback' => 'nycc_rides_report_leaders',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Leaders'
  );

  $items['nycc-rides-report/riders'] = array(
    'page callback' => 'nycc_rides_report_riders',
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Riders'
  );

    $items['approve-rides'] = array(
    'page callback' => 'nycc_rides_approve_rides',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['node/%/cancel'] = array(
    'title' => 'Cancel Ride',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_rides_ride_cancel_confirm', 1),
    'access callback' => TRUE,
    'access callback' => 'nycc_rides_access',
    'access arguments' => array(2, 1),
    'type' => MENU_CALLBACK,
  );

  $items['node/%/join'] = array(
    'title' => 'Join Ride',
    'page callback' => 'nycc_rides_join_ride',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  
  //WORKING
  $items['node/%/approve'] = array(
    'title' => 'Join Ride',
    'page callback' => 'nycc_rides_approve_ride',
    'access callback' => TRUE,
    'access callback' => 'nycc_rides_access',
    'access arguments' => array(2, 1),
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  //WORKING
  $items['node/%/withdraw'] = array(
    'title' => 'Withdraw From Ride',
    'page callback' => 'nycc_rides_withdraw_from_ride',
    'access callback' => TRUE,
    //'access callback' => 'nycc_rides_access',
    //'access arguments' => array(2, 1),
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  
  //$items['nycc-approve-ride/%'] = array(
  //  //'page arguments' => array(1),
  //  'page callback' => 'nycc_rides_approve_ride',
  //  'type' => MENU_CALLBACK,
  //  'access callback' => TRUE,
  //);

  
  //$items['nycc-join-ride'] = array(
  //  'page callback' => 'nycc_rides_join_ride',
  //  'type' => MENU_CALLBACK,
  //  'access callback' => TRUE,
  //);
  //
  //$items['nycc-withdraw-from-ride'] = array(
  //  'page callback' => 'nycc_rides_withdraw_from_ride',
  //  'type' => MENU_CALLBACK,
  //  'access callback' => TRUE,
  //);

  // move these to views
  /*
  $items['user/%user_uid_optional/myrides'] = array(
    'page callback' => 'nycc_rides_report_rides',
    'type' => MENU_LOCAL_TASK,
    //'access callback' => TRUE,
    'access callback' => 'nycc_rides_report_rides_access',
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Rides',
    'page arguments' => array(1),
  );

  $items['user/%user_uid_optional/mywaitlists'] = array(
    'page callback' => 'nycc_rides_report_waitlists',
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Waitlists',
    'page arguments' => array(1),
  );

  $items['user/%user_uid_optional/myleads'] = array(
    'page callback' => 'nycc_rides_report_leads',
    'type' => MENU_LOCAL_TASK,
    //'access callback' => TRUE,
    'access callback' => 'nycc_rides_report_leads_access',
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Leads',
    'page arguments' => array(1),
  );
  
  */

//   $items['node/%/attend'] = array(
//     'title' => 'Ride Attendance and Notes',
//     'page callback' => 'drupal_get_form',
//     'page arguments' => array('nycc_ride_attend', 1),
//     'access callback' => TRUE,
//     //'access callback' => 'nycc_access',
//     //'access arguments' => array('attend', 1),
//     'type' => MENU_CALLBACK,
//   );

  return $items;
}  // nycc_rides_menu

function nycc_rides_cron() {
// watchdog('cron', 'starting nycc_cron');
// nycc_ride_reminder(REQUEST_TIME);
// nycc_ride_overlaps_reminder();
// nycc_ride_roster_email(REQUEST_TIME, 1);
// watchdog('cron', 'finished nycc_cron');
}

function nycc_rides_node_view($node, $view_mode = NULL, $langcode = NULL) {
  global $user;
  if ($node->type == 'rides') {
    rules_invoke_event('nycc_rides_ride_is_viewed', $user, $node);
  }
} // nycc_rides_node_view

function nycc_rides_node_update($node) {
  $r_debug =   variable_get("nycc_rides_debug", TRUE);
  if ($node->type == 'rides') {
    if($node->is_new) {
      //if is_new then status will either be submitted or approved
      global $user;
      if ($ride_status == 'Submitted') {
        rules_invoke_event('nycc_rides_ride_is_submitted', $user, $node);
      } else {
        rules_invoke_event('nycc_rides_ride_is_approved', $user, $node);
      }
    } else if((arg(3)=="resubmit") && (nycc_rides_get_ride_status($node) =="Cancelled")) {
        nycc_rides_update_ride_status($node, "Submitted");
    } // new

    if (in_array($node->field_ride_status['und'][0]['value'], array('Submitted', 'Revised')))
      drupal_set_message(filter_xss(t("Please Note: If your ride includes the use of a train you must also complete a <a href=\"https://docs.google.com/forms/d/1-KMVUUHflXyxes6ZFKPqTK54-FKvQ9V2-ympcYZ8b0w/viewform\" target=\"_blank\">Train Request</a> here." )));

    if (in_array($node->field_ride_status['und'][0]['value'], array('Submitted', 'Revised')) && !nycc_rides_can_approve())
      drupal_set_message("Please Note: Approval may take 24 to 48 hours (usually, we get to it sooner).");
    
  } // rides
} // nycc_rides_node_update

function nycc_rides_node_validate($node, $form = NULL, $form_state = NULL) {
  if ($node->type == 'rides') {
    global $user;
    // TODO: check for dates in future for non-approved rides

    // check for spots > riders count
    $num_riders = nycc_rides_count_riders($node);
    $num_spots = $node->field_ride_spots['und'][0]['value'];
    $num_waiters = nycc_rides_count_waiters($node);
    $numleaders = nycc_rides_count_leaders($node);
    //dpm(array('riders'=>$num_riders,
    //    'spots'=>$num_spots,
    //    'waiters'=>$num_waiters
    //    ));
    if ($num_spots > 0) {
      if ($num_spots < $num_riders)
        form_set_error('field_ride_spots', "The number of spots can not be less than the number of currently signed up riders (" . $num_riders . ").");

      if (!nycc_rides_ride_allows_signups($node))
        form_set_error("field_ride_spots", "Max. Participants must be blank when Sign-ups is 'No signups or waiting list'");

      if (($num_waiters > 0) && (!nycc_rides_ride_allows_signups($node)))
        form_set_error("field_ride_signups", "There are people on the waiting list; please select 'Signups with waiting list' or increase the number of Max. Participants.");

    }
    if($numleaders == 0) {
      form_set_error("field_ride_current_leaders", "You must have at least one leader.");
    }

  } //if rides
} // nycc_rides_node_validate

function nycc_rides_node_presave($node) {
  //dpm($node);
  $r_debug =   variable_get("nycc_rides_debug", TRUE);
  if ($node->type == 'rides') {
       
    if(!nycc_field_has_value($node->field_ride_open_signup_days))
      $node->field_ride_open_signup_days['und'][0]['value'] = variable_get("nycc_rides_days_before_ride", 10);
    
    // set dow and timestamp
    $node->field_ride_dow['und'][0]['value'] = date("l", nycc_rides_get_ride_time($node));

    //if ((arg(0) != "nycc" && arg(1) != "inbound") ||  (arg(0) != "node" && arg(2) != "approve") ) // if edit is not coming from inbound email processor
    if (arg(2) != "approve") {
      if (!nycc_rides_can_approve() && in_array($node->field_ride_status['und'][0]['value'] , array('Approved', 'Submitted')) &&
          nycc_rides_ride_has_changed($node)) {
          $node->field_ride_status['und'][0]['value'] = 'Revised';
          rules_invoke_event('nycc_rides_ride_is_revised', $user, $node, nycc_rides_last_approved_revision($node));
      }
    }

    //remove leaders/riders/waiters that are listed twice
    nycc_rides_clean_up_participants($node);

    $num_riders = nycc_rides_count_riders($node);
    $num_waiters = nycc_rides_count_waiters($node);
    $num_spots = 0;
    try {
      @$num_spots = $node->field_ride_spots['und'][0]['value'];
    } 
    catch (Exception $e) {
      $node->field_ride_spots = array('und' => array(0 => array('value' => 0)));
    }

    if (!($num_spots > 0)){
      $node->field_ride_signups['und'][0]['value'] = "No signups or waiting list";
      if ($r_debug)
        watchdog("nycc_rides", "Presave: Spots is 0: Setting Ride Signups to No signups or waiting list for Ride: %title", array('%title' => $node->title), WATCHDOG_INFO);
    }

    if (nycc_rides_ride_allows_signups($node) && ($num_spots > $num_riders) && ($num_waiters > 0)) {
      $num_new_spots = min($num_spots - $num_riders, $num_waiters);
      for ($i = 0; $i < $num_new_spots; $i++) {
        $waiter = array_shift($node->field_ride_waitlist['und']);
        $node->field_ride_current_riders['und'][] = array("uid" => $waiter['uid']);
        if ($r_debug) 
          watchdog("rides", "user: (%uid) auto joined from ride waitlist: %nid (%rname)", array( '%uid' => $waiter['uid'], '%nid'=> $node->nid, '%rname' => $node->title), WATCHDOG_INFO);
        rules_invoke_event('nycc_rides_member_joins_from_waitlist', user_load($waiter['uid']), $node);
        //TODO: Add this back once everything else is working
        //nycc_rides_log_action($node, $waiter['uid'], "Auto-Join From Waitlist");
      }
      drupal_set_message(check_plain($num_new_spots ." ". ($num_new_spots == 1 ? "person" : "people") ." on waitlist moved to participant list."));
    }
  }
} // nycc_rides_node_presave

function nycc_rides_node_prepare($node) {
  global $user;
  
  // handle node/add/relist/%node by copying fields from %node to new node 
  if (arg(3) == "relist")  {    
    $onode = node_load(arg(4));

    if ($onode && $onode->type=='rides') {
      _nycc_rides_copy_ride($onode, $node);
      
      // change leaders to current user
      $node->field_ride_current_leaders['und'][0]['uid'] = $user->uid;
      $node->field_ride_status['und'][0]['value'] = "Pending";
    } // if onode rides
    
    drupal_set_message(check_plain("This is a re-listing of ". $node->title . ".  You are set as the leader for this ride."));
    drupal_set_message(check_plain("Please be sure to select a new date for the ride."));
  }
  
  if ($node->type == 'rides' && arg(2) == 'edit') {
    if (!nycc_rides_can_approve()) {
      drupal_set_message(filter_xss("<b>Please Note:</b> If you modify key fields on this ride it will be taken offline until the Ride Coordinator has had a chance to review the changes."));
      drupal_set_message(filter_xss("While we make every effort to approve it  a timely manner, it could take up to 48 hours for the change to be approved."));
      drupal_set_message(filter_xss("If you must make changes to the ride within 48 hours of the ride start, we'd suggest that your reach out to <a href='mailto:" . $node->field_ride_select_level['und'][0]['value'] . "-rides@nycc.org?subject=Urgent: I need to make changes to a ride!'>" . $node->field_ride_select_level['und'][0]['value'] . "-rides@nycc.org</a> to confirm that they can approve in a timely manner <b>before you make the changes</b>"));      
    }//can't approve
  } // ride edit
} // nycc_rides_node_prepare

function nycc_rides_form_alter(&$form, &$form_state, $form_id) {
   if ($form_id == 'rides_node_form') { 
     //dpm($form);
   
    $op = (arg(1) == 'add') ? 'add' : ((arg(2) == 'edit') ? 'edit' : 'noop');
    $can_approve = nycc_rides_can_approve();
    if (arg(1) == 'add')
      drupal_set_title('Submit a Ride');
    else
      drupal_set_title('Revise a Ride: <small>' . $form['#node']->title . '</small>',  PASS_THROUGH);

    $status = nycc_rides_get_ride_status($form['#node']);
    $action = !nycc_rides_can_approve() && in_array($status, array('Approved', 'Cancelled', 'Flagged')) ? "Re-submit" : "Submit";
    $form['actions']['submit']['#value'] = $action; 
    
    // note: 'group_rides_htabs' key does not yet exist yet. why?
    // dpm($form['group_rides_htabs']['group_ride_participants']['group_rides_participants']);
           
    // add handlers for additional dates
    $form['#submit'][] = '_nycc_rides_additional_dates_submit';
    $form['#validate'][] = '_nycc_rides_additional_dates_validate';
    $form['#after_build'] = array('_nycc_rides2_custom_form_uidatepicker');
    
    $form['#cache'] = false;

  } // rides_node_form 
} // nycc_rides_form_alter

function nycc_rides_block_info() {
  //TODO: IS THIS NEEDED?
  $blocks[0]['info'] = t('NYCC Ride Participants');
  $blocks[0]['cache'] = 'BLOCK_NO_CACHE' ;
  $blocks[1]['info'] = t('NYCC Ride Waiting List');
  $blocks[1]['cache'] = 'BLOCK_NO_CACHE' ;
  $blocks[2]['info'] = t('Ride Coordinators Email');
  $blocks[2]['cache'] = 'BLOCK_CACHE_PER_PAGE';
  return $blocks;
}

function nycc_rides_block_configure($delta = 0) {
  return $form;
}

function nycc_rides_block_save($delta = 0, $edit = array()) {
    break;
} 

function nycc_rides_block_view($delta = 0) {
  //TODO: IS THIS NEEDED?

  if ($delta == 0) {
    $block['content'] = nycc_rides_output_ride_participants();
    $block['subject'] = drupal_strlen($block['content']) ? t('Ride Participants') : "";
  }
  if ($delta == 1) {
    $block['content'] = nycc_rides_output_ride_waitlist();
    $block['subject'] = drupal_strlen($block['content']) ? t('Ride Waiting List') : "";
  }
//       if ($delta == 2) {
//         $block['subject'] = t('Group Links');
//         $block['content'] = nycc_output_group_links_block();
//       }
//       if ($delta == 3) {
//         $block['subject'] = t('Group Ride Withdrawals');
//         $block['content'] = nycc_output_group_ride_withdrawals_block();
//       }
  if ($delta == 2) {
    $block['subject'] = t('Ride Coordinators Email');
    $block['content'] = nycc_rides_output_ride_coordinators_email_block();
  }
  return $block;
} //nycc_rides_block_view

// END HOOK Functions

// CALLBACKS

function _nycc_rides_additional_dates_submit($form, &$form_state) {
  // create rides for additional dates based on newly submitted ride
  // why is this the only entry in values?
  //dpm($form);
  $additional_dates = $form_state['values'];
  if (drupal_strlen($additional_dates)) {
    $adsarr = explode(",", $additional_dates);
    if (is_array($adsarr)) {
      foreach ($adsarr as $d) {
        $ds = strtotime($d);
        watchdog('nycc_node_update', "about to clone ride to date $d", array(), WATCHDOG_INFO);
        _nycc_rides_clone_ride($form['#node'], $d);
        drupal_set_message("Additional ride created for $d ($ds)");
      } // for
      if (!$errors)
        form_set_value($form['additional_dates'], $additional_dates, $form_state);  
    } // if array
  } // if additional dates
} // _nycc_rides_additional_dates_submit

function _nycc_rides_additional_dates_validate($form, &$form_state) {
  if (!isset($_POST['additional_dates'])) {
    drupal_set_message('no $_POST["additional_dates"]');
    return;
  }
  
  $additional_dates = $_POST['additional_dates'];
  $additional_dates = check_plain($additional_dates);
  $additional_dates = trim($additional_dates);
  $additional_dates = str_replace(' ', '', $additional_dates);
  
  if (drupal_strlen($additional_dates)) {
    // parse dates, validate each one
    // TODO: remove dups and dup of current node date
    $errors = array();
    $adsarr = explode(",", $additional_dates);
    if (is_array($adsarr)) {
      foreach ($adsarr as $d) {
        $ds = strtotime($d);
        if (!$ds)
          $errors[] = "$d ($ds)";
      } // for
      if (count($errors)) {
        //form_set_value($form['additional_dates'], $_POST['additional_dates'], $form_state);
        $errstr = theme('item_list', array('items' => $errors));
        form_set_error('additional_dates', "Invalid additional dates: $errstr");
      }
      else {
        if (array_key_exists('additional_dates', $form))
          form_set_value($form['additional_dates'], $additional_dates, $form_state);  
      } // count
    } // if array
  } // if additional dates
  else {
    drupal_set_message('$_POST["additional_dates"] has no length');    
  }
  
  //dpm($additional_dates);
  
} // _nycc_rides_additional_dates_validate

//RIDE ROSTER RELATED FUNCTIONS
function nycc_rides_output_riders_roster_pdf($node = NULL) {
  // used with printpdf
  //global $theme_path;
  if ($node && is_object($node))
  $nid = $node->nid;

  if (!$nid)
    $nid = ($_POST['nid'] > 0) ? $_POST['nid'] : ((arg(2) > 0) ? arg(2) : arg(1));

  if (is_numeric($nid) && ($nid > 0)) {
    $ride = node_load( $nid);
    if ($ride) {
      // DONE: change to timestamp
      //drupal_set_title($ride->title ."-". substr($ride->field_date_ride_first['und'][0]['value'], 0, 10));
      $datestr = date('Y-m-d', $ride->field_timestamp['und'][0]['value']);
      drupal_set_title($ride->title ."-". $datestr);
      $output .= views_embed_view('rides_detail_on_riders_list', 'block_1', $nid, $nid);
      // display waiver
      $waiver = node_load('45438');
      if ($waiver)
        $output .= $waiver->body;
      // display ride participants
    //TODO:CONFIRM THAT $leaders works! May need to wrap in nycc_field_get_value()
      $leaders = nycc_refs2ids(nycc_field_get_value($ride->field_ride_current_leaders));
      $riders = nycc_refs2ids(nycc_field_get_value($ride->field_ride_current_riders));
      $output .= views_embed_view('ride_participants', 'block_2', implode("+", array_merge($leaders, $riders)));
      $waiters = nycc_refs2ids(nycc_field_get_value($ride->field_ride_waitlist));
      $output .= views_embed_view('ride_participants', 'block_3', implode("+", $waiters));
      //$output .= var_export(implode("+", $waiters),1);
    }
  }
  return $output;
}

function nycc_rides_ride_roster_email($timestamp, $hrs) {
  //TODO FIX THIS SQL. Using Old Table Names
  //TODO FIX THIS SQL. Assumes leader is Node Reference. New field is user reference

//This function accepts a timestamp (generally REQUEST_TIME) and an hours interval and generates an email to the leaders of rides starting between those intervals
//NOTE: It has a hard coded action ID

  $rr_debug = TRUE;
  $action_id = 5;  // 5 is the tokenized email action for roster emails

  $sql=<<<EOS
  SELECT t.entity_id AS nid, u.uid
  FROM
  {users} u,
  {field_data_field_ride_timestamp} t,
  {node} n 
  WHERE
  n.nid = t.entity_id AND 
  n.vid = t.revision_id AND
  n.uid = u.uid AND 
  (t.field_ride_timestamp_value BETWEEN from_unixtime($timestamp) AND DATE_ADD(NOW(), INTERVAL $hrs HOUR))
EOS;
  if ($rr_debug ) watchdog("nycc-ride_roster", "SQL is " .  $sql, array(), WATCHDOG_NOTICE);
  $ride_count = 0;
  $q = db_query($sql);
    while ($row = db_fetch_object($q)) {
      $ride = node_load($row->nid);
      $acct = user_load($row->uid);

      if ( ($ride) && ($acct) ) {
        $ride_count++;
          $cp = profile2_load_by_user($acct->uid, "profile");
          if ($cp) {
            if ($cp->field_ride_rosters['und'][0]['value'] != "false") {
              $context = array('hook' => 'cron', 'op' => 'send', 'node' => $ride, 'user' => $acct);
              actions_do($action_id, $acct, $context);
        if ($rr_debug ) watchdog("nycc-ride_roster", $acct->name . " sent a roster for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>");
            } else {
            if ($rr_debug ) watchdog("nycc-ride_roster", $acct->name . " skipping roster for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>");
            }
          } else {// if cp
            watchdog("nycc-ride_roster", "Could not load profile for user: " . $acct->uid, array(), WATCHDOG_WARNING) ;
          }
      }  else  { //no ride or user
        watchdog("nycc-ride_roster", "Could not load Ride: " . $row->nid . " or User: " . $row->nid, array(), WATCHDOG_WARNING) ;
      }
    }  // while
    if($ride_count > 0) {
      if ($rr_debug ) watchdog("nycc-ride_roster", $ride_count . " rides found starting within " . $hrs . " hours" , array(), WATCHDOG_NOTICE) ;
    } else {
    if ($rr_debug ) watchdog("nycc-ride_roster", "No rides found starting within " . $hrs . " hours", array(), WATCHDOG_NOTICE);
    }
}

function nycc_output_riders_roster_html($nid = NULL) {
//This function is used by a custom token to generate a roster to be emailed
//NOTE: It contains hardcoded view name and display IDs

  $rr_debug = TRUE;

   $view_name = "ride_participants";
  $display_name = "block_4";

  if (is_object($nid)) {
    $ride = $nid;
      $nid = $ride->nid;
  } elseif (is_numeric($nid) && ($nid > 0))  {
       $ride = node_load( $nid);
   }
    if ($ride) {
        $leaders = nycc_refs2ids($ride->field_ride_current_leaders);
        $riders = nycc_refs2ids($ride->field_ride_current_riders);
        $waiters = nycc_refs2ids($ride->field_ride_waitlist);
        $roster = array(implode("+", array_filter(array_merge($leaders, $riders, $waiters))));

//         if ($rr_debug ) watchdog("nycc-ride_roster", "Roster for ride: " . $nid . " is: " . implode("+", array_filter(array_merge($leaders, $riders, $waiters))) , array(), WATCHDOG_NOTICE);
 //        dpm(array_filter(array_merge($leaders, $riders, $waiters)));

      $view = views_get_view($view_name);
      if($view){

      global $user;
      $original_user = $user;
      $old_state = session_save_session();
      session_save_session(FALSE);
      $user = user_load(1);   // admin

        $view->hide_admin_links=TRUE;

        $output = $view->preview($display_name, $roster);

      $user = $original_user;
      session_save_session($old_state);
        return $output;
      } else { //coulnd't love view
        watchdog("nycc-ride_roster", "Could not load View: " . $view_name . " from function nycc_output_riders_roster_html", array(), WATCHDOG_ERROR) ;
      }

  } else { //no ride loaded
     watchdog("nycc-ride_roster", "Could not load Ride: " . $nid . " from function nycc_output_riders_roster_html", array(), WATCHDOG_ERROR) ;
   }
 }


//END RIDE ROSTER RELATED FUNCTIONS


//Access Related Functions
function nycc_rides_report_rides_node_access() {
  global $user;
  $acctid = arg(1);
  //dpm(get_defined_vars());
  if (($user->uid == $acctid)
        || in_array("administer", $user->roles)
        || in_array("board members", $user->roles)
        || user_access('administer users')
        || in_array("paid member", $user->roles) )
    return TRUE;
  return FALSE;
}

function nycc_rides_report_leads_node_access() {
  global $user;
  $acctid = arg(1);
  //dpm(get_defined_vars());
  if (($user->uid == $acctid)
      || in_array("administer", $user->roles)
      || in_array("board members", $user->roles)
      || in_array("paid member", $user->roles)
      || user_access('administer users'))
    return TRUE;
  return FALSE;
}

//only works for node types
function nycc_rides_access($op, $node, $account = NULL) {
    global $user;
    if (!$account)
      $account = $user;
      
    $ride = node_load($node);
    if (!is_object($ride))
      return FALSE;

  // allow any leader to edit rides
  if (($op == 'update' || $op == 'cancel' || $op == 'resubmit') && $ride->type == 'rides'){
    return nycc_rides_can_modify_ride($ride, $account);
  }
  if ($op == 'join' && $ride->type == 'rides') {
    return in_array('paid member', $account->roles) ;
  }
  if ($op == 'withdraw' && $ride->type == 'rides') {
    return in_array('paid member', $account->roles) ;
  }
  if ($op == 'approve' && $ride->type == 'rides') {
    return nycc_rides_can_approve($account) ;
  }
}

//RIDE RELATED FUNCTIONS

function nycc_rides_join_ride($nid) {
//TODO: WHY IS THIS GETTING CALLED TWICE???

  if ($nid==null)
      $nid = $_POST["nid"];

  if ($nid==null) {
    watchdog("nycc_rides", "nycc_rides_join_ride - no NID was passed. Cancelling function.", array(), WATCHDOG_WARNING);
    drupal_set_message(check_plain("nycc_rides_join_ride: This operation could not be completed. No Ride ID was passed."),"error");
    drupal_goto("<front>");
    return;
  }

  global $user;
  $user_uid = $user->uid;

  //Checking User Access
  $user_access = in_array("paid member", $user->roles);
  if ($user_access != 1) {
    drupal_set_message(check_plain("Error! You must be a paid member to join this ride.", "error"));
    drupal_goto("node/$nid");
  }
  
  $joined_flag = 0;
  $ride = node_load($nid);

  if (!is_object($ride)){
    watchdog("nycc_rides", "nycc_rides_join_ride - unable to load ride %nid", array('%nid'=>$nid), WATCHDOG_WARNING);
    drupal_set_message(check_plain("nycc_rides_join_ride: unable to load ride: $nid", "error"));
    drupal_goto("node/$nid");
  }

  $ride_status = nycc_rides_ride_should_be_enabled($ride, $user);

  if($ride_status['value'] == false){
    watchdog("nycc_rides", "nycc_rides_join_ride - User %uid was prevented from joining ride %nid. Reason: %reason",
             array('%uid'=>$user_uid, '%nid'=>$nid, '%reason'=>$ride_status['reason']),
             WATCHDOG_WARNING);

    if($ride_status['display_msg']){
      drupal_set_message(check_plain("Warning: You can not join this ride. Reason: ". $ride_status['reason'] , "error"));
    }
    drupal_goto("node/$nid");
  }
  if(!nycc_has_required_profile_info($user)) {
    drupal_set_message("Please update your Emergency Contact No and Name (required for ride signup).");
    drupal_goto("user/" . $user->uid . "/edit/profile", array('query'=>drupal_get_destination()));
  }  

  $open_spots = nycc_rides_get_ride_spots($ride); //100 = no limit, -100 = no signup, 0= no spots, >0 = available spots
  switch ($open_spots) {
    case -100:
        //no signups for this ride
      drupal_set_message(check_plain("You can not signup for this ride. This ride has no signups.", "warning"));
      break;

    case 0:
        //signups are enabled but no spots


          //joining a ride for logged in user
      if ( nycc_field_has_value($ride->field_ride_waitlist)){
        $ride->field_ride_waitlist['und'][]['uid'] = $user_uid;
      } else {
        $ride->field_ride_waitlist['und'][0]['uid'] = $user_uid;
      }

      //$ride->field_ride_additional_dates['und'][0]['value'] = "";
      node_save($ride);

        //TODO: Add back when everything is working
        //adding event logging
        //nycc_log_action($ride, $user_uid, "Join A Ride");

      drupal_set_message(check_plain("You have joined this ride's waitlist."));
      watchdog("rides", "user: %uid (%uname) joined waitlist: %nid (%rname)",
                 array('%uid'=> $user->uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title),
                 WATCHDOG_INFO);
          
      //fire rules
      rules_invoke_event('nycc_rides_member_joins_waitlist', $user, $ride);
      break;

    default:
      //signups are enabled and spots are available so let the user join
      //joining a ride for logged in user
      if (nycc_field_has_value($ride->field_ride_current_riders)){
        $ride->field_ride_current_riders['und'][]['uid'] = $user_uid;
      } else {
        $ride->field_ride_current_riders['und'][0]['uid'] = $user_uid;
      }
        
      //$ride->field_ride_additional_dates['und'][0]['value'] = "";
      node_save($ride);
              
      //fire the rules
      rules_invoke_event('nycc_rides_member_joins_ride', $user, $ride);
      
      
      //TODO: Add back when everything is working
      //adding event logging
      //nycc_log_action($ride, $user_uid, "Join A Ride");        

      
      watchdog("rides", "user: %uid (%uname) joined ride: %nid (%rname)",
                 array('%uid'=> $user->uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title),
                 WATCHDOG_INFO);
      break;
  } // end switch 
  drupal_goto("node/$nid");
}

function nycc_rides_withdraw_from_ride($nid=null) {
  $ride = nycc_rides_get_ride_object($nid);
  if (!$ride) {
    watchdog("nycc_rides", "nycc_rides_withdraw_from_ride - no NID was passed. Cancelling function.", array(), WATCHDOG_WARNING);
    drupal_set_message(check_plain("Warning: This operation could not be completed. No Ride ID was passed.", "error"));
    drupal_goto("<front>");
    return;
  }

  global $user;
  $user_uid = $user->uid;

  $was_joined = FALSE;
  $current_riders = nycc_field_get_value($ride->field_ride_current_riders);
  if(!empty($current_riders)) {
    foreach($current_riders as $ndx => $val) {
      if ($val['uid'] == $user_uid) {
        unset($ride->field_ride_current_riders['und'][$ndx]);

        watchdog("rides", "user: %uid (%uname) withdrew from ride: %nid (%rname)",
                 array('%uid'=> $user_uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title),
                 WATCHDOG_INFO);

        $was_joined = TRUE;
        //$ride->field_ride_additional_dates['und'][0]['value'] = "";
        node_save($ride);

        nycc_rides_log_action($ride, $user_uid, "Withdraw From Ride");          
          
        //fire rules
        rules_invoke_event('nycc_rides_member_withdraws_from_ride', $user, $ride);
        
        //MOVED TO RULE
        drupal_set_message(check_plain("You have withdrawn from this ride's participant list."));

        drupal_goto("node/$nid");
      }
    }
  }

  $current_waiters = nycc_field_get_value($ride->field_ride_waitlist);
  if (!empty($current_waiters)) {
    foreach($current_waiters as $ndx => $val) {
      if ($val['uid'] == $user_uid) {
        unse