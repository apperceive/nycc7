<?php

/*
TODO List:
6) add back Event Logging
7) add back ride rosters
8) add back ride reports
11) Fix how to handle multiple dates
18) fix SQL in nycc_rides_ride_roster_email
22) fix nycc_rides_ride_overlaps_user
23) fix viewRideSignups
27) fix nycc_rides_approve_rides and add javascript inline editing & ensure event is fired upon status change
28) toggle ride location so that selecting from other... shows text box
29) Add Rides & Waitlists buttons to user Profile
*/

/*TODO LIST WHEN DEPLOYING TO PROD
 *1) add field to control 10-day waitlist (field_ride_open_signup_days)
 *2) INSTALL WYSIWYG Module
 *3) create new leaders field (field_ride_current_leaders) & run migrate script
 *3a) change rides content type ->old leader's field is not required
 *4) script to set 10-days signup limit
 *
 */

function nycc_rides_init() {
  variable_set("nycc_rides_debug", TRUE);
}


function nycc_rides_menu() {
  $items = array();

  $items['admin/config/nycc/rides'] = array(
      'title' => 'NYCC Rides module settings',
      'description' => 'Settings for NYCC Rides Module',
      'page callback' => 'drupal_get_form',
      'file' => 'nycc_rides_admin.inc', 
      'access arguments' => array('administer nycc rides'),
      'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
      'page arguments' => array('nycc_rides_admin'),  
  );

  //$items['nycc-approve-ride/%'] = array(
  //  //'page arguments' => array(1),
  //  'page callback' => 'nycc_rides_approve_ride',
  //  'type' => MENU_CALLBACK,
  //  'access callback' => TRUE,
  //);

  
  $items['nycc-update-ride-status-js/%'] = array(
    //'page arguments' => array(1),
    'page callback' => 'nycc_rides_update_ride_status_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-update-ride-type-js/%'] = array(
    //'page arguments' => array(1),
    'page callback' => 'nycc_rides_update_ride_type_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  //$items['nycc-join-ride'] = array(
  //  'page callback' => 'nycc_rides_join_ride',
  //  'type' => MENU_CALLBACK,
  //  'access callback' => TRUE,
  //);
  //
  //$items['nycc-withdraw-from-ride'] = array(
  //  'page callback' => 'nycc_rides_withdraw_from_ride',
  //  'type' => MENU_CALLBACK,
  //  'access callback' => TRUE,
  //);

  $items['nycc-existing-rides-js'] = array(
    'page callback' => 'nycc_rides_existing_rides_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used by ajax buttons
  $items['nycc-ride-participants-js'] = array(
    'page callback' => 'nycc_rides_ride_participants_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used by ajax buttons
  $items['nycc-ride-waiters-js'] = array(
    'page callback' => 'nycc_rides_ride_waiters_js',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  // used for printpdf
  $items['nycc-riders-roster-pdf'] = array(
    'page callback' => 'nycc_rides_output_riders_roster_pdf',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['nycc-rides-report'] = array(
    'page callback' => 'nycc_rides_report_leaders',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Ride Reports'
  );

  $items['nycc-rides-report/leaders'] = array(
    'page callback' => 'nycc_rides_report_leaders',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Leaders'
  );

  $items['nycc-rides-report/riders'] = array(
    'page callback' => 'nycc_rides_report_riders',
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Riders'
  );

  // move these to views
  /*
  $items['user/%user_uid_optional/myrides'] = array(
    'page callback' => 'nycc_rides_report_rides',
    'type' => MENU_LOCAL_TASK,
    //'access callback' => TRUE,
    'access callback' => 'nycc_rides_report_rides_access',
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Rides',
    'page arguments' => array(1),
  );

  $items['user/%user_uid_optional/mywaitlists'] = array(
    'page callback' => 'nycc_rides_report_waitlists',
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Waitlists',
    'page arguments' => array(1),
  );

  $items['user/%user_uid_optional/myleads'] = array(
    'page callback' => 'nycc_rides_report_leads',
    'type' => MENU_LOCAL_TASK,
    //'access callback' => TRUE,
    'access callback' => 'nycc_rides_report_leads_access',
    'file' => 'nycc_rides.reports.inc',
    'title' => 'Leads',
    'page arguments' => array(1),
  );
  
  */

  $items['approve-rides'] = array(
    'page callback' => 'nycc_rides_approve_rides',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['node/%/cancel'] = array(
    'title' => 'Cancel Ride',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nycc_rides_ride_cancel_confirm', 1),
    'access callback' => TRUE,
    'access callback' => 'nycc_rides_access',
    'access arguments' => array(2, 1),
    'type' => MENU_CALLBACK,
  );

  $items['node/%/join'] = array(
    'title' => 'Join Ride',
    'page callback' => 'nycc_rides_join_ride',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  //WORKING
  $items['node/%/approve'] = array(
    'title' => 'Join Ride',
    'page callback' => 'nycc_rides_approve_ride',
    'access callback' => TRUE,
    'access callback' => 'nycc_rides_access',
    'access arguments' => array(2, 1),
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  //WORKING
  $items['node/%/withdraw'] = array(
    'title' => 'Withdraw From Ride',
    'page callback' => 'nycc_rides_withdraw_from_ride',
    'access callback' => TRUE,
    //'access callback' => 'nycc_rides_access',
    //'access arguments' => array(2, 1),
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

//   $items['node/%/attend'] = array(
//     'title' => 'Ride Attendance and Notes',
//     'page callback' => 'drupal_get_form',
//     'page arguments' => array('nycc_ride_attend', 1),
//     'access callback' => TRUE,
//     //'access callback' => 'nycc_access',
//     //'access arguments' => array('attend', 1),
//     'type' => MENU_CALLBACK,
//   );

  return $items;
}


//HOOK Functions
function nycc_rides_cron() {
  //watchdog('cron', 'starting nycc_cron');
//  nycc_ride_reminder(REQUEST_TIME);
//  nycc_ride_overlaps_reminder();
//  nycc_ride_roster_email(REQUEST_TIME, 1);

  //watchdog('cron', 'finished nycc_cron');
}

function nycc_rides_node_view($node, $view_mode = NULL, $langcode = NULL) {
  global $user;
  if ($node->type == 'rides') {
    rules_invoke_event('nycc_rides_ride_is_viewed', $user, $node);
  }
}


function nycc_rides_node_update($node) {
  $r_debug =   variable_get("nycc_rides_debug", TRUE);
  if ($node->type == 'rides') {
    if($node->is_new) {
      //if is_new then status will either be submitted or approved
      global $user;
      if ($ride_status == 'Submitted') {
        rules_invoke_event('nycc_rides_ride_is_submitted', $user, $node);
      } else {
        rules_invoke_event('nycc_rides_ride_is_approved', $user, $node);
      }
    } else if((arg(3)=="resubmit") && (nycc_rides_get_ride_status($node) =="Cancelled")) {
        nycc_rides_update_ride_status($node, "Submitted");
    } // new

    if (in_array($node->field_ride_status['und'][0]['value'], array('Submitted', 'Revised')))
      drupal_set_message(filter_xss(t("Please Note: If your ride includes the use of a train you must also complete a <a href=\"https://docs.google.com/forms/d/1-KMVUUHflXyxes6ZFKPqTK54-FKvQ9V2-ympcYZ8b0w/viewform\" target=\"_blank\">Train Request</a> here." )));

    if (in_array($node->field_ride_status['und'][0]['value'], array('Submitted', 'Revised')) && !nycc_rides_can_approve())
      drupal_set_message("Please Note: Approval may take 24 to 48 hours (usually, we get to it sooner).");
    
  } // rides
}

function nycc_rides_node_validate($node, $form = NULL, $form_state = NULL) {
  if ($node->type == 'rides') {
    global $user;
    // TODO: check for dates in future for non-approved rides

    // check for spots > riders count
    $num_riders = nycc_rides_count_riders($node);
    $num_spots = $node->field_ride_spots['und'][0]['value'];
    $num_waiters = nycc_rides_count_waiters($node);
    $numleaders = nycc_rides_count_leaders($node);
    //dpm(array('riders'=>$num_riders,
    //    'spots'=>$num_spots,
    //    'waiters'=>$num_waiters
    //    ));
    if ($num_spots > 0) {
      if ($num_spots < $num_riders)
        form_set_error('field_ride_spots', "The number of spots can not be less than the number of currently signed up riders (" . $num_riders . ").");

      if (!nycc_rides_ride_allows_signups($node))
        form_set_error("field_ride_spots", "Max. Participants must be blank when Sign-ups is 'No signups or waiting list'");

      if (($num_waiters > 0) && (!nycc_rides_ride_allows_signups($node)))
        form_set_error("field_ride_signups", "There are people on the waiting list; please select 'Signups with waiting list' or increase the number of Max. Participants.");

    }
    if($numleaders == 0) {
      form_set_error("field_ride_current_leaders", "You must have at least one leader.");
    }

  } //if rides
}

function nycc_rides_node_presave($node) {
  //dpm($node);
  $r_debug =   variable_get("nycc_rides_debug", TRUE);
  if ($node->type == 'rides') {
       
    if(!nycc_field_has_value($node->field_ride_open_signup_days))
      $node->field_ride_open_signup_days['und'][0]['value'] = variable_get("nycc_rides_days_before_ride", 10);
    
    // set dow and timestamp
    $node->field_ride_dow['und'][0]['value'] = date("l", nycc_rides_get_ride_time($node));

    //if ((arg(0) != "nycc" && arg(1) != "inbound") ||  (arg(0) != "node" && arg(2) != "approve") ) // if edit is not coming from inbound email processor
    if (arg(2) != "approve")
    {
      if (!nycc_rides_can_approve() &&
          in_array($node->field_ride_status['und'][0]['value'] , array('Approved', 'Submitted')) &&
          nycc_rides_ride_has_changed($node)) {
        
          $node->field_ride_status['und'][0]['value'] = 'Revised';
          rules_invoke_event('nycc_rides_ride_is_revised', $user, $node, nycc_rides_last_approved_revision($node));

      }
    }

    //remove leaders/riders/waiters that are listed twice
    nycc_rides_clean_up_participants($node);

    $num_riders = nycc_rides_count_riders($node);
    $num_waiters = nycc_rides_count_waiters($node);
    $num_spots = 0;
    try {
      @$num_spots = $node->field_ride_spots['und'][0]['value'];
    } 
    catch (Exception $e) {
      $node->field_ride_spots = array('und' => array(0 => array('value' => 0)));
    }

    if (!($num_spots > 0)){
      $node->field_ride_signups['und'][0]['value'] = "No signups or waiting list";
      if ($r_debug) watchdog("nycc_rides", "Presave: Spots is 0: Setting Ride Signups to No signups or waiting list for Ride: %title",
                             array('%title' => $node->title), WATCHDOG_INFO);
    }

        if (nycc_rides_ride_allows_signups($node) && ($num_spots > $num_riders) && ($num_waiters > 0)) {
            $num_new_spots = min($num_spots - $num_riders, $num_waiters);
            for ($i = 0; $i < $num_new_spots; $i++) {
              $waiter = array_shift($node->field_ride_waitlist['und']);
              $node->field_ride_current_riders['und'][] = array("uid" => $waiter['uid']);
              if ($r_debug) watchdog("rides", "user: (%uid) auto joined from ride waitlist: %nid (%rname)",
                                     array( '%uid' => $waiter['uid'], '%nid'=> $node->nid, '%rname' => $node->title), WATCHDOG_INFO);
              
              rules_invoke_event('nycc_rides_member_joins_from_waitlist', user_load($waiter['uid']), $node);


               //TODO: Add this back once everything else is working
               //event logging
              //nycc_rides_log_action($node, $waiter['uid'], "Auto-Join From Waitlist");
           }
            drupal_set_message(check_plain($num_new_spots ." ". ($num_new_spots == 1 ? "person" : "people") ." on waitlist moved to participant list."));
        }
    }
}


function nycc_rides_node_prepare($node) {
  if (arg(3) == "relist")  {
    $onode = node_load(arg(4));

    if ($onode && $onode->type=='rides') {
      $item = array($onode);
      foreach ($item['0'] as $field => $value) {
        if ((substr($field, 0, 5) == 'field') || ($field == 'title')) {
          if(!in_array($field, array('field_ride_token',
                        // 'field_ride_additional_dates',
                         'field_ride_author_id',
                         'field_ride_dow',
                         'field_ride_timestamp',
                         'field_ride_attendees',
                         'field_ride_current_riders',
                         'field_ride_current_leaders',
                         'field_ride_waitlist',
                         'field_ride_status')))
          { 
            if(nycc_field_has_value($onode->{$field})) {
              $node->{$field} = $onode->{$field};
              //dpm($field);
            }
          }
        }  
      }
      global $user;
      
      // copy old leaders or reset to new person?
      $node->field_ride_current_leaders['und'][0]['uid'] = $user->uid;
      $node->field_ride_status['und'][0]['value'] = "Pending";
    } // if onode rides
    
    drupal_set_message(check_plain("This is a re-listing of ". $node->title . ".  You are set as the leader for this ride."));
    drupal_set_message(check_plain("Please be sure to select a new date for the ride."));
  }
  
  if ($node->type == 'rides' && arg(2) == 'edit') {
    if (!nycc_rides_can_approve()) {
      drupal_set_message(filter_xss("<b>Please Note:</b> If you modify key fields on this ride it will be taken offline until the Ride Coordinator has had a chance to review the changes."));
      drupal_set_message(filter_xss("While we make every effort to approve it  a timely manner, it could take up to 48 hours for the change to be approved."));
      drupal_set_message(filter_xss("If you must make changes to the ride within 48 hours of the ride start, we'd suggest that your reach out to <a href='mailto:" . $node->field_ride_select_level['und'][0]['value'] . "-rides@nycc.org?subject=Urgent: I need to make changes to a ride!'>" . $node->field_ride_select_level['und'][0]['value'] . "-rides@nycc.org</a> to confirm that they can approve in a timely manner <b>before you make the changes</b>"));      
    }//can't approve
  } // ride edit
}

function nycc_rides_form_alter(&$form, &$form_state, $form_id) {
   if ($form_id == 'rides_node_form') { 
     //dpm($form);
   
    $op = (arg(1) == 'add') ? 'add' : ((arg(2) == 'edit') ? 'edit' : 'noop');
    $can_approve = nycc_rides_can_approve();
    if (arg(1) == 'add')
      drupal_set_title('Submit a Ride');
    else
      drupal_set_title('Revise a Ride: <small>' . $form['#node']->title . '</small>',  PASS_THROUGH);

    $status = nycc_rides_get_ride_status($form['#node']);
    $action = !nycc_rides_can_approve() && in_array($status, array('Approved', 'Cancelled', 'Flagged')) ? "Re-submit" : "Submit";
    $form['actions']['submit']['#value'] = $action; 
    
    // note: 'group_rides_htabs' key does not yet exist yet. why?
    // dpm($form['group_rides_htabs']['group_ride_participants']['group_rides_participants']);
           
    // let bootstrap handle this?
    //$form['field_ride_description']['#cols'] = 50;

    // add submit handler here for additional dates
    $form['#submit'][] = '_nycc_rides_additional_dates_submit';
    $form['#validate'][] = '_nycc_rides_additional_dates_validate';

  } // rides_node_form 
} // nycc_rides_form_alter

function _nycc_rides_additional_dates_submit($form, &$form_state) {
  // create rides for additional dates based on newly submitted ride
  // why is this the only entry in values?
  dpm($form);
  $additional_dates = $form_state['values'];
  if (drupal_strlen($additional_dates)) {
    $adsarr = explode(",", $additional_dates);
    if (is_array($adsarr)) {
      foreach ($adsarr as $d) {
        $ds = nycc_rides_get_date(trim($d));
        watchdog('nycc_node_update', "about to clone ride to date $d", array(), WATCHDOG_INFO);
        nycc_rides_copy_ride($form['#node'], $d, "Submitted");
        drupal_set_message("Additional ride created for $d ($ds)");
      } // for
      if (!$errors)
        form_set_value($form['additional_dates'], $additional_dates, $form_state);  
    } // if array
  } // if additional dates

} // _nycc_rides_additional_dates_submit

function _nycc_rides_additional_dates_validate($form, &$form_state) {
  if (!isset($_POST['additional_dates'])) {
    drupal_set_message('no $_POST["additional_dates"]');
    return;
  }
  
  $additional_dates = $_POST['additional_dates'];
  $additional_dates = check_plain($additional_dates);
  $additional_dates = trim($additional_dates);
  $additional_dates = str_replace(' ', '', $additional_dates);
  
  if (drupal_strlen($additional_dates)) {
    // parse dates, validate each one
    // TODO: remove dups and dup of current node date
    $errors = array();
    $adsarr = explode(",", $additional_dates);
    if (is_array($adsarr)) {
      dpm($adsarr);
      foreach ($adsarr as $d) {
        $ds = nycc_rides_get_date(trim($d));
        if (!$ds) {
          $errors[] = "$d";
        } // if
      } // for
      if (count($errors)) {
        //form_set_value($form['additional_dates'], $_POST['additional_dates'], $form_state);
        $errstr = theme('item_list', array('items' => $errors));
        form_set_error('additional_dates', "Invalid additional dates: $errstr");
      }
      else {
        if (array_key_exists('additional_dates', $form))
          form_set_value($form['additional_dates'], $additional_dates, $form_state);  
      } // count
    } // if array
  } // if additional dates
  else {
    drupal_set_message('$_POST["additional_dates"] has no length');    
  }
  
  //dpm($additional_dates);
  
} // _nycc_rides_additional_dates_validate



function nycc_rides_block_info() {
  //TODO: IS THIS NEEDED?
  $blocks[0]['info'] = t('NYCC Ride Participants');
    $blocks[0]['cache'] = 'BLOCK_NO_CACHE' ;
  $blocks[1]['info'] = t('NYCC Ride Waiting List');
    $blocks[1]['cache'] = 'BLOCK_NO_CACHE' ;
    $blocks[2]['info'] = t('Ride Coordinators Email');
    $blocks[2]['cache'] = 'BLOCK_CACHE_PER_PAGE';

    return $blocks;
}

function nycc_rides_block_configure($delta = 0) {
  return $form;
}
function nycc_rides_block_save($delta = 0, $edit = array()) {
    break;
}

function nycc_rides_block_view($delta = 0) {
  //TODO: IS THIS NEEDED?

  if ($delta == 0) {
    $block['content'] = nycc_rides_output_ride_participants();
    $block['subject'] = drupal_strlen($block['content']) ? t('Ride Participants') : "";
  }
  if ($delta == 1) {
    $block['content'] = nycc_rides_output_ride_waitlist();
    $block['subject'] = drupal_strlen($block['content']) ? t('Ride Waiting List') : "";
  }
//       if ($delta == 2) {
//         $block['subject'] = t('Group Links');
//         $block['content'] = nycc_output_group_links_block();
//       }
//       if ($delta == 3) {
//         $block['subject'] = t('Group Ride Withdrawals');
//         $block['content'] = nycc_output_group_ride_withdrawals_block();
//       }
  if ($delta == 2) {
      $block['subject'] = t('Ride Coordinators Email');
        $block['content'] = nycc_rides_output_ride_coordinators_email_block();
    }
    return $block;
}

//END HOOK Functions

// not called?
function nycc_rides_output_ride_buttons($nid) {
  global $user;
  $user_uid = $user->uid;
    
  $ride = nycc_rides_get_ride_object($nid, null, TRUE);

  $buttons = array();

  if(is_object($ride)){
    $nid = $ride->nid;
    // ride time as binary
    $ridetime = strtotime(nycc_rides_get_ride_time_as_text($ride));
    $is_leader = nycc_rides_is_leader($ride,$user);
    $can_approve = nycc_rides_can_approve($user);
    $can_modify = nycc_rides_can_modify_ride($ride, $user);
    $ride_is_upcoming = nycc_rides_ride_is_upcoming($ride, $user);
    $is_approved = ($ride->field_ride_status['und'][0]['value'] == 'Approved' ) ? true : FALSE;
    $is_cancelled = ($ride->field_ride_status['und'][0]['value'] == 'Cancelled' ) ? true : FALSE;
    $allows_waiters = nycc_rides_ride_allows_signups($ride) ;

    $no_of_riders = nycc_rides_count_riders($ride);
    $no_of_waiters = nycc_rides_count_waiters($ride);
    $no_of_spots = is_numeric($ride->field_ride_spots['und'][0]['value']) ? $ride->field_ride_spots['und'][0]['value'] : 0;

    if ($no_of_spots)
      $available_spots = $no_of_spots - $no_of_riders;

    $title = $ride->title;
    $path = "node/$nid";

    if ($can_approve && (!$is_approved) && (!$is_cancelled)) {
      $buttons[] = l(t('Approve Ride'), "node/$nid/approve",
               array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-join-btn'))));
    }

    if ($can_modify) {
      $buttons[] = l(t('Revise Ride Details'), "node/$nid/edit",
               array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-edit-btn'))));
    }

    $buttons[] = l(t('Email Leaders '), "mailto:". nycc_rides_get_all_leader_emails($ride) ."?subject=$title",
             array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-xxx-btn'))));

    //dsm(get_defined_vars());
    //dsm(array("nycc_rides_is_waiting" => nycc_rides_is_waiting($ride), "field_ride_waitlist" => $ride->field_ride_waitlist));
    if ($allows_waiters) {

      $is_rider = nycc_rides_is_rider($ride, $user);
      $is_waiter = nycc_rides_is_waiting($ride, $user) ;

      if ($is_rider && $ride_is_upcoming && $is_approved) {
        $buttons[] = l(t('Withdraw From Ride'), "node/$nid/withdraw",
                 array('attributes' => array('class' => array('btn', 'nycc-btn', 'btn-primary', 'nycc-xxx-btn'))));
      }
      if ($is_waiter && $ride_is_upcoming && $is_approved) {
        // TODO: check that signups are allowed?
        $buttons[] = l(t('Withdraw From Waitlist'), "node/$nid/withdraw",
                 array('attributes' => array('class' => array('btn', 'nycc-btn', 'btn-primary', 'nycc-xxx-btn'))));
      }
      $should_be_enabled = nycc_rides_ride_should_be_enabled($ride);
      //TOOD: TEST GIT

      if ($should_be_enabled['value'] == true){
        if (!$no_of_spots || ($available_spots > 0)) {
          $buttons[] = l(t('Join Ride'), "node/$nid/join",
                       array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-join-btn'))));
        } else if ($no_of_spots && (!$available_spots) && (!$is_rider) && (!$is_waiter)){
          $buttons[] = l(t('Add Me To The Waitlist'), "node/$nid/join",
                       array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-join-btn'))));
        }
      } else {
        if($is_approved && (!$is_rider) && (!$is_waiter)){
          $buttons[] = l(t('Join Ride (Disabled)'),
                   "javascript:alert('" . $should_be_enabled['reason'] . ".')",
                       array('attributes' =>
                         array('class' => array('btn', 'btn-primary', 'nycc-disabled-button', 'nycc-join-btn')), 'external'=>true));
        }
      }

      if ($can_modify && $is_approved) {
        $buttons[] = l(t('Roster & Waiver Form'), "/printpdf/nycc-riders-roster-pdf/$nid",
                 array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-xxx-btn'))));
      }

      if((!$is_cancelled) && $can_modify){
        $buttons[] = l(t('Cancel Ride'), "node/$nid/cancel",
               array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-xxx-btn'))));
      }
      if(($is_cancelled) && $can_modify){
        $buttons[] = l(t('Resubmit Ride For Approval'), "node/$nid/edit/resubmit",
               array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-xxx-btn'))));
      }
      if ($no_of_riders && $can_modify ) {
        $buttons[] = l(t('Email Participants '), "mailto:". nycc_rides_get_all_rider_emails($ride) ."?subject=Ride: $title",
               array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-xxx-btn'))));

      }
      if ($no_of_riders && $can_modify &&(!$is_cancelled) ) {

        $buttons[] = l(t('Ride Attendance'), "/node/$nid/attend",
                 array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-xxx-btn'))));
      }
      if ($no_of_waiters && $can_modify ) {
        $buttons[] = l(t('Email Waitlist '), "mailto:". nycc_rides_get_all_waitlist_emails($ride) ."?subject=$title",
                 array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-xxx-btn'))));
      }
      if ($no_of_riders && $no_of_waiters && $can_modify ) {
        $buttons[] = l(t('Email Riders & Waitlist '), "mailto:".
                       nycc_rides_get_all_rider_emails($ride) . "," .
                       nycc_rides_get_all_waitlist_emails($ride) ."?subject=$title",
                       array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-xxx-btn'))));
      }
    }
    if (!arg(2)) {
      //TODO: Is this the right IF condition?
      $buttons[] = l(t('Re-list This Ride'), "node/add/rides/relist/$nid",
                     array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-xxx-btn'))));
    }
  } else {
    watchdog("nycc_rides", "nycc_rides_output_ride_buttons could not load ride with nid: $nid");
  }
  return $buttons;
}


//RIDE ROSTER RELATED FUNCTIONS
function nycc_rides_output_riders_roster_pdf($node = NULL) {
  // used with printpdf
  //global $theme_path;
  if ($node && is_object($node))
  $nid = $node->nid;

  if (!$nid)
    $nid = ($_POST['nid'] > 0) ? $_POST['nid'] : ((arg(2) > 0) ? arg(2) : arg(1));

  if (is_numeric($nid) && ($nid > 0)) {
    $ride = node_load( $nid);
    if ($ride) {
      // DONE: change to timestamp
      //drupal_set_title($ride->title ."-". substr($ride->field_date_ride_first['und'][0]['value'], 0, 10));
      $datestr = date('Y-m-d', $ride->field_timestamp['und'][0]['value']);
      drupal_set_title($ride->title ."-". $datestr);
      $output .= views_embed_view('rides_detail_on_riders_list', 'block_1', $nid, $nid);
      // display waiver
      $waiver = node_load('45438');
      if ($waiver)
        $output .= $waiver->body;
      // display ride participants
    //TODO:CONFIRM THAT $leaders works! May need to wrap in nycc_field_get_value()
      $leaders = nycc_refs2ids(nycc_field_get_value($ride->field_ride_current_leaders));
      $riders = nycc_refs2ids(nycc_field_get_value($ride->field_ride_current_riders));
      $output .= views_embed_view('ride_participants', 'block_2', implode("+", array_merge($leaders, $riders)));
      $waiters = nycc_refs2ids(nycc_field_get_value($ride->field_ride_waitlist));
      $output .= views_embed_view('ride_participants', 'block_3', implode("+", $waiters));
      //$output .= var_export(implode("+", $waiters),1);
    }
  }
  return $output;
}

function nycc_rides_ride_roster_email($timestamp, $hrs) {
  //TODO FIX THIS SQL. Using Old Table Names
  //TODO FIX THIS SQL. Assumes leader is Node Reference. New field is user reference

//This function accepts a timestamp (generally REQUEST_TIME) and an hours interval and generates an email to the leaders of rides starting between those intervals
//NOTE: It has a hard coded action ID

  $rr_debug = TRUE;
  $action_id = 5;  // 5 is the tokenized email action for roster emails

  $sql=<<<EOS
  SELECT t.entity_id AS nid, u.uid
  FROM
  {users} u,
  {field_data_field_ride_timestamp} t,
  {node} n 
  WHERE
  n.nid = t.entity_id AND 
  n.vid = t.revision_id AND
  n.uid = u.uid AND 
  (t.field_ride_timestamp_value BETWEEN from_unixtime($timestamp) AND DATE_ADD(NOW(), INTERVAL $hrs HOUR))
EOS;
  if ($rr_debug ) watchdog("nycc-ride_roster", "SQL is " .  $sql, array(), WATCHDOG_NOTICE);
  $ride_count = 0;
  $q = db_query($sql);
    while ($row = db_fetch_object($q)) {
      $ride = node_load($row->nid);
      $acct = user_load($row->uid);

      if ( ($ride) && ($acct) ) {
        $ride_count++;
          $cp = profile2_load_by_user($acct->uid, "profile");
          if ($cp) {
            if ($cp->field_ride_rosters['und'][0]['value'] != "false") {
              $context = array('hook' => 'cron', 'op' => 'send', 'node' => $ride, 'user' => $acct);
              actions_do($action_id, $acct, $context);
        if ($rr_debug ) watchdog("nycc-ride_roster", $acct->name . " sent a roster for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>");
            } else {
            if ($rr_debug ) watchdog("nycc-ride_roster", $acct->name . " skipping roster for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>");
            }
          } else {// if cp
            watchdog("nycc-ride_roster", "Could not load profile for user: " . $acct->uid, array(), WATCHDOG_WARNING) ;
          }
      }  else  { //no ride or user
        watchdog("nycc-ride_roster", "Could not load Ride: " . $row->nid . " or User: " . $row->nid, array(), WATCHDOG_WARNING) ;
      }
    }  // while
    if($ride_count > 0) {
      if ($rr_debug ) watchdog("nycc-ride_roster", $ride_count . " rides found starting within " . $hrs . " hours" , array(), WATCHDOG_NOTICE) ;
    } else {
    if ($rr_debug ) watchdog("nycc-ride_roster", "No rides found starting within " . $hrs . " hours", array(), WATCHDOG_NOTICE);
    }
}

function nycc_output_riders_roster_html($nid = NULL) {
//This function is used by a custom token to generate a roster to be emailed
//NOTE: It contains hardcoded view name and display IDs

  $rr_debug = TRUE;

   $view_name = "ride_participants";
  $display_name = "block_4";

  if (is_object($nid)) {
    $ride = $nid;
      $nid = $ride->nid;
  } elseif (is_numeric($nid) && ($nid > 0))  {
       $ride = node_load( $nid);
   }
    if ($ride) {
        $leaders = nycc_refs2ids($ride->field_ride_current_leaders);
        $riders = nycc_refs2ids($ride->field_ride_current_riders);
        $waiters = nycc_refs2ids($ride->field_ride_waitlist);
        $roster = array(implode("+", array_filter(array_merge($leaders, $riders, $waiters))));

//         if ($rr_debug ) watchdog("nycc-ride_roster", "Roster for ride: " . $nid . " is: " . implode("+", array_filter(array_merge($leaders, $riders, $waiters))) , array(), WATCHDOG_NOTICE);
 //        dpm(array_filter(array_merge($leaders, $riders, $waiters)));

      $view = views_get_view($view_name);
      if($view){

      global $user;
      $original_user = $user;
      $old_state = session_save_session();
      session_save_session(FALSE);
      $user = user_load(1);   // admin

        $view->hide_admin_links=TRUE;

        $output = $view->preview($display_name, $roster);

      $user = $original_user;
      session_save_session($old_state);
        return $output;
      } else { //coulnd't love view
        watchdog("nycc-ride_roster", "Could not load View: " . $view_name . " from function nycc_output_riders_roster_html", array(), WATCHDOG_ERROR) ;
      }

  } else { //no ride loaded
     watchdog("nycc-ride_roster", "Could not load Ride: " . $nid . " from function nycc_output_riders_roster_html", array(), WATCHDOG_ERROR) ;
   }
 }


//END RIDE ROSTER RELATED FUNCTIONS



//TODO: IF Add Back once everyone else is working
//This function is used to log members ride joins & withdrawals
function nycc_rides_log_action($node, $uid, $action_type){
  
  //TODO: REMOVE THIS ONCE ITS WORKING
  return true;
  
  //$action_debug = FALSE;
  //
  //  if ($action_debug ) watchdog('nycc_log_action', 'Checking if is object', array(), WATCHDOG_NOTICE) ;
  //if(is_object($node))
  //{
  //    if ($action_debug ) watchdog('nycc_log_action', 'Checking if is ride', array(), WATCHDOG_NOTICE) ;
  //  if($node->type == 'rides')
  //  {
  //    if ($action_debug ) watchdog('nycc_log_action', 'Checking action type', array(), WATCHDOG_NOTICE) ;
  //    switch($action_type) {
  //      case "Join A Ride":
  //        if ($action_debug ) watchdog('nycc_log_action', 'Action type is Join A Ride', array(), WATCHDOG_NOTICE) ;
  //
  //        if (($node->field_ride_spots['und'][0]['value'] == 0) || ($node->field_ride_spots['und'][0]['value'] ==""))
  //          $available_spots = 9999999;
  //        else
  //          $available_spots = $node->field_ride_spots['und'][0]['value'] - nycc_rides_count_riders($node);
  //
  //        break;
  //
  //      case "Join A Waitlist":
  //        if ($action_debug ) watchdog('nycc_log_action', 'Action type is Join A Waitlist', array(), WATCHDOG_NOTICE) ;
  //        $available_spots = nycc_rides_count_waiters($node) * -1;
  //        break;
  //
  //      case "Auto-Join From Waitlist":
  //        if ($action_debug ) watchdog('nycc_log_action', 'Action type is Auto-Join From Waitlist', array(), WATCHDOG_NOTICE) ;
  //        $available_spots = 0;
  //        break;
  //
  //      case "Withdraw From Ride":
  //        if ($action_debug ) watchdog('nycc_log_action', 'Action type is Withdraw From Ride', array(), WATCHDOG_NOTICE) ;
  //
  //        if (($node->field_ride_spots['und'][0]['value'] == 0) || ($node->field_ride_spots['und'][0]['value'] ==""))
  //          $available_spots = 9999999;
  //        else
  //          $available_spots = $node->field_ride_spots['und'][0]['value'] - nycc_rides_count_riders($node);
  //        break;
  //
  //      case "Withdraw From Waitlist":
  //        if ($action_debug ) watchdog('nycc', 'nycc_log_action - action type is Withdraw From Waitlist', array(), WATCHDOG_NOTICE) ;
  //        $available_spots = nycc_rides_count_waiters($node) * -1;
  //        break;
  //        default:
  //          watchdog('nycc_log_action', 'Unknown action type: ' . $action_type, array(), WATCHDOG_ERROR) ;
  //          break;
  //
  //    }
  //    //watchdog("nycc_log_action", "Logging: " . $action_type . " " . $user_uid . " " .  $node->nid . " " .  REQUEST_TIME . " " . strtotime(nycc_rides_get_ride_time_as_text($node)) . " " .  $available_spots , array(), WATCHDOG_NOTICE) ;
  //
  //    if($action_type=="Withdraw From Ride" || $action_type=="Withdraw From Waitlist")
  //    {
  //          $sql = "INSERT INTO {nycc_action_log} (`uid`, `node_id`, `action_time`, `action`, `event_type`, `event_start_time`, `avail_at_action_time`, `parent_aid`) VALUES (%d, %d, %d, '%s', '%s', %d, %d, (select a.aid from {nycc_action_log} a where a.uid=%d and a.node_id=%d and (a.action='%s' OR a.action='%s') ORDER by a.aid DESC LIMIT 1 ) )";
  //      $q = db_query($sql, $uid, $node->nid, REQUEST_TIME, $action_type, "Ride", strtotime(nycc_rides_get_ride_time_as_text($node)), $available_spots, $uid, $node->nid, "Join A Ride", "Join A Waitlist");
  //
  //    } else {
  //          $sql = "INSERT INTO {nycc_action_log} (`uid`, `node_id`, `action_time`, `action`, `event_type`, `event_start_time`, `avail_at_action_time`) VALUES (%d, %d, %d, '%s', '%s', %d, %d)";
  //      $q = db_query($sql, $uid, $node->nid, REQUEST_TIME, $action_type, "Ride", strtotime(nycc_rides_get_ride_time_as_text($node)), $available_spots);
  //
  //    }
  //
  //  } else {
  //    watchdog('nycc_log_action', 'Unknown node type: ' . $node->type, array(), WATCHDOG_ERROR) ;
  //  }
  //} else {
  //  watchdog('nycc_log_action', 'Node is not object', array(), WATCHDOG_ERROR) ;
  //}
}


//Access Related Functions
function nycc_rides_report_rides_node_access() {
  global $user;
  $acctid = arg(1);
  //dpm(get_defined_vars());
  if (($user->uid == $acctid)
        || in_array("administer", $user->roles)
        || in_array("board members", $user->roles)
        || user_access('administer users')
        || in_array("paid member", $user->roles) )
    return TRUE;
  return FALSE;
}

function nycc_rides_report_leads_node_access() {
  global $user;
  $acctid = arg(1);
  //dpm(get_defined_vars());
  if (($user->uid == $acctid)
      || in_array("administer", $user->roles)
      || in_array("board members", $user->roles)
      || in_array("paid member", $user->roles)
      || user_access('administer users'))
    return TRUE;
  return FALSE;
}

function nycc_rides_permission() {
  return array(
    'administer nycc rides' => array(
          'title' => t('administer nycc rides'),
          'description' => t('administer nycc rides'),
        ),
    'approve nycc rides' => array(
          'title' => t('approve nycc rides'),
          'description' => t('approve nycc rides'),
        )   
    );
}

//only works for node types
function nycc_rides_access($op, $node, $account = NULL) {
    global $user;
    if (!$account)
      $account = $user;
      
    $ride = node_load($node);
    if (!is_object($ride))
      return FALSE;

  // allow any leader to edit rides
  if (($op == 'update' || $op == 'cancel' || $op == 'resubmit') && $ride->type == 'rides'){
    return nycc_rides_can_modify_ride($ride, $account);
  }
  if ($op == 'join' && $ride->type == 'rides') {
    return in_array('paid member', $account->roles) ;
  }
  if ($op == 'withdraw' && $ride->type == 'rides') {
    return in_array('paid member', $account->roles) ;
  }
  if ($op == 'approve' && $ride->type == 'rides') {
    return nycc_rides_can_approve($account) ;
  }
}




//RIDE RELATED FUNCTIONS


function nycc_rides_join_ride($nid) {
//TODO: WHY IS THIS GETTING CALLED TWICE???

  if ($nid==null)
      $nid = $_POST["nid"];

  if ($nid==null) {
    watchdog("nycc_rides", "nycc_rides_join_ride - no NID was passed. Cancelling function.", array(), WATCHDOG_WARNING);
    drupal_set_message(check_plain("nycc_rides_join_ride: This operation could not be completed. No Ride ID was passed."),"error");
    drupal_goto("<front>");
    return;
  }

  global $user;
  $user_uid = $user->uid;

  //Checking User Access
  $user_access = in_array("paid member", $user->roles);
  if ($user_access != 1) {
    drupal_set_message(check_plain("Error! You must be a paid member to join this ride.", "error"));
    drupal_goto("node/$nid");
  }
  
  $joined_flag = 0;
  $ride = node_load($nid);

  if (!is_object($ride)){
    watchdog("nycc_rides", "nycc_rides_join_ride - unable to load ride %nid", array('%nid'=>$nid), WATCHDOG_WARNING);
    drupal_set_message(check_plain("nycc_rides_join_ride: unable to load ride: $nid", "error"));
    drupal_goto("node/$nid");
  }

  $ride_status = nycc_rides_ride_should_be_enabled($ride, $user);

  if($ride_status['value'] == false){
    watchdog("nycc_rides", "nycc_rides_join_ride - User %uid was prevented from joining ride %nid. Reason: %reason",
             array('%uid'=>$user_uid, '%nid'=>$nid, '%reason'=>$ride_status['reason']),
             WATCHDOG_WARNING);

    if($ride_status['display_msg']){
      drupal_set_message(check_plain("Warning: You can not join this ride. Reason: ". $ride_status['reason'] , "error"));
    }
    drupal_goto("node/$nid");
  }
  if(!nycc_has_required_profile_info($user)) {
    drupal_set_message("Please update your Emergency Contact No and Name (required for ride signup).");
    drupal_goto("user/" . $user->uid . "/edit/profile", array('query'=>drupal_get_destination()));
  }  


  
  $open_spots = nycc_rides_get_ride_spots($ride); //100 = no limit, -100 = no signup, 0= no spots, >0 = available spots
  switch ($open_spots) {
    case -100:
        //no signups for this ride
      drupal_set_message(check_plain("You can not signup for this ride. This ride has no signups.", "warning"));
      break;

    case 0:
        //signups are enabled but no spots


          //joining a ride for logged in user
      if ( nycc_field_has_value($ride->field_ride_waitlist)){
        $ride->field_ride_waitlist['und'][]['uid'] = $user_uid;
      } else {
        $ride->field_ride_waitlist['und'][0]['uid'] = $user_uid;
      }

      //$ride->field_ride_additional_dates['und'][0]['value'] = "";
      node_save($ride);

        //TODO: Add back when everything is working
        //adding event logging
        //nycc_log_action($ride, $user_uid, "Join A Ride");

      drupal_set_message(check_plain("You have joined this ride's waitlist."));
      watchdog("rides", "user: %uid (%uname) joined waitlist: %nid (%rname)",
                 array('%uid'=> $user->uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title),
                 WATCHDOG_INFO);
          
      //fire rules
      rules_invoke_event('nycc_rides_member_joins_waitlist', $user, $ride);
      break;

    default:
      //signups are enabled and spots are available so let the user join
      //joining a ride for logged in user
      if (nycc_field_has_value($ride->field_ride_current_riders)){
        $ride->field_ride_current_riders['und'][]['uid'] = $user_uid;
      } else {
        $ride->field_ride_current_riders['und'][0]['uid'] = $user_uid;
      }
        
      //$ride->field_ride_additional_dates['und'][0]['value'] = "";
      node_save($ride);
              
      //fire the rules
      rules_invoke_event('nycc_rides_member_joins_ride', $user, $ride);
      
      
      //TODO: Add back when everything is working
      //adding event logging
      //nycc_log_action($ride, $user_uid, "Join A Ride");        

      
      watchdog("rides", "user: %uid (%uname) joined ride: %nid (%rname)",
                 array('%uid'=> $user->uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title),
                 WATCHDOG_INFO);
      break;
  } // end switch 
  drupal_goto("node/$nid");
}

function nycc_rides_withdraw_from_ride($nid=null) {
  $ride = nycc_rides_get_ride_object($nid);
  if (!$ride) {
    watchdog("nycc_rides", "nycc_rides_withdraw_from_ride - no NID was passed. Cancelling function.", array(), WATCHDOG_WARNING);
    drupal_set_message(check_plain("Warning: This operation could not be completed. No Ride ID was passed.", "error"));
    drupal_goto("<front>");
    return;
  }

  global $user;
  $user_uid = $user->uid;

  $was_joined = FALSE;
  $current_riders = nycc_field_get_value($ride->field_ride_current_riders);
  if(!empty($current_riders)) {
    foreach($current_riders as $ndx => $val) {
      if ($val['uid'] == $user_uid) {
        unset($ride->field_ride_current_riders['und'][$ndx]);

        watchdog("rides", "user: %uid (%uname) withdrew from ride: %nid (%rname)",
                 array('%uid'=> $user_uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title),
                 WATCHDOG_INFO);

        $was_joined = TRUE;
        //$ride->field_ride_additional_dates['und'][0]['value'] = "";
        node_save($ride);

        nycc_rides_log_action($ride, $user_uid, "Withdraw From Ride");          
          
        //fire rules
        rules_invoke_event('nycc_rides_member_withdraws_from_ride', $user, $ride);
        
        //MOVED TO RULE
        drupal_set_message(check_plain("You have withdrawn from this ride's participant list."));

        drupal_goto("node/$nid");
      }
    }
  }

  $current_waiters = nycc_field_get_value($ride->field_ride_waitlist);
  if (!empty($current_waiters)) {
    foreach($current_waiters as $ndx => $val) {
      if ($val['uid'] == $user_uid) {
        unset($ride->field_ride_waitlist['und'][$ndx]);

        $was_joined = TRUE;

        //$ride->field_ride_additional_dates['und'][0]['value'] = "";
        node_save($ride);

        //fire rules
        rules_invoke_event('nycc_rides_member_withdraws_from_waitlist', $user, $ride);
        nycc_rides_log_action($ride, $user_uid, "Withdraw From Waitlist");

        drupal_set_message(check_plain("You have withdrawn from this ride's waiting list."));
        watchdog("rides", "user: %uid (%uname) withdrew from ride waitlist: %nid (%rname)",
                   array('%uid'=> $user_uid, '%uname' => $user->name, '%nid'=> $ride->nid, '%rname' => $ride->title),
                   WATCHDOG_INFO);
        drupal_goto("node/$nid");
        return;
      }
    }
  }

  if(!$was_joined)
    drupal_set_message(check_plain("Warning: Unable to withdraw from ride. You're not currently signed up for this ride.", "error"));
    drupal_goto("node/$nid");
}

function nycc_rides_approve_ride($ride = NULL) {
  if (!$ride)
    $ride = arg(1);

  if (is_numeric($ride))
    $ride = node_load($ride);

  global $user;
  if (is_object($ride) && nycc_rides_can_approve($user)) {
    nycc_rides_update_ride_status($ride, 'Approved');    

    drupal_goto("node/" . $ride->nid);
  } else {
    drupal_set_message(check_plain('You are not authorized to approve this ride.', "error"));
  }
}

function nycc_rides_copy_ride($onode, $datetime, $ride_status = "Submitted") {
  if (!drupal_strlen(trim($datetime)))
    $datetime = time();
  $node = clone $onode;
  $title = $node->title;
  $date = date($datetime, "Y-m-d");
  $ride_date_db = nycc_rides_get_date($date);
  if ($ride_date_db && nycc_rides_ride_exists($title, $ride_date_db)) {
    drupal_set_message("Ride with title $title already exists for $date");
    return FALSE;
  }
  $node->nid = NULL;
  $node->vid = NULL;
  $has_status = isset($node->field_ride_status) && is_array($node->field_ride_status) && array_key_exists('und', $node->field_ride_status);
  if ($has_status)
    $node->field_ride_status['und'][0]['value'] = $ride_status;
  else
    $node->field_ride_status = array('und' => array(0 => array('value' => $ridestatus)));
  $node->tnid = NULL;
  $node->created = NULL;
  $node->book['mlid'] = NULL;
  $node->path = NULL;
  $node->files = array();
  $node->comment_count = 0;
  $node->field_date_ride_timestamp['und'][0]['value'] = $datetime;
  $node->field_ride_current_riders = array();
  $node->field_ride_waitlist = array();
  
  dpm($node);
  
  node_save($node);
  
  //fire rules
  global $user;
  if ($ride_status == "Submitted")
    rules_invoke_event('nycc_rides_ride_is_submitted', $user, $node);

  return $node;
} // nycc_rides_copy_ride

function nycc_rides_clone_ride($onode, $datetime, $ride_status = "Submitted") {
  
  $nnode = nycc_rides_copy_ride($onode, $datetime, $ride_status);
  if (!$nnoid) 
    return false;
   
  $nid = $node->nid;
  $date = date("Y-m-d", $datetime);
  
  drupal_set_message(check_markup("Recurring ride for <a href='/node/$nid' title='View recurring ride in another tab or window...' target='_blank'>$title</a> created with date $date", 'filtered_html', '', FALSE));
  
  return true;
} // nycc_rides_clone_ride

function nycc_rides_ride_cancel_confirm($ride = NULL, &$form_state ) {
//// to do: check node type = rides
  if (!$ride)
    $ride = arg(1);

  if (is_numeric($ride))
    $ride = node_load($ride);

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $ride->nid,
  );

  return confirm_form($form,
    t('Are you sure you want to cancel %title?', array('%title' => $ride->title)), 'node/'. $ride->nid,
    //t('This action cannot be undone.'),
    t("This action will cause email notifications to be sent to all particpants, leaders and ride coordinators"),
    t('Yes, cancel this ride'),
    t('No')
  );
}

function nycc_rides_ride_cancel_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $ride = nycc_rides_get_ride_object($form_state['values']['nid']);
    nycc_rides_update_ride_status($ride, 'Cancelled');
  }
  $form_state['redirect'] = 'node/'. $form_state['values']['nid'];
}

//END RIDE RELATED FUNCTIONS

//GENERAL UTILITY FUNCTIONS


function nycc_rides_get_date($dstr, $fmt = "Y-m-d") {
  if (!is_string($dstr))
      return FALSE;

    $d = strtotime($dstr);
    if (!$d)
      return FALSE;

    return date($fmt, $d);
}


function nycc_rides_last_approved_revision($ride) {
  if (is_numeric($ride))
    $ride = node_load($ride);

  if (!$ride)
    return null;

  $nrl = node_revision_list($ride);
  //dpm ($nrl);
  if (is_array($nrl) && count($nrl)) {
    foreach ($nrl as $rev) {
      $revnode = node_load($ride->nid, $rev->vid);

      if ($revnode && $revnode->field_ride_status['und'][0]['value'] == 'Approved'){
      //dpm("found approved revision");
      //dpm ($revnode);
        return $revnode;
      }
    }
  }
  return null;
}

//END GENERAL UTILITY FUNCTIONS

//RIDE USER RELATED FUNCTIONS


function nycc_rides_is_leader($ridenode, $account = NULL) {
  return nycc_user_is_in_list($ridenode, $account, 'field_ride_current_leaders');
}

function nycc_rides_is_rider($ridenode, $account = NULL) {
  return nycc_user_is_in_list($ridenode, $account, 'field_ride_current_riders');
}

function nycc_rides_is_waiting($ridenode, $account = NULL) {
  return nycc_user_is_in_list($ridenode, $account, 'field_ride_waitlist');
}


function nycc_rides_can_modify_ride($ride, $account = NULL) {
  if (nycc_rides_is_leader($ride, $account))
    return true;
//   if (nycc_is_captain($ride, $account))
//     return true;
  return nycc_rides_can_approve($account);
}

function nycc_rides_can_approve($account = NULL) {
  global $user;

  if (!$account)
    $account = $user;

  if(is_numeric($account))
  $account = user_load($account);

  if (!is_object($account))
    return FALSE;

    
  $roles = array_values($account->roles);
  if (!is_array($roles))
    return FALSE;
  if (in_array('administer', $roles) || in_array('vp of rides', $roles) || in_array('ride coordinator', $roles))
    return true;
  // just check for ride coordinator role and do not check for level as we are not comparing with ride level anyway
  /*
  $cp = content_profile_load('profile', $account->uid);
  foreach ($cp->field_ride_coordinator as $rc) {
    if (drupal_strlen($rc['value']))
      return true;
  }
  */
  return FALSE;
}


function nycc_rides_get_user_ride_counts($timestamp, $acct = NULL) {
  global $user;
    if (is_numeric($acct))
      $uid = $acct;

    if (is_null($acct))
      $uid = $user->uid;

  if (is_object($acct))
      $uid = $acct->uid;

  $start_time = $timestamp - 60 * 60 * 4;
  $end_time = $timestamp + 60 * 60 * 4;

    $sql =<<<EOS
SELECT COUNT(*) AS cnt FROM {field_data_field_ride_current_riders} C, {field_data_field_ride_status} S, {field_data_field_ride_timestamp} T
WHERE
field_ride_current_riders_uid = $uid AND
C.entity_type = 'node' AND C.bundle = 'rides' AND C.deleted = 0 AND
S.entity_type = 'node' AND S.bundle = 'rides' AND S.deleted = 0 AND
T.entity_type = 'node' AND T.bundle = 'rides' AND T.deleted = 0 AND
S.entity_id = C.entity_id AND S.revision_id = C.revision_id AND
T.entity_id = C.entity_id AND T.revision_id = T.revision_id AND
C.revision_id = (SELECT MAX(N.revision_id) FROM {field_data_field_ride_current_riders} N WHERE N.entity_id = C.entity_id) AND
UNIX_TIMESTAMP(T.field_ride_timestamp_value) BETWEEN $start_time AND $end_time ;
EOS;
  //dpm($sql);
  $q = db_query($sql); //, $uid, $timestamp, $timestamp);
  foreach($q as $r) {
    return $r->cnt;
  }
  return 0;
}

function nycc_rides_get_user_waitlist_counts($timestamp, $acct = NULL) {
  global $user;
    if (is_numeric($acct))
      $uid = $acct;

    if (is_null($acct))
      $uid = $user->uid;

  if (is_object($acct))
      $uid = $acct->uid;

  $start_time = $timestamp - 60 * 60 * 4;
  $end_time = $timestamp + 60 * 60 * 4;
   $sql =<<<EOS
  SELECT COUNT(*) AS cnt FROM {field_data_field_ride_waitlist} C, {field_data_field_ride_status} S, {field_data_field_ride_timestamp} T
  WHERE
  field_ride_waitlist_uid = $uid AND
  C.entity_type = 'node' AND C.bundle = 'rides' AND C.deleted = 0 AND
  S.entity_type = 'node' AND S.bundle = 'rides' AND S.deleted = 0 AND
  T.entity_type = 'node' AND T.bundle = 'rides' AND T.deleted = 0 AND
  S.entity_id = C.entity_id AND S.revision_id = C.revision_id AND
  T.entity_id = C.entity_id AND T.revision_id = T.revision_id AND
  C.revision_id = (SELECT MAX(N.revision_id) FROM {field_data_field_ride_waitlist} N WHERE N.entity_id = C.entity_id) AND
  UNIX_TIMESTAMP(T.field_ride_timestamp_value) BETWEEN $timestamp - 60 * 60 * 4 AND $timestamp + 60 * 60 * 4;
EOS;
//  dsm($sql);
  $q = db_query($sql); //, $uid, $timestamp, $timestamp);
  foreach($q as $r) {
    return $r->cnt;
  }
  return 0;
}

function nycc_rides_ride_overlaps_user($acctuid, $ridetimestamp) {
  if (!$ridetimestamp) {
    // todo: fix this
    //watchdog("nycc_ride_overlaps_user", "Invalid ride timestamp param: $ridetimestamp.", array(), WATCHDOG_INFO);
    return 0;
  }
  //TODO: FIX viewRideSignups
  $sql = "SELECT COUNT(*) AS cnt FROM {viewRideSignups} vrs WHERE joined = 0 AND uid = $acctuid AND TIMESTAMPDIFF(MINUTE, vrs.time, $ridetimestamp) < 4 * 60";
  $q = db_query($sql);
  if ($q) {
    $row = db_fetch_object($q);
    if ($row)
      return $row->cnt;
    else {
      watchdog("nycc_ride_overlaps_user", "Unable to fetch row.", array(), WATCHDOG_ERROR);
    }
  } else {
    watchdog("nycc_ride_overlaps_user", "Unable to execute query: $sql.", array(), WATCHDOG_ERROR);
  }
  return 0;
}

//END RIDE USER RELATED FUNCTIONS

//RIDE UTILITY FUNCTIONS
function nycc_rides_clean_up_participants($node) {
  /*
  Goal is to ensure that any leaders added to the ride are removed from the particpant and wait lists
  as well as to ensure that riders on the participant list are removed from the waitlist
  Logic:
    For Each Leader:
      For Each Rider:
        For each waitlister
          If rider = leader then remove rider
          if waiterlister = leader then remove waitlister
          if waitlister = rider then remove waitlister

  uses array $removed_riders to skip over riders already removed
  uses flags $leader_was_removed_from_wait and $leader_was_removed_from_wait to skip leaders already removed
  */
  $r_debug =   variable_get("nycc_rides_debug", TRUE);

    if (is_numeric($node))
      $node = node_load($node);

    if (!is_object($node) || $node->type != 'rides' )
      return null;

  if ($r_debug) watchdog("nycc_rides", "nycc_rides_clean_up_participants called for Ride: %title", array('%title' => $node->title), WATCHDOG_INFO);

  $leaders =  nycc_rides_count_leaders($node) ?  nycc_field_get_value($node->field_ride_current_leaders): array();
  $current_riders = nycc_rides_count_riders($node) ? nycc_field_get_value($node->field_ride_current_riders) : array();
  $waiters = nycc_rides_count_waiters($node) ? nycc_field_get_value($node->field_ride_waitlist): array();
  $removed_riders = array(); //array to store riders that have been removed from waitlist so that they're not removed in each iteration.

  foreach($leaders as $leader) {
    $leader_uid = $leader['uid'];

    if (is_numeric($leader_uid)) {
      $leader_was_removed_from_wait = 0;
      $leader_was_removed_from_ride = 0;

      if ($r_debug) watchdog("nycc_rides", "nycc_rides_clean_up_participants Checking Leader: %uid for Ride: %title",
                   array('%uid' => $leader_uid, '%title' => $node->title), WATCHDOG_INFO);

      foreach($current_riders as $ndx => $current_rider) {
        if ($current_rider['uid'] == $leader_uid && (!$leader_was_removed_from_ride)) {
          unset($node->field_ride_current_riders['und'][$ndx]);
          drupal_set_message(check_plain("Leader ". $leader_uid  ." automatically removed from participants list."));

          if ($r_debug) watchdog("nycc_rides", "leader: %uid removed from particpants list: %nid (%rname)",
                       array('%uid'=> $leader_uid, '%nid'=> $node->nid, '%rname' => $node->title), WATCHDOG_INFO);
            $leader_was_removed_from_ride = 1;
        }  //if leader = rider

        //while iterating through riders, also check to see if that rider is on a waitlist and remove
        //watchdog('test', "scanning waiters for rider ". $rider['uid']);
        foreach($waiters as $ndx => $waiter) {
          //watchdog('test', "scanning waiter[$ndx]: ". $waiter['uid']);

          if ($current_rider['uid'] == $waiter['uid'] && (!in_array($current_rider['uid'], $removed_riders ))) {
            unset($node->field_ride_waitlist['und'][$ndx]);
            drupal_set_message(check_plain("Rider: ". $current_rider['uid'] ." automatically removed from waitlist."));
            if ($r_debug)  watchdog("nycc_rides", "waiter: %uid removed from waitlist: %nid (%rname)",
                        array('%uid'=> $waiter['uid'], '%nid'=> $node->nid, '%rname' => $node->title), WATCHDOG_INFO);
            $removed_riders[] = $current_rider['uid'];
          }  //if rider=waiter

          //while iterating through waitlist check if the leader is on the waitlist
          if ($waiter['uid'] == $leader_uid && (!$leader_was_removed_from_wait)) {
            unset($node->field_ride_waitlist['und'][$ndx]);
            drupal_set_message(check_plain("Leader ". $leader_uid ." automatically removed from waitlist."));
              if ($r_debug) watchdog("nycc_rides", "leader: %uid removed from waitist: %nid (%rname)",
                           array('%uid'=> $leader_uid, '%nid'=> $node->nid, '%rname' => $node->title), WATCHDOG_INFO);
            $leader_was_removed_from_wait = 1;
          }  //if waiter = leader
        } // foreach waiter
      } // foreach current_rider
    } // if leader_uid is number
  }// foreach leader
}

function nycc_rides_ride_is_upcoming($ride) {
    //return true;
    if (is_numeric($ride))
      $ride = node_load( $ride);

    if (!is_object($ride))
      return FALSE;

  $rt = nycc_rides_get_ride_time($ride);
    if ($rt >= REQUEST_TIME)
      return true;

    return FALSE;
}

function nycc_rides_get_ride_time($ride) {
    return strtotime(nycc_rides_get_ride_time_as_text($ride));
}

function nycc_rides_get_ride_time_formatted($ride) {
  return date('l, F jS, Y \@ h:i A', nycc_rides_get_ride_time(nycc_rides_get_ride_object($ride)));
}

function nycc_rides_get_ride_time_as_text($ride) {
    $ride = nycc_rides_get_ride_object($ride);

    if (!is_object($ride))
      return null;

  if(!nycc_field_has_value($ride->field_ride_timestamp))
    return null;

  return $ride->field_ride_timestamp['und'][0]['value'];

}

function nycc_rides_get_ride_location($ride) {
  if (!$ride || $ride->type != 'rides')
      return "";
   
   if( nycc_field_has_value($ride->field_ride_start_location))
    return nycc_field_get_text_value($ride->field_ride_start_location);
   else if(nycc_field_has_value($ride->field_ride_from)) {
    return nycc_field_get_text_value($ride->field_ride_from);
  }
  else {
    return nycc_field_get_text_value($ride->field_ride_from_select);
  }
}

function nycc_rides_get_ride_type($ride) {
   if (is_numeric($ride))
      $ride = node_load($ride);

    if (!is_object($ride))
      return "";

   if(nycc_field_has_value($ride->field_ride_type)) {
    return $ride->field_ride_type['und'][0]['value'];
    } else {
    return "";
    }
}


function nycc_rides_get_ride_spots($node){
  if(is_object($node) && $node->type == 'rides') {
    $num_waiters = nycc_rides_count_waiters($node);
    $num_riders = nycc_rides_count_riders($node);
    /*
    Scenario 1: field_ride_spots is null and field_ride_signups 'Signups with waiting list'
      Set value to 100
    scenario 2: $node->field_ride_signups is "No signups or waiting list"
      set value to -100
    Scenario 3: field_ride_spots is not null and numwaiters > 0
       set value to 0
    Scenario 4: field_ride_spots is not null and numwaiters == 0
       set value to $spots  -  riders
    */
    if(empty($node->field_ride_spots) && ($node->field_ride_signups['und'][0]['value'] == "Signups with waiting list" )){
      return 100;
    } else if ($node->field_ride_signups['und'][0]['value'] == "No signups or waiting list") {
      return -100;
    } else if(!empty($node->field_ride_spots) && ($num_waiters > 0) ) {
      return 0;
    } else {
      return $node->field_ride_spots['und'][0]['value'] - $num_riders ;
    }
  }
}

function nycc_rides_ride_allows_signups($node) {
  if (is_numeric($node))
    $node = node_load($node);

  if($node && $node->type == 'rides'){
    $ride_signups_value = nycc_field_get_value($node->field_ride_signups) ;
    return ($ride_signups_value[0]['value'] == "Signups with waiting list" ) ;
  }
  else
    return FALSE;

}


// todo: replace with sql query instead of node_load
function nycc_rides_count_attendees($data) {
  if (is_numeric($data)) {
    $node = node_load($data);
    $attendees = $node->field_ride_attendees['und'];
  } else if (is_array($data))
    $attendees = $data;
  else if (is_object($data))
    $attendees = $data->field_ride_attendees['und'];
  else
    return 0;
  $no_of_attendees = 0;
  if (is_array($attendees)) {
    foreach($attendees as $val) {
      if (is_numeric($val['uid']))
        $no_of_attendees = $no_of_attendees + 1;
      //foreach($val as $attendee_uid){
      //  if (is_numeric($attendee_uid))
      //    $no_of_attendees = $no_of_attendees + 1;
      //}
    }
  }
  return $no_of_attendees;
}

function nycc_rides_count_ref($data, $type = 'riders') {
  if (is_numeric($data)){
      $node = node_load($data);

  } else if (is_array($data)) {
      $to_count = $data;

    } else if (is_object($data)) {
    switch ($type) {
      case "riders":
        $to_count = (!empty($data->field_ride_current_riders['und'])) ? $data->field_ride_current_riders['und'] : null;
        break;
      case "waiters":
        $to_count = (!empty($data->field_ride_waitlist['und'])) ? $data->field_ride_waitlist['und'] : null;
        break;
      case "leaders":
        $to_count = (!empty($data->field_ride_current_leaders['und'])) ? $data->field_ride_current_leaders['und'] : null;
        break;
      case "attendees":
        $to_count = (!empty($data->field_ride_attendees['und'])) ? $data->field_ride_attendees['und'] : null;
        break;        
    }
    $no_to_return = 0;
    if (is_array($to_count)) {
      foreach($to_count as $val){
        if (is_numeric($val['uid']))
          $no_to_return = $no_to_return + 1;
      }
    }
    return $no_to_return;
    } else {
      return 0;
    }
}
// replace with sql query instead of node_load
function nycc_rides_count_riders($data) {
  return nycc_rides_count_ref($data, "riders");

}

function nycc_rides_count_leaders($data) {
  return nycc_rides_count_ref($data, "leaders");
}
function nycc_rides_count_waiters($data) {
  return nycc_rides_count_ref($data, "waiters");

}

function nycc_rides_get_ride_coordinator_emails($data) {
  if (is_object($data) && $data->type && ($data->type == 'rides')) {
		$level_array = nycc_field_get_value($data->field_ride_select_level);
    $level=$level_array[0]['value'];
  }
  else if (is_numeric($data)) {
		$ride = node_load($data);
	
		if ($ride){
      $level_array = nycc_field_get_value($ride->field_ride_select_level);
      $level=$level_array[0]['value'];
		}
	}
  else if (strlen($data) == 1 && in_array(strtolower($data), array('a', 'b', 'c'))) {
		$level = $data;
	} else {
		return "";
	}

  dpm($level);
  $sql = "SELECT u.mail FROM {users} u, {node} n, {field_data_field_ride_coordinator} c WHERE n.uid = u.uid AND c.entity_id = n.nid AND c.revision_id = n.vid AND c.field_ride_coordinator_value = '$level-ride'";

  //dpm($sql);
  $q = db_query($sql);
  //, array(':level'=>$level)
  
  $mail="";
  foreach($q as $r) {
    if (drupal_strlen($mail))
      $mail .= ",";
    $mail .= $r->mail;
  }
  return $mail;
}

function nycc_rides_get_ride_coordinator_names($data) {

  if (is_object($data) && $data->type && ($data->type == 'rides')) {
		$level_array = nycc_field_get_value($data->field_ride_select_level);
    $level=$level_array[0]['value'];
  }
  else if (is_numeric($data)) {
		$ride = node_load($data);
	
		if ($ride){
      $level_array = nycc_field_get_value($ride->field_ride_select_level);
      $level=$level_array[0]['value'];
		}
	}
  else if (strlen($data) == 1 && in_array(strtolower($data), array('a', 'b', 'c'))) {
		$level = $data;
	} else {
		return "";
	}
  
  $sql = "SELECT n.title FROM  {node} n, {field_data_field_ride_coordinator} c WHERE c.entity_id = n.nid AND c.revision_id = n.vid AND c.field_ride_coordinator_value = '$level-ride'";

	$q = db_query($sql);
  //, array(':level'=>$level));
  
  $names="";
	foreach($q as $r) {
		if (drupal_strlen($names))
		$names .= ", ";
		$names .= $r->title;
	}
	return $names;
}

function nycc_rides_get_all_leader_names_emails($ride) {
  $names ="";
  $ride = nycc_rides_get_ride_object($ride);
  $leaders = nycc_rides_get_all_users($ride, 'field_ride_current_leaders');
  if (empty($leaders))
    return $names;
  
  foreach ($leaders as $leader) {
    if (drupal_strlen($names))
      $names .= ", ";
      
    $names .= "<a href='mailto:" . $leader['email'] . "'>". $leader['name'] . "</a>";
  }
  dpm ($names);
  return $names;
}
function nycc_rides_get_all_leader_names($ride) {
  $names ="";
  $ride = nycc_rides_get_ride_object($ride);
  $leaders = nycc_rides_get_all_users($ride, 'field_ride_current_leaders');
  if (is_empty($leaders))
    return $names;
  
  foreach ($leaders as $leader) {
    if (drupal_strlen($names))
      $names .= ", ";
      
    $names .= $leader['name'];
  }
  return $names;
}

function nycc_rides_get_all_users($ride,  $field_name) {
  $users = array();
  if ( ($ride->type != 'rides') || (!nycc_field_has_value($ride->{$field_name})))
    return  $users;
 
  foreach(nycc_field_get_value($ride->{$field_name}) as $user) {
    if (is_numeric($user['uid']) && $user['uid'] >0) {
      $cp = profile2_load_by_user($user['uid'], "profile");
      $user_obj = user_load($user['uid']);
       
      if(is_object($cp) && is_object( $user_obj)) {
        $user_name = $cp->field_first_name['und'][0]['value'] . " " . $cp->field_last_name['und'][0]['value'];
        $users[] = array(
                         'uid'=>$user['uid'],
                         'name'=> $user_name,
                         'email'=>$user_obj->mail);
      }
    }
  }
  return $users;
}

function nycc_rides_get_users_emails($node, $field_name) {
  $emails = array();
  
  if (is_numeric($node))
    $node = nycc_rides_get_ride_object($node);
  
  if ($node) {
    if(nycc_field_has_value($node->{$field_name})) {
      foreach(nycc_field_get_value($node->{$field_name}) as $ref) {
        if(isset($ref['uid'])){
          $account = user_load($ref['uid']);
          if($account){
            $emails[] = $account->mail;           
          }
        }
      }
    } else {
      drupal_set_message(check_plain("nycc_rides_get_users_emails: could not find values for field $field_name" ),"error");
    }
  }
  return $emails;
}

function nycc_rides_get_all_leader_emails($ride) {
  return implode(", ", nycc_rides_get_users_emails(nycc_rides_get_ride_object($ride), 'field_ride_current_leaders'));
}

function nycc_rides_get_all_rider_emails($ride, $include_leaders = true) {
  $ride = nycc_rides_get_ride_object($ride);
  if ($include_leaders) {
    return implode(", ", array_merge(
      nycc_rides_get_users_emails($ride, 'field_ride_current_riders'),
      nycc_rides_get_users_emails($ride, 'field_ride_current_leaders')));
  } else {
    return implode(", ", nycc_rides_get_users_emails($ride, 'field_ride_current_riders'));
  }
}

function nycc_rides_get_all_waitlist_emails($ride) {
  return implode(", ", nycc_rides_get_users_emails(nycc_rides_get_ride_object($ride), 'field_ride_waitlist'));
}

function nycc_rides_speed2num($str) {
  $num = preg_match('/[0-9]+/', $str, $matches);
  return $num ? $matches[0] : 0;
}

function nycc_rides_spots_remaining($ride) {
  if (is_numeric($ride))
    $ride = node_load($ride);
  $no_of_spots = trim(nycc_field_get_text_value($ride->field_ride_spots));
  if (!$no_of_spots)
    return "Unlimited";
  $available_spots = $no_of_spots - nycc_rides_count_riders($ride);
  $no_of_waiters = nycc_rides_count_waiters($ride);
  if (!$available_spots && $no_of_waiters) {
    return  "$available_spots of $no_of_spots<br/>($no_of_waiters on waitlist)";
  }
  return "$available_spots of $no_of_spots";
}

function nycc_rides_has_spots($ride) {
  if (is_numeric($ride))
      $ride = node_load($ride);

  $no_of_riders = nycc_rides_count_riders($ride);
  $no_of_spots = trim($ride->field_ride_spots['und'][0]['value']);
  $available_spots = $no_of_spots - $no_of_riders;
  return (!$no_of_spots || ($available_spots > 0));
}

function nycc_rides_get_ride_status($ride) {
  if (is_numeric($ride))
    $ride = node_load($ride);
  
  // test for unsaved $ride which has no ride status field yet
  if (!$ride || !drupal_strlen($ride->title))
    return 'Pending';

  if ($ride->field_ride_status && drupal_strlen($ride->field_ride_status['und'][0]['value']))
    return $ride->field_ride_status['und'][0]['value'];
  //$sql = "SELECT field_ride_status_value FROM {content_type_rides} WHERE nid = :nid AND vid =:vid";
  //$q = db_query($sql, array(':nid'=>$ride->nid, ':vid'=>$ride->vid));
  //foreach ($q as $r)
  //{
  //  return $r->field_ride_status_value;
  //}

}

/* obsolete, no longer called
function nycc_rides_ride_exists($title, $date) {
  $date = nycc_rides_get_date($date);
    $sql = "SELECT n.nid FROM {node} n, {content_type_rides} r WHERE n.nid = r.nid AND n.vid = r.vid AND n.type = 'rides' AND n.title = ':title' AND r.field_ride_timestamp_value LIKE ':date%'";
    $q = db_query($sql, array(':title'=>$title, ':date'=>$date));

    return $q->rowCount()==0 ? false : true;
}
*/

function nycc_rides_ride_has_images($data) {
    if (is_numeric($data)) {
    $node = node_load($data);
    $images = $node->field_ride_image;
    } else if (is_array($data))
    $images = $data;
    else if (is_object($data))
    $images = $data->field_ride_image;
    else
    return FALSE;

    //dsm($data);
    if (is_array($images)) {
    foreach($images as $img){
        if (drupal_strlen($img['view']))
        return true;
    }
    }
    return FALSE;
}

function nycc_rides_ride_has_attachments($data) {
  if (is_numeric($data)) {
    $node = node_load($data);
    $attachments = $node->field_ride_attachments;
  } else if (is_array($data))
    $attachments = $data;
  else if (is_object($data))
    $attachments = $data->field_ride_attachments;
  else
    return FALSE;
  //dsm($data);
  if (is_array($attachments)) {
    foreach($attachments as $attachment){
      if (drupal_strlen($attachment['filename']))
        return true;
    }
  }
  return FALSE;
}

function nycc_rides_ride_should_be_enabled($ride, $acct=null){
  //returns array, first value is true/false (should be enabled), second value is reason, the third value indicates if the reason should be displayed

  $return_value = array();

  global $user;
  if(!$acct)
    $acct= $user;

    if (is_numeric($ride))
      $ride = node_load($ride);

    if (!is_object($ride)){
    $return_value =  array('value'=>false, 'reason'=>"could not load ride", 'display_msg'=>false);
    }

  if( empty($return_value) && (nycc_rides_get_ride_status($ride) != 'Approved' )){
    $return_value =  array('value'=>false, 'reason'=>"This ride is not Approved", 'display_msg'=>true);
  }

  if(empty($return_value) && !nycc_rides_ride_is_upcoming($ride) ){
    $return_value = array('value'=>false, 'reason'=>"This ride has already taken place", 'display_msg'=>true);
  }

  //check if rider has joined to many rides/waitlists
  $ride_time = strtotime(nycc_rides_get_ride_time_as_text($ride));
  $waiter_count = nycc_rides_count_waiters($ride);

  if(empty($return_value) && nycc_rides_is_leader($ride, $acct)){
    $return_value = array('value'=>false, 'reason'=>"Leaders can not join as participants.", 'display_msg'=>true);
  }

  if(empty($return_value) && nycc_rides_is_rider($ride, $acct)){
    $return_value = array('value'=>false, 'reason'=>"You have already joined ride", 'display_msg'=>true);
  }

  if(empty($return_value) && nycc_rides_is_waiting($ride, $acct)){
    $return_value = array('value'=>false, 'reason'=>"You have already joined waitlist", 'display_msg'=>true);
  }

  if(empty($return_value) && nycc_rides_get_user_ride_counts($ride_time, $acct) > 0 ){
     $return_value = array('value'=>false, 'reason'=>"Join Ride is disabled. Members may sign up for only one ride in a four hour period.", 'display_msg'=>true);
  }

  if(empty($return_value) && nycc_rides_get_user_waitlist_counts($ride_time, $acct) > 1 ) {
     $return_value = array('value'=>false, 'reason'=>"Join Waitlist is disabled. Members may sign up for 2 waitlists in the same four hour period.", 'display_msg'=>true);
  }

  //check if signup should be closed until a certain date
  $ride_enable_time = nycc_rides_ride_enable_time($ride);
  if ( empty($return_value) && $ride_enable_time > REQUEST_TIME ){
    $return_value = array('value'=>false, 'reason'=> "Join Ride is disabled until ".  date('l, F jS, Y \@ h:i A', $ride_enable_time), 'display_msg'=>true);
  }
  if (empty($return_value)){
    //if nothing else disqualified the ride, true should be returned
    $return_value = array('value'=>true, 'reason'=>"", 'display_msg'=>false);
  }

  return $return_value;

}

function nycc_rides_ride_enable_time($ride){
    if (is_numeric($ride))
      $ride = node_load($ride);

    if (!is_object($ride))
    return REQUEST_TIME; //if ride can't be loaded return current time to avoid errors caused by null values

  if(nycc_field_has_value($ride->field_ride_open_signup_days)){
    $ride_signup_days = nycc_field_get_value($ride->field_ride_open_signup_days);
    $days_before_ride = $ride_signup_days[0]['value'] ;
  } else{
    $days_before_ride = variable_get('nycc_rides_days_before_ride', '10'); //default set as variable.
  }

  if($days_before_ride == 0) //if ride has no restriction
    return REQUEST_TIME;

  $ride_time = strtotime(nycc_rides_get_ride_time_as_text($ride));
  return $ride_time - ($days_before_ride * 60 * 60 * 24);

}

function nycc_rides_ride_has_changed($ride, $value_name = null) {
  //compares current version of a ride against the last approved revision.
  //Optionally compares a specific value instead of the entire ride object.
  if (is_numeric($ride))
    $ride = node_load($ride);

  $rev = nycc_rides_last_approved_revision($ride);
  // title, description, spots, level, distance, speed, date, start time, start time minute, start time, select, from, from_select, leaders?

  if ($rev && $ride) {
    //if testing a specific field then just compare that field and return the result
    if (isset($value_name))
      return nycc_compare_values($ride->{$value_name}, $rev->{$value_name});

    if ($ride->title !=  $rev->title)
    {
      //dpm("title is different");
      return true;
    }
    if (! nycc_compare_values($ride->field_ride_description['und'][0]['value'], $rev->field_ride_description['und'][0]['value']))
    {
      //dpm("description is different");
      return true;
    }
    if (! nycc_compare_values($ride->field_ride_spots['und'][0]['value'] ,$rev->field_ride_spots['und'][0]['value']))
          {
      //dpm("spots is different");
      return true;
    }
    if (! nycc_compare_values($ride->field_ride_select_level['und'][0]['value'], $rev->field_ride_select_level['und'][0]['value']))
    {
      //dpm("level is different");
      return true;
    }
    if (! nycc_compare_values($ride->field_ride_distance_in_miles['und'][0]['value'], $rev->field_ride_distance_in_miles['und'][0]['value']))
    {
      //dpm("miles is different");
      return true;
    }
    if (! nycc_compare_values($ride->field_ride_speed['und'][0]['value'], $rev->field_ride_speed['und'][0]['value']))
    {
      //dpm("speed is different");
      return true;
    }
    if (! nycc_compare_values($ride->field_ride_timestamp['und'][0]['value'], $rev->field_ride_timestamp['und'][0]['value']))
    {
      //dpm("timestamp is different");
      return true;
    }
    if (! nycc_compare_values($ride->field_ride_from['und'][0]['value'], $rev->field_ride_from['und'][0]['value']))
    {
      //dpm("from is different");
      return true;
    }
    if (! nycc_compare_values($ride->field_ride_from_select['und'][0]['value'], $rev->field_ride_from_select['und'][0]['value']))
    {
      //dpm("from select is different");
      return true;
    }

    return FALSE;
  } else {
    drupal_set_message(check_plain("nycc_rides_ride_has_changed: Could not load last revision for ride", "error"));

  }

}

function nycc_rides_get_ride_spots_text($node){
  if (is_numeric($node))
    $node = node_load($node);

  if($node->type == 'rides') {
    $num_waiters = nycc_rides_count_waiters($node);
    $num_riders = nycc_rides_count_riders($node);
    /*
    Scenario 1: field_ride_spots is null and field_ride_signups 'Signups with waiting list'
      Set value to $count 'of unlimited'
    scenario 2: $node->field_ride_signups is "No signups or waiting list"
      set value to "Unlimited/No Sign-ups"
    Scenario 3: field_ride_spots is not null and numwaiters > 0
       0 of $spots (n waiting)
    Scenario 4: field_ride_spots is not null and numwaiters == 0
       ($spots-riders) of $spots
    */
    $signup_value = nycc_field_get_value($node->field_ride_signups);
    $has_spots = nycc_field_has_value($node->field_ride_spots);
    $ride_spots_value = nycc_field_get_value($node->field_ride_spots);

    if($has_spots && $signup_value[0]['value'] == "Signups with waiting list" ){
      return $num_riders . t(" of Unlimited");

    } else if ($signup_value[0]['value'] == "No signups or waiting list") {
      return "Unlimited/No Sign-ups";

    } else if($has_spots && ($num_waiters > 0) ) {
      return t("0 of ") . $ride_spots_value[0]['value'] . "( " .  $num_waiters . t(" waiting)");

    } else {

      return $ride_spots_value[0]['value']  - $num_riders . t(" of ") . $ride_spots_value[0]['value']   ;
    }
//         $node->content['field_ride_spots']['field']['items'][0]['#item']['value'] =
//             ($node->field_ride_spots['und'][0]['value'] ? $node->field_ride_spots['und'][0]['value'] - $num_riders .t(" of ").
//             $node->field_ride_spots['und'][0]['value'] : (t("Unlimited") .
//             (($node->field_ride_signups['und'][0]['value'] == "No signups or waiting list") ? "/No Sign-ups" : "/".
//             $num_riders))) . ((($node->field_ride_signups['und'][0]['value'] != "No signups or waiting list")
//             && $num_waiters) ? " (". $num_waiters ." waiting)":"");
  }
}



//END RIDE UTILITY FUNCTIONS

//TBD Functions
function nycc_rides_status_select_ahah($node, $ride_status) {
  $form = nycc_rides_ride_status_select_form($node, $ride_status);
    return "<form>". drupal_render(form_expand_ahah($form)). "</form>";
}

function nycc_rides_type_select_ahah($node, $ride_type) {
    $form = nycc_rides_type_select_form($node, $ride_type);
    return "<form>". drupal_render(form_expand_ahah($form)). "</form>";
}

//TODO: WHERE IS THIS USED?
function nycc_rides_status_select_form($node, $ride_status) {
    if (is_numeric($node))
      $nid = $node;
    else
      $nid = $node->nid;

    $ele = array(
      '#type' => 'select',
      '#id' => "ride-status-$nid",
      '#name' => 'ride-status',
      '#attributes' => array('class' => 'ride-status'),
      '#options' =>  nycc_rides_ride_status_options(),
        '#value' => $ride_status,
      '#ajax' => array(
          'path' => "nycc-update-ride-status-js/$nid",
          'wrapper' => "ride-status-$nid-wrapper",
          'event' => 'change',
      ),
    );
    return $ele;
}

function nycc_rides_type_select_form($node, $ride_type) {
    if (is_numeric($node))
      $nid = $node;
    else
      $nid = $node->nid;

    $ele = array(
      '#type' => 'select',
      '#id' => "ride-type-$nid",
      '#name' => 'ride-type',
      '#attributes' => array('class' => 'ride-type'),
      '#options' =>  nycc_rides_ride_type_options(),
      '#value' => $ride_type,
      '#ajax' => array(
          'path' => "nycc-update-ride-type-js/$nid",
          'wrapper' => "ride-type-$nid-wrapper",
          'event' => 'change',
      ),
    );
    return $ele;
}

function nycc_rides_update_ride_status($ride, $ride_status) {
  nycc_rides_get_ride_object($ride);

  if ($ride && in_array($ride_status, nycc_rides_ride_status_options())) {
    //$old_status = nycc_rides_get_ride_status($node);
    $ride->field_ride_status['und'][0]['value'] = $ride_status;
    //$ride->field_ride_additional_dates['und'][0]['value'] = "";
    node_save($ride);
    
    global $user;
    switch ($ride_status){
      case 'Cancelled':
        //drupal_set_message("firing event: nycc_rides_ride_is_cancelled");
        rules_invoke_event('nycc_rides_ride_is_cancelled', $user, $ride);
        break;
      
    case 'Revised':
      //drupal_set_message("firing event: nycc_rides_ride_is_revised");
      rules_invoke_event('nycc_rides_ride_is_revised', $user, $ride, nycc_rides_last_approved_revision($ride));
      break;
    
    case 'Approved':
      //drupal_set_message("firing event: nycc_rides_ride_is_approved");
      rules_invoke_event('nycc_rides_ride_is_approved', $user, $ride);
      break;
    
    case 'Submitted':
      //drupal_set_message("firing event: nycc_rides_ride_is_submitted");
      rules_invoke_event('nycc_rides_ride_is_submitted', $user, $ride);
      break;
    }      

  } else {
    drupal_set_message(check_plain('nycc_rides_update_ride_status: update failed. invalid node or ride status'), "error");
  }
}


function nycc_rides_update_ride_status_js() {
  $nid = arg(1);
  $ride_status = $_POST["ride-status"];
  $ride = nycc_rides_get_ride_object($nid );
  
  if ($ride) {
    if (in_array($ride_status, nycc_rides_ride_status_options())) {
        $ride->field_ride_status['und'][0]['value'] = $ride_status;
        //$ride->field_ride_additional_dates['und'][0]['value'] = "";
        node_save($ride);
        
        global $user;
        switch ($ride_status){
          case 'Cancelled':
            //drupal_set_message("firing event: nycc_rides_ride_is_cancelled");
            rules_invoke_event('nycc_rides_ride_is_cancelled', $user, $ride);
            break;
          
        case 'Revised':
          //drupal_set_message("firing event: nycc_rides_ride_is_revised");
          rules_invoke_event('nycc_rides_ride_is_revised', $user, $ride, nycc_rides_last_approved_revision($ride));
          break;
        
        case 'Approved':
          //drupal_set_message("firing event: nycc_rides_ride_is_approved");
          rules_invoke_event('nycc_rides_ride_is_approved', $user, $ride);
          break;
        
        case 'Submitted':
          //drupal_set_message("firing event: nycc_rides_ride_is_submitted");
          rules_invoke_event('nycc_rides_ride_is_submitted', $user, $ride);
          break;
        } 
        $output_html = nycc_rides_ride_status_select_ahah($ride, $ride_status);
    } else {
        $output_html = "invalid ride status: $ride_status";
      }
  } else {
    $output_html = "invalid ride node id: $nid";
  }
  drupal_json(array('status' => TRUE, 'data' => $output_html));
}

function nycc_rides_update_ride_type_js() {
  $nid = arg(1);
  $ride_type = $_POST["ride-type"];
  $node = node_load( $nid);
  if ($node) {
    if (in_array($ride_type, nycc_rides_ride_type_options())) {
        $node->field_ride_type['und'][0]['value'] = $ride_type;
        node_save($node);
        $output_html = nycc_rides_type_select_ahah($node, $ride_type);
    } else {
        $output_html = "invalid ride type: $ride_type";
      }
  } else {
    $output_html = "invalid ride node id: $nid";
  }
  drupal_json(array('status' => TRUE, 'data' => $output_html));
}


function nycc_rides_existing_rides_js() {
  $ride_date = $_POST["date"];
  print nycc_rides_output_existing_rides($ride_date);
}

function nycc_rides_ride_coordinators() {
  $coordinators = array();
  //$sql = 'SELECT c.field_ride_coordinator_value AS level, n.title as name, p.field_phone_value as phone, u.mail, u.uid FROM {content_field_ride_coordinator} c, {content_type_profile} p, {node} n, {users} u WHERE n.nid=c.nid AND p.nid=n.nid AND u.uid=n.uid AND field_ride_coordinator_value IS NOT NULL ORDER BY 1';
  $sql =<<<EOS
  SELECT 
  c.field_ride_coordinator_value AS level,
  n.title AS name,
  p.field_phone_value AS phone,
  u.mail,
  u.uid
  FROM 
  {node} n,
  {users} u,
  {field_data_field_phone} p,
  {field_data_field_ride_coordinator} c
  WHERE
  u.uid = n.uid AND 
  p.entity_id = n.nid AND
  c.entity_id = n.nid AND
  p.revision_id = n.vid AND
  c.revision_id = n.vid AND
  c.field_ride_coordinator_value IS NOT NULL 
  ORDER BY 1;
EOS;
  $results = db_query($sql);
  foreach ($result as $coordinator) {
    $coordinator->level = strtoupper(substr($coordinator->level,0,1)); // lcfirst($coordinator->level);
    $coordinators[] = $coordinator;
  }
  return $coordinators;
}

function nycc_rides_output_ride_coordinators() {
  $output = "<div class='ride-coordinators'>";
  $output .= "<label>". t("Ride Coordinators:") ."</label>";
  $coordinators = nycc_rides_ride_coordinators();
  foreach ($coordinators as $coordinator) {
    if (strtoupper($coordinator->level) == "A")
      $output .= "<div class='coordinator-a-rides'>A-rides: <a href='/user/" .
      $coordinator->uid . "' title='View profile in another tab or window...' target=_blank'>" .
      $coordinator->name . "</a>,<br/>" .
      $coordinator->phone . ",<br/><a title='Send email...' href=mailto:a-rides@nycc.org>a-rides@nycc.org</a></br></br></div>";

    if (strtoupper($coordinator->level) == "B")
      $output .= "<div class='coordinator-b-rides'>B-rides: <a href='/user/" .
      $coordinator->uid . "' title='View profile in another tab or window...' target=_blank'>" .
      $coordinator->name . "</a>,<br/>" .
      $coordinator->phone . ",<br/><a title='Send email...' href=mailto:b-rides@nycc.org>b-rides@nycc.org</a></br></br></div>";

    if (strtoupper($coordinator->level) == "C")
      $output .= "<div class='coordinator-c-rides'>C-rides: <a href='/user/" .
      $coordinator->uid . "' title='View profile in another tab or window...' target=_blank'>" .
      $coordinator->name . "</a>,<br/>" .
      $coordinator->phone . ",<br/><a title='Send email...' href=mailto:c-rides@nycc.org>c-rides@nycc.org</a></div>";
  }
  $output .= "</div>";
  return $output;
}

function nycc_rides_output_ride_classification() {
  $output = "<div class='ride-classification'>";
  $output .= "<ul>";
  $output .= "  <li>A = Fast, with paceline skills required</li>";
  $output .= "  <li>B = Moderate</li>";
  $output .= "  <li>C = Gentle (a good introduction to the Club)</li>";
  $output .= "</ul>";
  $output .= "</div>";
  return $output;
}

function nycc_rides_output_existing_rides($ride_date) {
  $found = FALSE;
  $ride_date_ui = nycc_rides_get_date($ride_date, "F d, Y");
  $ride_date_db = nycc_rides_get_date($ride_date);
  $output = "<div class='existing-rides'>";
  $output .= "<h3>" .t("Rides planned for"). " $ride_date_ui ($ride_date_db)</h3>";
  $output .= "<ul>";
  $sql =<<<EOS
    SELECT n.nid, n.title, l.field_ride_select_level_value
    FROM {node} n, {field_data_field_ride_select_level} l, {field_data_field_ride_timestamp} t
    WHERE n.nid = l.entity_id AND n.vid = l.revision_id AND
    n.nid = t.entity_id AND n.vid = t.revision_id AND
    n.status <> 0 AND t.field_ride_timestamp_value LIKE ':s%'
EOS;
  $q = db_query($sql,
          array(':s'=>$ride_date_db));
  foreach($q as $row) {
    $found = TRUE;
    $output .= "<li class='ride'><a target='_blank' title='View ride details...' href=\"/node/". $row['nid'] ."\"> " . $row['title'] . "</a> - Level: " . $row['level'] . "</li>";
  }
  if (!$found)
    $output .= "<li class='no-rides'>" .t("No other rides found for this date."). "</li>";
  $output .= "</ul>";
  $output .= "</div>";
  return $output;
}

/* 
// not used in theme or mods - obsolete?
function nycc_rides_output_block($title, $html, $classes = "") {
  $title = drupal_strlen($title) ? "<h2>$title</h2>" : "";
  $output = "<div class='nycc-block $classes'>$title$html</div>";
  return $output;
}
*/

function nycc_rides_approve_rides() {
  global $user;
  $output = "Access denied";
  $title = "Approve Rides";
  $profile_node = profile2_load_by_user($user->uid, "profile");
  
  if(isset($profile_node->field_ride_coordinator['und'][0]['value'])) {
    $level = substr($profile_node->field_ride_coordinator['und'][0]['value'], 0, 1);
    $title = "Approve $level-Rides";
    $output = views_embed_view('roster_of_rides', 'page_1', $level);
  }
  else if (in_array("vp of rides", $user->roles) || in_array("administer", $user->roles) ) {
    $output = views_embed_view('roster_of_rides', 'page_2');
  }
  drupal_set_title($title);
  return $output;
}

// print for ajax return
function nycc_rides_ride_participants_js($nid = NULL) {
  print nycc_rides_output_ride_participants($nid);
}

function nycc_rides_get_user_full_name($account = NULL) {
  global $user;
  if (!$account){
    $account = $user;
    $uid = $account->uid;
  } else if (is_object($account)) {
    $uid = $account->uid;
  } else {
    $uid = $account;
  }
  
  // QUICK FIX: just return user name for now
  if ($account > 0)
    $account = user_load($account);
  return $account->name;

  $cp = profile2_load_by_user($uid, "profile");
  if($cp) {
    return nycc_field_get_text_value($cp->field_first_name) . " " . nycc_field_get_text_value($cp->field_last_name);
  } else {
    //TODO: Add Watchdog.
    drupal_set_message(check_plain("nycc_rides_get_user_full_name: Could not load profile for user: $uid"), "error");
  }
  return "";
}

function nycc_rides_output_ride_participants($nid = NULL) {
  $ride = nycc_rides_get_ride_object($nid);
  if ($ride) {
    if(nycc_rides_ride_allows_signups($ride)){
      return nycc_rides_output_list_of_users($ride ,'field_ride_current_riders', 'my_rides');
    }
  } else {
    return array();
  }
}

function nycc_rides_output_ride_leaders($nid = NULL) {
  $ride = nycc_rides_get_ride_object($nid);
  if ($ride) {
    return nycc_rides_output_list_of_users($ride ,'field_ride_current_leaders', null);
  } else {
    return array();
  }
}



function nycc_rides_output_ride_waiters($nid = NULL) {
  $ride = nycc_rides_get_ride_object($nid);
  if ($ride) {
    return nycc_rides_output_list_of_users($ride ,'field_ride_waitlist', 'my_rides');
  } else {
    return array();
  }
}

function nycc_rides_get_ride_object($nid=null, $vid=null, $reset = FALSE){
  
  if (! isset($nid))
    $nid = ($_POST && ($_POST['nid']) && ($_POST['nid'] > 0)) ? $_POST['nid'] : ((arg(2) > 0) ? arg(2) : arg(1));

  if (is_object($nid) && $nid->type =='rides')
    return $nid;

  if (is_numeric($nid) && ($nid > 0)){
    $ride =  node_load( $nid, $vid, $reset);
    if(is_object($ride) && $ride->type='rides')
      return $ride;
  }
  else
    return null;
}

function nycc_rides_output_list_of_users($ride, $field_name, $path = NULL ) {
  $users = array();
  if ($ride) {
    //$output = "<ul class='nycc-ride-particpants-list'>";
    if (nycc_field_has_value( $ride->{$field_name})){
      foreach(nycc_refs2ids(nycc_field_get_value($ride->{$field_name})) as $this_uid) {
        if($path) {
          $user_path = "/user/$this_uid/$path" ;
          $users[] = l(t(nycc_rides_get_user_full_name($this_uid)), $user_path,
              array('attributes' => array('class' => array('btn', 'btn-primary', 'nycc-btn', 'nycc-join-btn'))));
        } else {
          $users[] = nycc_rides_get_user_full_name($this_uid);
        }
    //TODO: FIX Class definition for this
      }
    }
  }
  return $users;
}

// print for ajax return
function nycc_rides_ride_waitlist_js($nid = NULL) {
    print nycc_rides_output_ride_waitlist($nid);
}

function nycc_ride_status_options(){
  return nycc_rides_ride_status_options();
}
function nycc_rides_ride_status_options() {
  return array("Approved"=>"Approved", "Cancelled"=>"Cancelled", "Pending"=>"Pending", "Flagged" => "Flagged", "Revised" => "Revised", "Submitted"=>"Submitted");
}
function nycc_rides_get_ride_types(){}

function nycc_ride_type_options() {
  return nycc_rides_ride_type_options();
}
function nycc_rides_ride_type_options() {
     return array( "" => "",
           "Cue Sheet Ride" => "Cue Sheet Ride",
         "Training Ride" => "Training Ride");
  //return array("" => "", "Cue Sheet Ride"=>"Cue Sheet Ride", "Training Ride"=>"Training Ride");
}

function nycc_rides_ride_level_options() {
  return array("A"=>"A-ride", "B"=>"B-ride", "C"=>"C-ride");
}

// function nycc_rides_ride_attend(&$form_state, $node) {
//   if (is_numeric($node))
//     $node = node_load(array('nid' => $node));
//
//
//   // TODO: ensure that this works if no journal module
//   nycc_rides_turn_off_journal_form('nycc_rides_ride_attend');
//
//   $can_modify = nycc_rides_can_modify_ride($node);
//
//   // WARNING: do not save node unless next line replaced with safe gid calculation
// //   $gps = $node->og_groups;
// //   $groupid = count($gps) ? array_shift($gps) : 0;
// //   // TODO: restrict to leaders, group admins, vpor, ride coordinator, administer
//   if (!$can_modify /*&& !nycc_rides_is_rider($node)*/) {
//     $form['error'] = array(
//       '#type' => 'markup',
//       '#value' => $groupid ? "This information is restricted to ride leaders, captains and administrators." : "This information is restricted to ride leaders, participants and administrators.",
//     );
//     return $form;
//   }
//
//   if ($node->type != 'rides') {
//     $form['error'] = array(
//       '#type' => 'markup',
//       '#value' => "This is not a ride!",
//     );
//     return $form;
//   }
//
//   $num_riders = nycc_rides_count_riders($node);
//   if (!$num_riders) {
//     $form['error'] = array(
//       '#type' => 'markup',
//       '#value' => "There are no riders or this is not a ride!",
//     );
//     return $form;
//   }
//
//   $form['nid'] = array(
//     '#value' => $node->nid,
//     '#type' => 'hidden',
//     '#name' => 'nid',
//   );
//
//   $form['date'] = array(
//     '#type' => 'markup',
//     '#prefix' => '<div class="nycc-attendance-date">',
//     '#value' => substr($node->field_date_ride_first['und'][0]['value'], 0, 10) ." ". $node->field_ride_start_time_hour['und'][0]['value'] .":". $node->field_ride_start_time_min['und'][0]['value'] ." ". $node->field_ride_start_time_select['und'][0]['value'],
//     '#suffix' => '</div>',
//   );
//
//   $form['from'] = array(
//     '#type' => 'markup',
//     '#prefix' => '<div class="nycc-attendance-from">',
//     '#value' => $node->field_ride_from['und'][0]['value'] . $node->field_ride_from_select['und'][0]['value'],
//     '#suffix' => '</div>',
//   );
//
//   if ($can_modify) {
//     $form['instructions'] = array(
//       '#type' => 'markup',
//       '#prefix' => '<div class="nycc-attendance-instructions">',
//       '#value' => $groupid ? "Check each member that attended this ride, add notes, scores and press 'Update'." : "Check each member that attended this ride and press 'Update'.",
//       '#suffix' => '</div>',
//     );
//
//     $form['toggle'] = array(
//       '#type' => 'markup',
//       '#prefix' => '<div class="nycc-attendance-toggle">',
//       '#value' => "<a href='#' title='Toggle all checkboxes on/off...'>Toggle all checkboxes on/off</a>",
//       '#suffix' => '</div>',
//     );
//   }
//
//   // load $notes array, indexed by user ids
//   $notes = array();
//   $scores = array();
//   $sql = "SELECT uid, notes, score FROM {nycc_ride_notes} WHERE nid = %d";
//   $q = db_query($sql, $node->nid);
//   while($r = db_fetch_object($q)) {
//     $notes[$r->uid] = $r->notes;
//     $scores[$r->uid] = $r->score;
//   }
//
//   foreach ($node->field_ride_current_riders as $rider) {
//     $rider_user = user_load(array('uid' => $rider['uid']));
//     $profile_node = content_profile_load('profile', $rider['uid']);
//     $form['hr-'. $rider['uid']] = array(
//       '#type' => 'markup',
//       '#value' => '<hr/>',
//     );
//     $form['uid-'. $rider['uid']] = array(
//       '#type' => 'checkbox',
//       '#attributes' => array('class' => 'attendance'),
//       '#title' => '<strong>' . $profile_node->title . "</strong> (". $rider_user->mail .")",
//       '#disabled' => !$can_modify,
//     );
//     // only show score and notes for group rides
//     if ($groupid) {
//       $form['score-'. $rider['uid']] = array(
//         '#type' => 'textfield',
//         '#attributes' => array('class' => 'score'),
//         '#title' => 'Score',
//         '#value' => $scores[$rider['uid']],
//         '#disabled' => !$can_modify,
//         '#description' => 'Max 32 characters.',
//         '#maxlength' => 32,
//         '#size' => 32,
//       );
//       $form['notes-'. $rider['uid']] = array(
//         '#type' => 'textarea',
//         '#attributes' => array('class' => 'notes'),
//         '#title' => 'Notes',
//         '#value' => $notes[$rider['uid']],
//         '#disabled' => !$can_modify,
//       );
//     } else {
//       $form['score-'. $rider['uid']] = array(
//         '#type' => 'hidden',
//         '#value' => "",
//       );
//       $form['notes-'. $rider['uid']] = array(
//         '#type' => 'hidden',
//         '#value' => "",
//       );
//     }  // $groupid
//   }
//
//   foreach ($node->field_ride_attendees as $attendee) {
//     if ($attendee['uid'])
//       $form['uid-'. $attendee['uid']]['#default_value'] = TRUE;
//   }
//
//   // todo: check for particpants, ride status, etc - do this for button/link display too
//
//   // todo: consider access. who can view and who can edit?
//   // todo: consider: view only version, checkboxes disabled and no save button or disabled, extra message as to why
//
//   // todo: output descriptive text: date/time, location, speed, etc.
//
//   // wishlist: show user icons/pictures
//   // wishlist: show link for user contact
//
//   if ($can_modify) {
//     $form['button'] = array(
//       '#type' => 'submit',
//       '#value' => t('Update'),
//       //'#attributes' => array('class' => 'hide'),
//       '#id' => 'nycc-update-attendance',
//     );
//   }
//
//   $form['cancel'] = array(
//     '#type' => 'markup',
//     //'#prefix' => '<div class="nycc-attendance-cancel">',
//     '#value' => "<a href='/node/". $node->nid ."' title='Return to ride page...'>$msg</a>",
//     //'#suffix' => '</div>',
//   );
//
//   drupal_set_title("Ride Attendance for ". $node->title);
//
//   $msg = $can_modify ? "Cancel changes, return to ride page" : "Return to ride page";
//   return $form;
// }
//
// function nycc_ride_attend_submit($form, &$form_state) {
//   //dpm($form['#post']);
//   //dpm(get_defined_vars());
//   $node = node_load(array('nid' => arg(1)));
//   if ($node) {
//     // BUG: node is resaved
//     $gps = $node->og_groups;
//     $groupid = count($gps) ? array_shift($gps) : NULL;
//
//     unset($node->field_ride_attendees);
//     $node->field_ride_attendees = array();
//     //foreach ($form_state['values'] as $ndx => $value) {
//     //  list($prefix, $uid) = explode("-", $ndx);
//     //}
//     $scores = array();
//     foreach ($form['#post'] as $ndx => $value) {
//       list($prefix, $uid) = explode("-", $ndx);
//       if (($prefix == 'uid') && $uid && ($value==1))
//         $node->field_ride_attendees[] = array('uid' => $uid);
//       if (($prefix == 'score') && $uid)
//         $scores[$uid] = $value;
//     }
//     //dpm(array($scores));
//     foreach ($form['#post'] as $ndx => $value) {
//       list($prefix, $uid) = explode("-", $ndx);
//       $value = trim($value);
//       if (($prefix == 'notes') && $uid) {
//         //$sql = "REPLACE INTO {nycc_ride_notes} (uid, nid, notes) VALUES (%d, %d, '%s')";
//         //$q = db_query($sql, $uid, $node->nid, $value);
//         if (db_result(db_query('SELECT 1 FROM {nycc_ride_notes} WHERE uid = %d AND nid = %d', $uid, $node->nid))) {
//           if (drupal_strlen($value) || drupal_strlen($scores[$uid])) {
//             $sql = "UPDATE {nycc_ride_notes} SET notes = '%s', score = '%s', gid = %d WHERE uid = %d AND nid = %d";
//             $q = db_query($sql, $value, $scores[$uid], $groupid, $uid, $node->nid);
//           } else {
//             $sql = "DELETE FROM {nycc_ride_notes} WHERE uid = %d AND nid = %d";
//             $q = db_query($sql, $uid, $node->nid);
//           }
//         } else {
//           if (drupal_strlen($value) || drupal_strlen($scores[$uid])) {
//             $sql = "INSERT INTO {nycc_ride_notes} (uid, nid, gid, notes, score) VALUES (%d, %d, %d, '%s', '%s')";
//             $q = db_query($sql, $uid, $node->nid, $groupid, $value, $scores[$uid]);
//           }
//         }
//       }
//     }
//     //$node->field_ride_additional_dates['und'][0]['value'] = "";
//     if (!count($node->field_ride_attendees))
//       $node->field_ride_attendees[0] = NULL;
//     if (!isset($node->field_ride_waitlist))
//       $node->field_ride_waitlist = array(0 => NULL);
//     //dpm($node->field_ride_waitlist);
//     node_save($node);
//     drupal_set_message("Ride attendance and notes updated.");
//   }
// }

//// to do: check node type = rides
//function nycc_rides_ride_cancel_confirm(&$form_state, $node) {
//  if (is_numeric($node))
//    $node = node_load( $node);
//
//  $form['nid'] = array(
//    '#type' => 'value',
//    '#value' => $node->nid,
//  );
//
//  return confirm_form($form,
//    t('Are you sure you want to cancel %title?', array('%title' => $node->title)),
//    isset($_GET['destination']) ? $_GET['destination'] : 'node/'. $node->nid .'/edit',
//    //t('This action cannot be undone.'),
//    t("This action will cause email notifications to be sent to all particpants, leaders and ride coordinators"),
//    t('Yes, cancel this ride'),
//    t('No, return to edit form')
//  );
//}
//
//function nycc_rides_ride_cancel_confirm_submit($form, &$form_state) {
//  if ($form_state['values']['confirm']) {
//    $ride = node_load($form_state['values']['nid']);
//    nycc_rides_update_ride_status($ride, 'Cancelled');
//    drupal_set_message(check_plain('Ride '. $ride->title .' cancelled'));
//  }
//  $form_state['redirect'] = 'node/'. $form_state['values']['nid'];
//}

// function nycc_menu_alter(&$items) {
//   //var_dump($items);
// }

//
// function nycc_rides_ride_reminder($timestamp) {
//   $rrp = variable_get(nycc_ride_reminder_period, 48);
//   $rrps = $rrp * 60 * 60;
//   $r1 = $timestamp + $rrps;
//   $r2 = $r1 + 60 * 60 - 1;
//   // TODO: check for send ride reminders on ride
//   // query for all approved rides whose start date and time is during rrp from timestamp
//   $sql =<<<EOS
// SELECT N.nid as nid FROM {node} N, {content_type_rides} R
// WHERE N.nid = R.nid AND N.vid = R.vid AND R.field_ride_status_value = "Approved" AND N.type = "rides" AND
//   UNIX_TIMESTAMP(CONCAT(
//     DATE_FORMAT(R.field_ride_timestamp_value, "%Y-%m-%%d"),
//     "T",
//     If(R.field_ride_start_time_select_value = "AM", R.field_ride_start_time_hour_value, IF(R.field_ride_start_time_hour_value < 12, R.field_ride_start_time_hour_value+12, R.field_ride_start_time_hour_value-12)),
//     ":",
//     R.field_ride_start_time_min_value,
//     ":00"
//   ))
//   BETWEEN $r1 AND $r2;
// EOS;
//   $q = db_query($sql);
//   while ($row = db_fetch_object($q)) {
//     $ride = node_load(array('nid' => $row->nid));
//     //$rfound = TRUE;
//     watchdog("ride reminders", date("H:i:s") ." - <a href='/node/". $ride->nid ."'>". $ride->title ."</a>", array(), WATCHDOG_INFO);
//     if ($ride) {
//       $current_riders = $ride->field_ride_current_riders;
//       //$rfound2 = FALSE;
//       foreach($current_riders as $val) {
//         //$rfound2 = TRUE;
//         //watchdog("ride reminders", "rider found: ". var_export($val, 1));
//         $acct = user_load($val['uid']);
//         if ($acct) {
//           $cp = content_profile_load('profile', $acct->uid);
//           if ($cp) {
//             if ($cp->field_ride_reminders['und'][0]['value'] != "false") {
//               $context = array('hook' => 'cron', 'op' => 'send', 'node' => $ride, 'user' => $acct /*, 'profile'=> $cp*/);
//               actions_do(2, $acct, $context);     // 2 is the email action for ride reminders
//               watchdog("ride reminders", $acct->mail ." sent a reminder for ride <a href='/node/". $ride->nid ."'>". $ride->title ."</a>", array(), WATCHDOG_INFO);
//             }
//           }  // cp
//         } // acct
//       }  // for
//       //if (!$rfound2)
//         //watchdog("ride reminders", "no riders found");
//       // mark ride as notified (todo: add cck field for this and add to query)
//     }  // ride
//   }  // while
//   //var_dump($row);
//   //if (!$rfound)
//   //  watchdog("ride reminders", "no rides found");
// }
//
// function nycc_ride_reminders_test($timestr) {
// //  if (($timestr > 0) || ($timestr < 0))
// //    $timestr .= " day";
//   $t = strtotime($timestr);
//   if (!$t)
//     $t = REQUEST_TIME;
//   nycc_ride_reminder($t);
//   print "$timestr = $t done! check the watchdog log - current time is ". REQUEST_TIME;
// }


// function nycc_ride_overlaps_reminder() {
//   $now = REQUEST_TIME;
//   $lastcron = variable_get("nycc_last_ride_overlaps_cron_time", 0);
//   if (($now - $lastcron) < 24 * 60 * 60)
//     return;
//   variable_set("nycc_last_ride_overlaps_cron_time", $now);
//   watchdog("rides", "checking for ride overlaps", array(), WATCHDOG_INFO);
//
//   $sql =<<<EOS
// SELECT T1.uid, T1.nid AS ride1, T1.title AS title1, T1.time AS time1, T1.date AS date1, T1.joined AS joined1,
// T2.nid AS ride2, T2.title AS title2, T2.time AS time2, T2.date AS date2, T2.joined AS joined2, TIMESTAMPDIFF(MINUTE, T1.time, T2.time) AS diff
// FROM viewRideSignups T1, viewRideSignups T2
// WHERE T1.uid = T2.uid AND T1.date = T2.date AND ((T1.time <= T2.time AND T1.nid < T2.nid) OR (T1.time < T2.time))
// AND TIMESTAMPDIFF(MINUTE, T1.time, T2.time) < 4 * 60
// AND (T1.joined = 1 OR T2.joined = 1)
// AND (T1.uid, T1.date) IN
//   (SELECT uid, date FROM viewRideSignups
//    GROUP BY uid, date
//    HAVING count(*) > 1
//   )
// ORDER BY T1.uid, T1.date;
// EOS;
//
//   $lastuid = 0;
//   $lastdate = "";
//   $text = "";
//
//   $q = db_query($sql);
//   while ($row = db_fetch_object($q)) {
//     if ($lastuid != $row->uid) {
//       if (drupal_strlen($text)) {
//
//         $acct = user_load($lastuid);
//         if ($acct) {
//           $cp = content_profile_load('profile', $acct->uid);
//           if ($cp) {
//               $cp->field_profile_extra['und'][0]['value'] = $text ."\n\n";
//               $context = array('hook' => 'cron', 'op' => 'send', 'node' => $cp, 'user' => $acct);
//               actions_do(3, $acct, $context);     // 3 is the email action for ride overlap reminders
//               watchdog("ride overlaps", "email user <a href='/user/". $acct->uid ."'>". $acct->name ."</a>", array(), WATCHDOG_INFO);
//           }  // cp
//         } // acct
//         $text = "";
//         $lastdate = "";
//       }
//     }
//     // TODO: use row data to generate line for email, end with newline
//     // fields: uid, ride1, time1, date1, joined1, ride2, time2, date2, joined2, diff
//     //$line = var_export($row, 1) ."\n";
//     if ($row->date1 != $lastdate)
//       $text .= substr($row->date1, 0, 10) . "\n\n";
//     $line = "Ride <a href='http://nycc.org/node/". $row->ride1 ."'>". $row->title1 ."</a> at ". substr($row->time1, 11, 5) ." (". ($row->joined1 ? "joined" : "waiting") .")\n overlaps with <a href='http://nycc.org/node/". $row->ride2 ."'>". $row->title2 ."</a> at ". substr($row->time2, 11, 5) ." (". ($row->joined2 ? "joined" : "waiting") .")\n\n";
//     $text .= $line;
//     $lastuid = $row->uid;
//     $lastdate = $row->date1;
//   }  // while
// }  // nycc_ride_overlaps_reminder
//
// function nycc_rides_ride_overlaps_user($acctuid, $ridetimestamp) {
//   if (!$ridetimestamp) {
//     // todo: fix this
//     //watchdog("nycc_rides_ride_overlaps_user", "Invalid ride timestamp param: $ridetimestamp.", array(), WATCHDOG_INFO);
//     return 0;
//   }
//   $sql = "SELECT COUNT(*) AS cnt FROM {viewRideSignups} vrs WHERE joined = 0 AND uid = $acctuid AND TIMESTAMPDIFF(MINUTE, vrs.time, $ridetimestamp) < 4 * 60";
//   $q = db_query($sql);
//   if ($q) {
//     $row = db_fetch_object($q);
//     if ($row)
//       return $row->cnt;
//     else {
//       watchdog("nycc_rides_ride_overlaps_user", "Unable to fetch row.", array(), WATCHDOG_ERROR);
//     }
//   } else {
//     watchdog("nycc_rides_ride_overlaps_user", "Unable to execute query: $sql.", array(), WATCHDOG_ERROR);
//   }
//   return 0;
// }

//
//function nycc_rides_join_ride_form($ride) {
//  $rid = is_object($ride) ? $ride->nid : $ride;
//  $form = array(
//    //'#action' => 'nycc-join-ride',
//  );
//  $form['nid'] = array(
//    '#value' => $rid,
//    '#type' => 'hidden',
//    '#name' => 'nid',
//  );
//  $form['button'] = array(
//    '#type' => 'submit',
//    '#value' => t('Join this ride or waiting list'),
//    '#attributes' => array('class' => 'hide'),
//    '#id' => 'nycc-join-ride',
//  );
//  return "<form method='post' action='/nycc-join-ride/$rid'>". drupal_render($form) ."</form>";
//}
//
//function nycc_rides_withdraw_from_ride_form($ride) {
//  $rid = is_object($ride) ? $ride->nid : $ride;
//  $form = array(
//    //'#action' => 'nycc-withdraw-from-ride',
//  );
//  $form['nid'] = array(
//    '#value' => $rid,
//    '#type' => 'hidden',
//    '#name' => 'nid',
//  );
//  $form['button'] = array(
//    '#type' => 'submit',
//    '#value' => t('Withdraw from this ride or waiting list'),
//    '#attributes' => array('class' => 'hide'),
//    '#id' => 'nycc-withdraw-from-ride',
//  );
//  return "<form method='post' action='/nycc-withdraw-from-ride/$rid'>". drupal_render($form) ."</form>";
//}
//
//function nycc_rides_output_similar_rides($ride) {
//    // and date in future?
//    $output = "<div class='similar-rides'>";
//    $output .= "<h2>" .t("Similar Rides") ."</h2>";
//    $output .= "<ul>";
//
//    if (is_numeric($ride))
//    $ride = node_load($ride);
//    $today = date('"Y-m-d"');
//    $sql = "
//      SELECT n.nid, n.title, r.field_ride_timestamp_value AS date, r.field_ride_status_value AS status
//      FROM {node} n, {content_type_rides} r
//      WHERE n.nid = r.nid
//        AND n.vid = r.vid
//        AND n.type='rides'
//        AND n.status <> 0
//        AND n.title = ':title'
//        AND n.nid <> :nid
//        AND field_ride_status_value <> 'cancelled'
//        AND field_ride_timestamp_value > ':date'
//        ORDER BY 3 DESC, 1 DESC;";
//
//  $q = db_query($sql, array(':title'=>$ride->title, ':nid'=>$ride->nid, ':date'=>$today));
//    foreach($q as $row) {
//      $found = TRUE;
//      $path = "node/" . $row->nid;
//      $output .= "<li class='ride'><a target='_blank' title='View ride details...' href=\"/".
//          $path ."\"> " . $row->title . "</a> - " . date("m/d/Y", strtotime($row->date)) .
//          " - ". substr($row->status, 0, 1) ."</li>";
//    }
//  if (!$found)
//      $output .= "<li class='no-rides'>" .t("No other rides found."). "</li>";
//    $output .= "</ul>";
//    $output .= "</div>";
//    return $output;
//}
// function nycc_update_group_user_status_js() {
//   $id = $_POST["id"];
//   $tid = $_POST["tid"];
//   list($temp, $gid, $uid) = explode("-", $id);
//   // validate, use token ?
//   $sql = "REPLACE INTO {nycc_group_user_status} (gid, uid, tid) VALUES (%d, %d, %d)";
//   $q = db_query($sql, $gid, $uid, $tid);
//   $output_html = "received id: $id, tid: $tid, gid: $gid, uid: $uid";
//   drupal_json(array('status' => TRUE, 'data' => $output_html));
// }
//function nycc_rides_relist_ride($onode, $ride_status = "Submitted") {
//  global $user;
//  $node = clone $onode;
//  $title = $node->title;
//  //$ride_date_db = nycc_rides_get_date($date);
//  //
//  $node->nid = NULL;
//  $node->vid = NULL;
//  $node->field_ride_status['und'][0]['value'] = $ride_status;
//  //
//  $node->tnid = NULL;
//  $node->created = NULL;
//  $node->book['mlid'] = NULL;
//  $node->path = NULL;
//  $node->files = array();
//  //
//  $node->field_ride_additional_dates = NULL;
//  $node->field_ride_current_riders = array();
//
//  $node->field_ride_current_leaders = array(array('uid' => $user->uid));
//  $node->field_ride_waitlist = array();
//  //
//  node_save($node);
//  //
//  $nid = $node->nid;
//  drupal_set_message("Please enter a new date before saving.");
//  drupal_goto("node/". $nid . "/edit");
//}
//function nycc_rides_output_ride_waitlist($nid = NULL) {
//  //global $theme_path;
//  if (is_object($nid)) {
//    $ride = $nid;
//    $nid = $ride->nid;
//  }
//  else if (!$nid)
//    $nid = ($_POST['nid'] > 0) ? $_POST['nid'] : ((arg(2) > 0) ? arg(2) : arg(1));
//  if (is_numeric($nid) && ($nid > 0)) {
//    if (!$ride)
//      $ride = node_load( $nid);
//    if ($ride) {
//      if ($ride->field_ride_signups['und'][0]['value'] == "No signups or waiting list")
//        return "";
//      $current_waiters = $ride->field_ride_waitlist;
//      $cnt = 0;
//      if (is_array($current_waiters) && count($current_waiters)) {
//        $output = "<ul class='nycc-ride-waitlist'>";
//        foreach ($current_waiters as $val){
//          if (is_array($val)) {
//            foreach ($val as $current_waiter_uid){
//              if (is_numeric($current_waiter_uid)) {
//                $cnt++;
//        $cp = profile2_load_by_user($current_waiter_uid, "profile");
//                $output .= "<li>". $cp->field_first_name['und'][0]['value'] ." ". $cp->field_last_name['und'][0]['value'] ."</li>";
//              }
//            }
//          }
//        }
//        $output .= "</ul>";
//      }
//      if (!$cnt)
//        $output = "<ul class='nycc-empty-ride-waitlist'><li></li></ul>";
//    }
//  }
//  return $output;
//}
//
//function nycc_rides_get_rider_emails($riders, $separator = ", ") {
//  foreach($riders as $rider) {
//    if (drupal_strlen($output))
//      $output .=  $separator;
//    $account = user_load($rider['uid']);
//  $cp = profile2_load_by_user($account->uid, "profile");
//    $title = $cp->title;
//    $mail = $account->mail;
//    $output .= "<a href='mailto:$mail'>$title</a>";
//  }
//  return $output;
//}
//
//function nycc_rides_get_leader_emails($leaders, $separator = ", ") {
//  global $user;
//  foreach($leaders as $leader) {
//    if (drupal_strlen($output))
//      $output .=  $separator;
//    $cp = node_load($leader['nid']);
//    $account = user_load($cp->uid);
//    $title = $cp->title;
//    $mail = $account->mail;
//    if ($user->uid && in_array("paid-member", $user->roles))
//      $output .= "<a href='mailto:$mail'>$title</a>";
//    else
//      $output .= $title;
//  }
//  return $output;
//}
